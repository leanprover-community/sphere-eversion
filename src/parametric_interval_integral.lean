import measure_theory.integral.interval_integral
import analysis.calculus.parametric_integral

noncomputable theory

open topological_space measure_theory filter first_countable_topology metric set
open_locale topological_space filter nnreal big_operators


-- Below is a capital iota
local notation `Œô` := set.interval_oc


variables {E : Type*} [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]
  {H : Type*} [normed_group H] [normed_space ‚Ñù H]
  [second_countable_topology $ H ‚ÜíL[‚Ñù] E]
  [borel_space $ H ‚ÜíL[‚Ñù] E]
  (ŒΩ : measure ‚Ñù)

lemma has_fderiv_at_of_dominated_of_fderiv_le'' {F : H ‚Üí ‚Ñù ‚Üí E} {F' : H ‚Üí ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {a b : ‚Ñù}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) $ ŒΩ.restrict (Œô a b))
  (hF_int : interval_integrable (F x‚ÇÄ) ŒΩ a b)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) $ ŒΩ.restrict (Œô a b))
  (h_bound : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà Œô a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound ŒΩ a b)
  (h_diff : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà Œô a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_fderiv_at (Œª x, F x t) (F' x t) x) :
  has_fderiv_at (Œª x, ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' x‚ÇÄ t ‚àÇŒΩ) x‚ÇÄ :=
begin
  erw ae_interval_oc_iff' at h_diff h_bound,
  simp_rw [ae_measurable_interval_oc_iff, eventually_and] at hF_meas hF'_meas,
  exact (has_fderiv_at_of_dominated_of_fderiv_le Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1 h_bound.1
         bound_integrable.1 h_diff.1).sub
        (has_fderiv_at_of_dominated_of_fderiv_le Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2 h_bound.2
         bound_integrable.2 h_diff.2)
end

section

open function

lemma is_compact.bdd_above_norm {X : Type*} [topological_space X] {E : Type*} [normed_group E]
  {s : set X} (hs : is_compact s) {f : X ‚Üí E} (hf : continuous f) : ‚àÉ M > 0, ‚àÄ x ‚àà s, ‚à•f x‚à• ‚â§ M :=
begin
  cases (hs.image (continuous_norm.comp hf)).bdd_above with M hM,
  rcases s.eq_empty_or_nonempty with rfl | ‚ü®‚ü®x‚ÇÄ, x‚ÇÄ_in‚ü©‚ü©,
  { use [1, zero_lt_one],
    simp },
  { use M + 1,
    split,
    { linarith [(norm_nonneg (f x‚ÇÄ)).trans (hM (set.mem_image_of_mem (norm ‚àò f) x‚ÇÄ_in))] },
    { intros x x_in,
      linarith [hM (set.mem_image_of_mem (norm ‚àò f) x_in)] } }
end


lemma ae_restrict_of_forall_mem {Œ± : Type*} [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±} {p : Œ± ‚Üí Prop}
    (hs : measurable_set s) (h : ‚àÄ x ‚àà s, p x) : ‚àÄ·µê (x : Œ±) ‚àÇŒº.restrict s, p x :=
begin
  rw ae_restrict_iff' hs,
  exact ae_of_all _ h
end

lemma is_compact.integrable_const {Œ± : Type*} [measurable_space Œ±] [topological_space Œ±]
  {E : Type*} [normed_group E] [measurable_space E]
  {s : set Œ±} (hs : is_compact s) (c : E) (Œº : measure Œ±) [is_locally_finite_measure Œº] :
  integrable (Œª (x : Œ±), c) (Œº.restrict s) :=
begin
  rw integrable_const_iff,
  right,
  simpa only [set.univ_inter, measurable_set.univ, measure.restrict_apply] using hs.measure_lt_top
end

theorem continuous_parametric_integral_of_continuous
  {E : Type*} [normed_group E] [topological_space.second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]
  {Œ± : Type*} [topological_space Œ±] [measurable_space Œ±] [opens_measurable_space Œ±] [t2_space Œ±]
  {Œº : measure_theory.measure Œ±} [is_locally_finite_measure Œº]
  {X : Type*} [topological_space X] [first_countable_topology X] [locally_compact_space X]
  {F : X ‚Üí Œ± ‚Üí E} (hF : continuous (Œª p : X √ó Œ±, F p.1 p.2))
  {s : set Œ±} (hs : is_compact s) (hs' : measurable_set s):
  continuous (Œª x, ‚à´ a in s, F x a ‚àÇŒº) :=
begin
  rw continuous_iff_continuous_at,
  intros x‚ÇÄ,
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©,
  rcases (U_cpct.prod hs).bdd_above_norm hF with ‚ü®M, M_pos, hM‚ü©,
  apply continuous_at_of_dominated,
  { exact eventually_of_forall (Œª x, (hF.comp (continuous.prod.mk x)).ae_measurable _) },
  { apply eventually.mono U_nhds (Œª x x_in, _),
    apply ae_restrict_of_forall_mem hs',
    intros t t_in,
    exact hM (x, t) (set.mk_mem_prod x_in t_in) },
  { apply hs.integrable_const },
  { apply ae_of_all,
    intros a,
    apply (hF.comp $ continuous_id.prod_mk continuous_const).continuous_at }
end

end

section

variables {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±] [topological_space Œ±]
          [order_topology Œ±] [opens_measurable_space Œ±] [first_countable_topology Œ±] {Œº : measure Œ±}
          {X : Type*} [topological_space X] [first_countable_topology X]

lemma continuous_at_parametric_primitive_of_dominated {F : X ‚Üí Œ± ‚Üí E} {bound : Œ± ‚Üí ‚Ñù} {a b b‚ÇÄ : Œ±} {x‚ÇÄ : X}
  (hF_meas : ‚àÄ x, ae_measurable (F x) (Œº.restrict $ Œô a b))
  (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•F x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound Œº a b)
  (h_cont : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), continuous_at (Œª x, F x t) x‚ÇÄ)
  (hb‚ÇÄ : b‚ÇÄ ‚àà Ioo a b) :
  continuous_at (Œª p : X √ó Œ±, ‚à´ (t : Œ±) in a..p.2, F p.1 t ‚àÇŒº) (x‚ÇÄ, b‚ÇÄ) :=
begin

  sorry
end

lemma continuous_parametric_primitive_of_continuous [locally_compact_space X]
  {F : X ‚Üí Œ± ‚Üí E} {a : Œ±}
  (hF : continuous (Œª p : X √ó Œ±, F p.1 p.2)) :
  continuous (Œª p : X √ó Œ±, ‚à´ t in a..p.2, F p.1 t ‚àÇŒº) :=
begin
  rw continuous_iff_continuous_at,
  rintros ‚ü®x‚ÇÄ, b‚ÇÄ‚ü©,
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©,
  apply continuous_at_parametric_primitive_of_dominated,
  { intro x,
    apply (hF.comp (continuous.prod.mk x)).ae_measurable _ },
  { apply eventually.mono U_nhds (Œª x x_in, _),
    /- have H : is_compact (Icc a $ b‚ÇÄ + 1), sorry,
    rcases (U_cpct.prod H).bdd_above_norm hF with ‚ü®M, M_pos, hM‚ü©,
    apply ae_restrict_of_forall_mem,
    intros t t_in, -/
    sorry },
  {
    sorry },
  {
    sorry },
  {
    sorry },
  {
    sorry },
  {
    sorry },
end

end
