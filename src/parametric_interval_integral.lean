import measure_theory.integral.interval_integral
import analysis.calculus.parametric_integral

noncomputable theory

open topological_space measure_theory filter first_countable_topology metric set function
open_locale topological_space filter nnreal big_operators interval

section
open metric
variables {Œ± Œ≤ : Type*} [pseudo_metric_space Œ±] [pseudo_metric_space Œ≤]

lemma mem_ball_prod {x x‚ÇÄ : Œ± √ó Œ≤} {r : ‚Ñù} :
  x ‚àà ball x‚ÇÄ r ‚Üî x.1 ‚àà ball x‚ÇÄ.1 r ‚àß x.2 ‚àà ball x‚ÇÄ.2 r :=
by { cases x‚ÇÄ, simp [‚Üê ball_prod_same] }

end

section
variables {E : Type*} [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]
  {H : Type*} [normed_group H] [normed_space ‚Ñù H]
  [second_countable_topology $ H ‚ÜíL[‚Ñù] E]
  [borel_space $ H ‚ÜíL[‚Ñù] E]
  (ŒΩ : measure ‚Ñù)

/-- Interval version of `has_fderiv_at_of_dominated_of_fderiv_le` -/
lemma has_fderiv_at_of_dominated_of_fderiv_le'' {F : H ‚Üí ‚Ñù ‚Üí E} {F' : H ‚Üí ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {a b : ‚Ñù}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) $ ŒΩ.restrict (Œô a b))
  (hF_int : interval_integrable (F x‚ÇÄ) ŒΩ a b)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) $ ŒΩ.restrict (Œô a b))
  (h_bound : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà Œô a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound ŒΩ a b)
  (h_diff : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà Œô a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_fderiv_at (Œª x, F x t) (F' x t) x) :
  has_fderiv_at (Œª x, ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' x‚ÇÄ t ‚àÇŒΩ) x‚ÇÄ :=
begin
  erw ae_interval_oc_iff' at h_diff h_bound,
  simp_rw [ae_measurable_interval_oc_iff, eventually_and] at hF_meas hF'_meas,
  exact (has_fderiv_at_integral_of_dominated_of_fderiv_le Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1 h_bound.1
         bound_integrable.1 h_diff.1).sub
        (has_fderiv_at_integral_of_dominated_of_fderiv_le Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2 h_bound.2
         bound_integrable.2 h_diff.2)
end

lemma ae_interval_oc {P : ‚Ñù ‚Üí Prop} {a b : ‚Ñù} :
  (‚àÄ·µê t ‚àÇ(ŒΩ.restrict $ Œô a b), P t) ‚Üî
  (‚àÄ·µê t ‚àÇ(ŒΩ.restrict $ Ioc a b), P t) ‚àß ‚àÄ·µê t ‚àÇ(ŒΩ.restrict $ Ioc b a), P t :=
begin
  cases le_or_lt a b with h h,
  { simp [interval_oc_of_le h, Ioc_eq_empty_of_le h] },
  { simp [interval_oc_of_lt h, Ioc_eq_empty_of_le h.le] }
end

/-- Interval version of `has_fderiv_at_of_dominated_loc_of_lip` -/
lemma has_fderiv_at_of_dominated_loc_of_lip_interval {F : H ‚Üí ‚Ñù ‚Üí E} {F' : ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {a b : ‚Ñù}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) $ ŒΩ.restrict (Œô a b))
  (hF_int : interval_integrable (F x‚ÇÄ) ŒΩ a b)
  (hF'_meas : ae_measurable F' $ ŒΩ.restrict (Œô a b))
  (h_lip : ‚àÄ·µê t ‚àÇ(ŒΩ.restrict (Œô a b)),
    lipschitz_on_with (real.nnabs $ bound t) (Œª x, F x t) (ball x‚ÇÄ Œµ))
  (bound_integrable : interval_integrable bound ŒΩ a b)
  (h_diff : ‚àÄ·µê t ‚àÇ(ŒΩ.restrict (Œô a b)), has_fderiv_at (Œª x, F x t) (F' t) x‚ÇÄ) :
  interval_integrable F' ŒΩ a b ‚àß
  has_fderiv_at (Œª x, ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' t ‚àÇŒΩ) x‚ÇÄ :=
begin
  simp_rw [ae_measurable_interval_oc_iff, eventually_and] at hF_meas hF'_meas,
  rw ae_interval_oc at h_lip h_diff,
  have H‚ÇÅ := has_fderiv_at_integral_of_dominated_loc_of_lip Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1
    h_lip.1 bound_integrable.1 h_diff.1,
  have H‚ÇÇ := has_fderiv_at_integral_of_dominated_loc_of_lip Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2
    h_lip.2 bound_integrable.2 h_diff.2,
  exact ‚ü®‚ü®H‚ÇÅ.1, H‚ÇÇ.1‚ü©, H‚ÇÅ.2.sub H‚ÇÇ.2‚ü©
end

end

section

open function

lemma is_compact.bdd_above_norm {X : Type*} [topological_space X] {E : Type*} [normed_group E]
  {s : set X} (hs : is_compact s) {f : X ‚Üí E} (hf : continuous f) : ‚àÉ M > 0, ‚àÄ x ‚àà s, ‚à•f x‚à• ‚â§ M :=
begin
  cases (hs.image (continuous_norm.comp hf)).bdd_above with M hM,
  rcases s.eq_empty_or_nonempty with rfl | ‚ü®‚ü®x‚ÇÄ, x‚ÇÄ_in‚ü©‚ü©,
  { use [1, zero_lt_one],
    simp },
  { use M + 1,
    split,
    { linarith [(norm_nonneg (f x‚ÇÄ)).trans (hM (set.mem_image_of_mem (norm ‚àò f) x‚ÇÄ_in))] },
    { intros x x_in,
      linarith [hM (set.mem_image_of_mem (norm ‚àò f) x_in)] } }
end


lemma ae_restrict_of_forall_mem {Œ± : Type*} [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±}
  {p : Œ± ‚Üí Prop} (hs : measurable_set s) (h : ‚àÄ x ‚àà s, p x) : ‚àÄ·µê (x : Œ±) ‚àÇŒº.restrict s, p x :=
by { rw ae_restrict_iff' hs, exact ae_of_all _ h }

lemma is_compact.integrable_const {Œ± : Type*} [measurable_space Œ±] [topological_space Œ±]
  {E : Type*} [normed_group E] [measurable_space E]
  {s : set Œ±} (hs : is_compact s) (c : E) (Œº : measure Œ±) [is_locally_finite_measure Œº] :
  integrable (Œª (x : Œ±), c) (Œº.restrict s) :=
by simp_rw [integrable_const_iff, measure.restrict_apply_univ, hs.measure_lt_top, or_true]

theorem continuous_parametric_integral_of_continuous
  {E : Type*} [normed_group E] [topological_space.second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]
  {Œ± : Type*} [topological_space Œ±] [measurable_space Œ±] [opens_measurable_space Œ±]
  {Œº : measure_theory.measure Œ±} [is_locally_finite_measure Œº]
  {X : Type*} [topological_space X] [first_countable_topology X] [locally_compact_space X]
  {F : X ‚Üí Œ± ‚Üí E} (hF : continuous (Œª p : X √ó Œ±, F p.1 p.2))
  {s : set Œ±} (hs : is_compact s) (hs' : measurable_set s):
  continuous (Œª x, ‚à´ a in s, F x a ‚àÇŒº) :=
begin
  rw continuous_iff_continuous_at,
  intros x‚ÇÄ,
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©,
  rcases (U_cpct.prod hs).bdd_above_norm hF with ‚ü®M, M_pos, hM‚ü©,
  apply continuous_at_of_dominated,
  { exact eventually_of_forall (Œª x, (hF.comp (continuous.prod.mk x)).ae_measurable _) },
  { apply eventually.mono U_nhds (Œª x x_in, _),
    apply ae_restrict_of_forall_mem hs',
    intros t t_in,
    exact hM (x, t) (set.mk_mem_prod x_in t_in) },
  { apply hs.integrable_const },
  { apply ae_of_all,
    intros a,
    apply (hF.comp $ continuous_id.prod_mk continuous_const).continuous_at }
end

end

section lipschitz

variables {Œ± Œ≤ Œ≥ : Type*} [pseudo_emetric_space Œ±] [pseudo_emetric_space Œ≤] [pseudo_emetric_space Œ≥]

protected lemma lipschitz_on_with.comp {Kf Kg : ‚Ñù‚â•0} {f : Œ≤ ‚Üí Œ≥} {g : Œ± ‚Üí Œ≤} {s : set Œ±} {t : set Œ≤}
  (hf : lipschitz_on_with Kf f t) (hg : lipschitz_on_with Kg g s) (hst : g '' s ‚äÜ t) :
  lipschitz_on_with (Kf * Kg) (f ‚àò g) s :=
assume x x_in y y_in,
calc edist (f (g x)) (f (g y))
    ‚â§ Kf * edist (g x) (g y) : hf (hst $ mem_image_of_mem g x_in) (hst $ mem_image_of_mem g y_in)
... ‚â§ Kf * (Kg * edist x y) : ennreal.mul_left_mono (hg x_in y_in)
... = (Kf * Kg : ‚Ñù‚â•0) * edist x y : by rw [‚Üê mul_assoc, ennreal.coe_mul]

lemma lipschitz_with_prod_mk_left (a : Œ±) : lipschitz_with 1 (prod.mk a : Œ≤ ‚Üí Œ± √ó Œ≤) :=
Œª x y, show max _ _ ‚â§ _, by simp

lemma lipschitz_with_prod_mk_right (b : Œ≤) : lipschitz_with 1 (Œª a : Œ±, (a, b)) :=
Œª x y, show max _ _ ‚â§ _, by simp

end lipschitz

section

variables {Œ± E : Type*} [linear_order Œ±] [measurable_space Œ±]
  [measurable_space E] [normed_group E] [opens_measurable_space E]

lemma interval_integrable_norm_iff {f : Œ± ‚Üí E} {Œº : measure Œ±} {a b : Œ±}
  (hf : ae_measurable f (Œº.restrict (Œô a b))) :
  interval_integrable (Œª t, ‚à•f t‚à•) Œº a b ‚Üî interval_integrable f Œº a b :=
begin
  simp_rw [interval_integrable_iff, integrable_on],
  exact integrable_norm_iff hf
end

lemma interval_oc_comm {Œ± : Type*} [linear_order Œ±] (a b : Œ±) : Œô a b = Œô b a :=
begin
  dsimp [interval_oc],
  rw [min_comm, max_comm]
end

lemma interval_integrable_of_nonneg_of_le {f g : Œ± ‚Üí ‚Ñù} {Œº : measure Œ±} {a b : Œ±}
  (hf : ae_measurable f $ Œº.restrict (Œô a b))
  (h : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), 0 ‚â§ f t ‚àß f t ‚â§ g t)
  (hg : interval_integrable g Œº a b) :
  interval_integrable f Œº a b :=
begin
  rw interval_integrable_iff at *,
  apply integrable.mono' hg hf (h.mono _),
  rintro t ‚ü®H, H'‚ü©,
  change abs ( f t) ‚â§ _,
  rwa abs_of_nonneg H
end

lemma interval_integrable_of_norm_le {f : Œ± ‚Üí E} {bound : Œ± ‚Üí ‚Ñù} {Œº : measure Œ±} {a b : Œ±}
  (hf : ae_measurable f $ Œº.restrict (Œô a b))
  (h : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•f t‚à• ‚â§ bound t) (hbound : interval_integrable bound Œº a b) :
  interval_integrable f Œº a b :=
begin
  rw ‚Üê interval_integrable_norm_iff hf,
  apply interval_integrable_of_nonneg_of_le hf.norm (h.mono _) hbound,
  simp,
end

variables [second_countable_topology E]
  [complete_space E] [normed_space ‚Ñù E] [borel_space E] {a b : Œ±} {f : Œ± ‚Üí E} {bound : Œ± ‚Üí ‚Ñù}
  {Œº : measure Œ±}

namespace interval_integral

lemma integral_mono_of_le {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f g : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±} (hab : a ‚â§ b)
  (hf : interval_integrable f Œº a b)
  (hg : interval_integrable g Œº a b)
  (hfg : f ‚â§·µê[Œº.restrict (Œô a b)] g) :
  ‚à´ u in a..b, f u ‚àÇŒº ‚â§ ‚à´ u in a..b, g u ‚àÇŒº :=
begin
  rw interval_oc_of_le hab at hfg,
  let H := hfg.filter_mono (ae_mono le_rfl),
  simpa only [integral_of_le hab] using set_integral_mono_ae_restrict hf.1 hg.1 H
end

lemma integral_mono_of_le_of_nonneg {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f g : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±} (hab : a ‚â§ b)
  (hf : ae_measurable f $ Œº.restrict (Œô a b))
  (hfnonneg : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), 0 ‚â§ f t)
  (hg : interval_integrable g Œº a b)
  (hfg : f ‚â§·µê[Œº.restrict (Œô a b)] g) :
  ‚à´ u in a..b, f u ‚àÇŒº ‚â§ ‚à´ u in a..b, g u ‚àÇŒº :=
begin
  apply integral_mono_of_le hab _ hg hfg,
  have : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), 0 ‚â§ f t ‚àß f t ‚â§ g t,
  from hfnonneg.and hfg,
  apply interval_integrable_of_nonneg_of_le hf this hg,
end

lemma integral_antimono_of_le {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f g : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±} (hab : b ‚â§ a)
  (hf : interval_integrable f Œº a b)
  (hg : interval_integrable g Œº a b)
  (hfg : f ‚â§·µê[Œº.restrict (Œô a b)] g) :
  ‚à´ u in a..b, g u ‚àÇŒº ‚â§ ‚à´ u in a..b, f u ‚àÇŒº :=
begin
  cases eq_or_lt_of_le hab with hab hab,
  { simp [hab] },
  { rw interval_oc_of_lt hab at hfg,
    rw integral_symm b a,
    rw integral_symm b a,
    apply neg_le_neg,
    apply integral_mono_of_le hab.le hf.symm hg.symm,
    rwa [interval_oc_comm, interval_oc_of_lt hab] }
end

lemma integral_antimono_of_le_of_nonneg {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f g : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±} (hab : b ‚â§ a)
  (hf : ae_measurable f $ Œº.restrict (Œô a b))
  (hfnonneg : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), 0 ‚â§ f t)
  (hg : interval_integrable g Œº a b)
  (hfg : f ‚â§·µê[Œº.restrict (Œô a b)] g) :
  ‚à´ u in a..b, g u ‚àÇŒº ‚â§ ‚à´ u in a..b, f u ‚àÇŒº :=
begin
  apply integral_antimono_of_le hab _ hg hfg,
  have : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), 0 ‚â§ f t ‚àß f t ‚â§ g t,
  from hfnonneg.and hfg,
  apply interval_integrable_of_nonneg_of_le hf this hg,
end
end interval_integral

/- This should replace interval_integrable.mono_set in mathlib -/
lemma interval_integrable.mono_set' {Œ± E : Type*} [linear_order Œ±] [measurable_space Œ±]
  [measurable_space E] [normed_group E] {f : Œ± ‚Üí E} {a b c d : Œ±} {Œº : measure Œ±}
  (hf : interval_integrable f Œº a b) (hsub : Œô c d ‚äÜ Œô a b) : interval_integrable f Œº c d :=
interval_integrable_iff.mpr (hf.def.mono hsub le_rfl)

lemma interval_integrable.const_mul {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±}
  (hf : interval_integrable f Œº a b) (c : ‚Ñù) : interval_integrable (Œª x, c*f x) Œº a b :=
begin
  rw interval_integrable_iff at *,
  exact hf.const_mul c
end

lemma interval_integrable.mul_const {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±}
  (hf : interval_integrable f Œº a b) (c : ‚Ñù) : interval_integrable (Œª x, (f x)*c) Œº a b :=
begin
  rw interval_integrable_iff at *,
  exact hf.mul_const c
end

lemma interval_integral.const_mul {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±} (c : ‚Ñù) : ‚à´ x in a..b, c*f x ‚àÇŒº = c*‚à´ x in a..b, f x ‚àÇŒº :=
begin
  erw mul_sub,
  simpa only [‚Üê integral_mul_left]
end

lemma interval_integral.mul_const {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±]
  {f : Œ± ‚Üí ‚Ñù} {a b : Œ±} {Œº : measure Œ±} (c : ‚Ñù) :
  ‚à´ x in a..b, f x * c ‚àÇŒº = (‚à´ x in a..b, f x ‚àÇŒº) * c :=
by simp_rw [mul_comm, ‚Üê interval_integral.const_mul]

lemma abs_le_abs_of_nonneg {Œ± : Type*} [add_comm_group Œ±] [linear_order Œ±]
   [covariant_class Œ± Œ± (+) (‚â§)] {a b : Œ±}
  (ha : 0 ‚â§ a) (hab : a ‚â§ b) :
  |a| ‚â§ |b| :=
by rwa [abs_of_nonneg ha, abs_of_nonneg (ha.trans hab)]

lemma abs_le_abs_of_nonpos {Œ± : Type*} [add_comm_group Œ±] [linear_order Œ±]
   [covariant_class Œ± Œ± (+) (‚â§)] {a b : Œ±}
  (ha : a ‚â§ 0) (hab : b ‚â§ a) :
  |a| ‚â§ |b| :=
by { rw [abs_of_nonpos ha, abs_of_nonpos (hab.trans ha)], exact neg_le_neg_iff.mpr hab }


lemma interval_integral.norm_integral_le_of_norm_le
  (h : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•f t‚à• ‚â§ bound t)
  (hf : ae_measurable f (Œº.restrict (Œô a b)) )
  (hbound : interval_integrable bound Œº a b) :
  ‚à•‚à´ t in a..b, f t ‚àÇŒº‚à• ‚â§ |‚à´ t in a..b, bound t ‚àÇŒº| :=
begin
  apply interval_integral.norm_integral_le_abs_integral_norm.trans,
  cases le_total a b with hab hab,
  { apply abs_le_abs_of_nonneg,
    { apply interval_integral.integral_nonneg_of_forall hab,
      exact Œª t, norm_nonneg _ },
    apply interval_integral.integral_mono_of_le_of_nonneg hab hf.norm _ hbound h,
    simp },
  { apply abs_le_abs_of_nonpos,
    { rw [‚Üê neg_nonneg, ‚Üê interval_integral.integral_symm],
      apply interval_integral.integral_nonneg_of_forall hab,
      exact Œª t, norm_nonneg _ },
    { apply interval_integral.integral_antimono_of_le_of_nonneg hab hf.norm _ hbound h,
      simp } }
end

lemma interval_integrable_of_norm_sub_le {Œ≤ : Type*} [normed_group Œ≤] [measurable_space Œ≤]
  [opens_measurable_space Œ≤]
  {f‚ÇÄ f‚ÇÅ : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí ‚Ñù}
  {a b : Œ±}
  (hf‚ÇÅ_m : ae_measurable f‚ÇÅ (Œº.restrict $ Œô a b))
  (hf‚ÇÄ_i : interval_integrable f‚ÇÄ Œº a b)
  (hg_i : interval_integrable g Œº a b)
  (h : ‚àÄ·µê a ‚àÇ(Œº.restrict $ Œô a b), ‚à•f‚ÇÄ a - f‚ÇÅ a‚à• ‚â§ g a) :
  interval_integrable f‚ÇÅ Œº a b :=
begin
  have : ‚àÄ·µê a ‚àÇ(Œº.restrict $ Œô a b), ‚à•f‚ÇÅ a‚à• ‚â§ ‚à•f‚ÇÄ a‚à• + g a,
  { apply h.mono,
    intros a ha,
    calc ‚à•f‚ÇÅ a‚à• ‚â§ ‚à•f‚ÇÄ a‚à• + ‚à•f‚ÇÄ a - f‚ÇÅ a‚à• : norm_le_insert _ _
    ... ‚â§ ‚à•f‚ÇÄ a‚à• + g a : add_le_add_left ha _ },
  exact interval_integrable_of_norm_le hf‚ÇÅ_m this (hf‚ÇÄ_i.norm.add hg_i)
end

end

lemma interval_oc_subset_of_mem_Ioc {Œ± : Type*} [linear_order Œ±] {a b c d : Œ±}
  (ha : a ‚àà Ioc c d) (hb : b ‚àà Ioc c d) : Œô a b ‚äÜ Œô c d :=
begin
   rw interval_oc_of_le (ha.1.le.trans ha.2),
   exact Ioc_subset_Ioc (le_min ha.1.le hb.1.le) (max_le ha.2 hb.2)
end

lemma interval_subset_Ioo  {Œ± : Type*} [linear_order Œ±] {a b c d : Œ±}
  (ha : a ‚àà Ioo c d) (hb : b ‚àà Ioo c d) : interval a b ‚äÜ Ioo c d :=
Œª t ‚ü®ht, ht'‚ü©, ‚ü®(lt_min ha.1 hb.1).trans_le ht, ht'.trans_lt (max_lt ha.2 hb.2)‚ü©

lemma interval_oc_subset_Ioo  {Œ± : Type*} [linear_order Œ±] {a b c d : Œ±}
  (ha : a ‚àà Ioo c d) (hb : b ‚àà Ioo c d) : Œô a b ‚äÜ Ioo c d :=
Œª t ‚ü®ht, ht'‚ü©, ‚ü®(lt_min ha.1 hb.1).trans ht, ht'.trans_lt (max_lt ha.2 hb.2)‚ü©

section

variables {Œ± : Type*} [linear_order Œ±] [measurable_space Œ±] [topological_space Œ±]
          [order_topology Œ±] [opens_measurable_space Œ±] [first_countable_topology Œ±] {Œº : measure Œ±}
          {X : Type*} [topological_space X] [first_countable_topology X]
          {E : Type*} [measurable_space E] [normed_group E] [normed_space ‚Ñù E] [borel_space E]
          [second_countable_topology E] [complete_space E]

lemma continuous_at_parametric_primitive_of_dominated
  {F : X ‚Üí Œ± ‚Üí E} (bound : Œ± ‚Üí ‚Ñù) (a b : Œ±) {a‚ÇÄ b‚ÇÄ : Œ±} {x‚ÇÄ : X}
  (hF_meas : ‚àÄ x, ae_measurable (F x) (Œº.restrict $ Œô a b))
  (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•F x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound Œº a b)
  (h_cont : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), continuous_at (Œª x, F x t) x‚ÇÄ)
  (ha‚ÇÄ : a‚ÇÄ ‚àà Ioo a b) (hb‚ÇÄ : b‚ÇÄ ‚àà Ioo a b) (hŒºb‚ÇÄ : Œº {b‚ÇÄ} = 0) :
  continuous_at (Œª p : X √ó Œ±, ‚à´ (t : Œ±) in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº) (x‚ÇÄ, b‚ÇÄ) :=
begin
  have hsub‚ÇÄ : Œô a‚ÇÄ b‚ÇÄ ‚äÜ Œô a b, from
    interval_oc_subset_of_mem_Ioc (mem_Ioc_of_Ioo ha‚ÇÄ) (mem_Ioc_of_Ioo hb‚ÇÄ),
  have Ioo_nhds : Ioo a b ‚àà ùìù b‚ÇÄ, from Ioo_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2,
  have Icc_nhds : Icc a b ‚àà ùìù b‚ÇÄ, from Icc_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2,
  have hx‚ÇÄ : ‚àÄ·µê (t : Œ±) ‚àÇŒº.restrict (Œô a b), ‚à•F x‚ÇÄ t‚à• ‚â§ bound t := (mem_of_mem_nhds h_bound : _),
  have : ‚àÄ·∂† (p : X √ó Œ±) in ùìù (x‚ÇÄ, b‚ÇÄ),
    ‚à´ s in a‚ÇÄ..p.2, F p.1 s ‚àÇŒº = ‚à´ s in a‚ÇÄ..b‚ÇÄ, F p.1 s ‚àÇŒº + ‚à´ s in b‚ÇÄ..p.2, F x‚ÇÄ s ‚àÇŒº +
                                 ‚à´ s in b‚ÇÄ..p.2, (F p.1 s - F x‚ÇÄ s) ‚àÇŒº,
  { rw nhds_prod_eq,
    apply mem_of_superset (prod_mem_prod h_bound Ioo_nhds),
    rintros ‚ü®x, t‚ü© ‚ü®hx : ‚àÄ·µê (t : Œ±) ‚àÇŒº.restrict (Œô a b), ‚à•F x t‚à• ‚â§ bound t, ht : t ‚àà Ioo a b‚ü©,
    dsimp {eta := ff},
    rw [interval_integral.integral_sub, add_assoc, add_sub_cancel'_right,
        interval_integral.integral_add_adjacent_intervals],
    { exact interval_integrable_of_norm_le ((hF_meas x).mono_set hsub‚ÇÄ)
            (ae_restrict_of_ae_restrict_of_subset hsub‚ÇÄ hx)
            (bound_integrable.mono_set' hsub‚ÇÄ) },
    all_goals {
      have hsub : Œô b‚ÇÄ t ‚äÜ Œô a b, from
        interval_oc_subset_of_mem_Ioc (mem_Ioc_of_Ioo hb‚ÇÄ) (mem_Ioc_of_Ioo ht),
      exact interval_integrable_of_norm_le ((hF_meas _).mono_set hsub)
            (ae_restrict_of_ae_restrict_of_subset hsub ‚Äπ_‚Ä∫) (bound_integrable.mono_set' hsub) } },

  rw continuous_at_congr this, clear this,
  refine continuous_at.add (continuous_at.add _ _) _,
  { change continuous_at ((Œª x, ‚à´ (s : Œ±) in a‚ÇÄ..b‚ÇÄ, F x s ‚àÇŒº) ‚àò prod.fst) (x‚ÇÄ, b‚ÇÄ),
    apply continuous_at.comp _ continuous_at_fst,
    exact interval_integral.continuous_at_of_dominated_interval
            (eventually_of_forall $ Œª x, (hF_meas x).mono_set hsub‚ÇÄ)
            (h_bound.mono $ Œª  x, ae_restrict_of_ae_restrict_of_subset hsub‚ÇÄ)
            (bound_integrable.mono_set' hsub‚ÇÄ)
            (ae_restrict_of_ae_restrict_of_subset hsub‚ÇÄ h_cont) },
  { change continuous_at ((Œª t, ‚à´ (s : Œ±) in b‚ÇÄ..t, F x‚ÇÄ s ‚àÇŒº) ‚àò prod.snd) (x‚ÇÄ, b‚ÇÄ),
    apply continuous_at.comp _ continuous_at_snd,
    apply continuous_within_at.continuous_at _ (Icc_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2),
    apply interval_integral.continuous_within_at_primitive hŒºb‚ÇÄ,
    rw [min_eq_right hb‚ÇÄ.1.le, max_eq_right hb‚ÇÄ.2.le],
    exact interval_integrable_of_norm_le (hF_meas x‚ÇÄ) hx‚ÇÄ bound_integrable },
  { suffices : tendsto (Œª (x : X √ó Œ±), ‚à´ s in b‚ÇÄ..x.2, F x.1 s - F x‚ÇÄ s ‚àÇŒº) (ùìù (x‚ÇÄ, b‚ÇÄ)) (ùìù 0),
      by simpa [continuous_at],
    have : ‚àÄ·∂† p : X √ó Œ± in ùìù (x‚ÇÄ, b‚ÇÄ),
      ‚à•‚à´ s in b‚ÇÄ..p.2, F p.1 s - F x‚ÇÄ s ‚àÇŒº‚à• ‚â§ |‚à´ (s : Œ±) in b‚ÇÄ..p.2, 2* bound s ‚àÇŒº|,
    { rw nhds_prod_eq,
      apply mem_of_superset (prod_mem_prod h_bound Ioo_nhds),
      rintros ‚ü®x, t‚ü© ‚ü®hx : ‚àÄ·µê t ‚àÇŒº.restrict (Œô a b), ‚à•F x t‚à• ‚â§ bound t, ht : t ‚àà Ioo a b‚ü©,
      have hsub : Œô b‚ÇÄ t ‚äÜ Œô a b, from
        interval_oc_subset_of_mem_Ioc (mem_Ioc_of_Ioo hb‚ÇÄ) (mem_Ioc_of_Ioo ht),
      have H : ‚àÄ·µê (t : Œ±) ‚àÇŒº.restrict (Œô b‚ÇÄ t), ‚à•F x t - F x‚ÇÄ t‚à• ‚â§ 2*bound t,
      { apply (ae_restrict_of_ae_restrict_of_subset hsub (hx.and hx‚ÇÄ)).mono,
        rintros s ‚ü®hs‚ÇÅ, hs‚ÇÇ‚ü©,
        calc ‚à•F x s - F x‚ÇÄ s‚à• ‚â§ ‚à•F x s‚à• + ‚à•F x‚ÇÄ s‚à• : norm_sub_le _ _
        ... ‚â§ 2 * bound s : by linarith only [hs‚ÇÅ, hs‚ÇÇ] },
      exact interval_integral.norm_integral_le_of_norm_le H
        (((hF_meas x).mono_set hsub).sub ((hF_meas x‚ÇÄ).mono_set hsub))
        ((bound_integrable.mono_set' hsub).const_mul 2) },
    apply squeeze_zero_norm' this,
    have : tendsto (Œª t, ‚à´ (s : Œ±) in b‚ÇÄ..t, 2 * bound s ‚àÇŒº) (ùìù b‚ÇÄ) (ùìù 0),
    { suffices : continuous_at (Œª t, ‚à´ (s : Œ±) in b‚ÇÄ..t, 2 * bound s ‚àÇŒº) b‚ÇÄ,
      { convert this,
        simp },
      apply continuous_within_at.continuous_at _ Icc_nhds,
      apply interval_integral.continuous_within_at_primitive hŒºb‚ÇÄ,
      apply interval_integrable.const_mul,
      apply bound_integrable.mono_set',
      rw [min_eq_right hb‚ÇÄ.1.le, max_eq_right hb‚ÇÄ.2.le] },
    change tendsto (abs ‚àò (Œª t, ‚à´ (s : Œ±) in b‚ÇÄ..t, 2*bound s ‚àÇŒº) ‚àò prod.snd) (ùìù (x‚ÇÄ, b‚ÇÄ)) _,
    have lim_abs : tendsto abs (ùìù (0 : ‚Ñù)) (ùìù 0),
    { conv { congr, skip, skip, rw ‚Üê abs_zero },
      exact continuous_abs.continuous_at },
    apply lim_abs.comp (this.comp _),
    rw nhds_prod_eq, apply tendsto_snd },
end
end

section
variables {Œ± : Type*} [conditionally_complete_linear_order Œ±]
          [measurable_space Œ±] [topological_space Œ±]
          [order_topology Œ±]
          {G : Type*} [normed_group G] [measurable_space G]
          (Œº : measure Œ±) [is_locally_finite_measure Œº]
          (c : G) (a b : Œ±)

end

section
variables {Œ± : Type*} [conditionally_complete_linear_order Œ±] [no_bot_order Œ±] [no_top_order Œ±]
          [measurable_space Œ±] [topological_space Œ±]
          [order_topology Œ±] [opens_measurable_space Œ±] [first_countable_topology Œ±] {Œº : measure Œ±}
          [is_locally_finite_measure Œº] [has_no_atoms Œº]
          {X : Type*} [topological_space X] [first_countable_topology X]
          {E : Type*} [measurable_space E] [normed_group E] [normed_space ‚Ñù E] [borel_space E]
          [second_countable_topology E] [complete_space E]

lemma continuous_parametric_primitive_of_continuous
  [locally_compact_space X]
  {F : X ‚Üí Œ± ‚Üí E} {a‚ÇÄ : Œ±}
  (hF : continuous (Œª p : X √ó Œ±, F p.1 p.2)) :
  continuous (Œª p : X √ó Œ±, ‚à´ t in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº) :=
begin
  rw continuous_iff_continuous_at,
  rintros ‚ü®x‚ÇÄ, b‚ÇÄ‚ü©,
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©,
  cases no_bot (min a‚ÇÄ b‚ÇÄ) with a a_lt,
  cases no_top (max a‚ÇÄ b‚ÇÄ) with b lt_b,
  rw lt_min_iff at a_lt,
  rw max_lt_iff at lt_b,
  have a‚ÇÄ_in : a‚ÇÄ ‚àà Ioo a b := ‚ü®a_lt.1, lt_b.1‚ü©,
  have b‚ÇÄ_in : b‚ÇÄ ‚àà Ioo a b := ‚ü®a_lt.2, lt_b.2‚ü©,
  obtain ‚ü®M : ‚Ñù, M_pos : M > 0,
          hM : ‚àÄ (x : X √ó Œ±), x ‚àà U.prod (Icc a b) ‚Üí ‚à•(Œª (p : X √ó Œ±), F p.fst p.snd) x‚à• ‚â§ M‚ü© :=
    (U_cpct.prod (is_compact_Icc : is_compact $ Icc a b)).bdd_above_norm hF,
  refine continuous_at_parametric_primitive_of_dominated (Œª t, M) a b _ _ _ _ a‚ÇÄ_in b‚ÇÄ_in
    (measure_singleton b‚ÇÄ),
  { intro x,
    apply (hF.comp (continuous.prod.mk x)).ae_measurable _ },
  { apply eventually.mono U_nhds (Œª x (x_in : x ‚àà U), _),
    refine ae_restrict_of_forall_mem measurable_set_Ioc _,
    intros t t_in,
    refine hM (x, t) ‚ü®x_in, (_ : t ‚àà Icc a b)‚ü©,
    rw interval_oc_of_le (a_lt.1.trans lt_b.1).le at t_in,
    exact mem_Icc_of_Ioc t_in },
  { apply interval_integrable_const },
  { apply ae_of_all,
    intros a,
    apply (hF.comp $ continuous_id.prod_mk continuous_const).continuous_at }
end

end

section
open continuous_linear_map

lemma coprod_eq_add {R‚ÇÅ : Type*} [semiring R‚ÇÅ] {M‚ÇÅ : Type*} [topological_space M‚ÇÅ]
  [add_comm_monoid M‚ÇÅ] {M‚ÇÇ : Type*} [topological_space M‚ÇÇ] [add_comm_monoid M‚ÇÇ]
  {M‚ÇÉ : Type*} [topological_space M‚ÇÉ] [add_comm_monoid M‚ÇÉ] [module R‚ÇÅ M‚ÇÅ]
  [module R‚ÇÅ M‚ÇÇ] [module R‚ÇÅ M‚ÇÉ] [has_continuous_add M‚ÇÉ]
  (f : M‚ÇÅ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) (g : M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
  f.coprod g = (f.comp $ fst R‚ÇÅ M‚ÇÅ M‚ÇÇ) + (g.comp $ snd R‚ÇÅ M‚ÇÅ M‚ÇÇ) :=
by { ext ; refl }

end

section

open asymptotics continuous_linear_map

variables {ùïú : Type*} [nondiscrete_normed_field ùïú]
          {E : Type*}  {F : Type*} [normed_group F]

lemma filter.eventually_le.is_O {f g h : E ‚Üí F} {l : filter E}
  (hfg : (Œª x, ‚à•f x‚à•) ‚â§·∂†[l] (Œª x, ‚à•g x‚à•)) (hh : is_O g h l) : is_O f h l :=
(is_O_iff.mpr ‚ü®1, by  simpa using hfg‚ü©).trans hh

lemma filter.eventually.is_O {f g h : E ‚Üí F} {l : filter E}
  (hfg : ‚àÄ·∂† x in l, ‚à•f x‚à• ‚â§ ‚à•g x‚à•) (hh : is_O g h l) : is_O f h l :=
filter.eventually_le.is_O hfg hh

lemma filter.eventually.is_O' {f : E ‚Üí F} {g : E ‚Üí ‚Ñù} {l : filter E}
  (hfg : ‚àÄ·∂† x in l, ‚à•f x‚à• ‚â§ g x) : is_O f g l :=
begin
  rw is_O_iff,
  use 1,
  apply hfg.mono,
  intros x h,
  rwa [real.norm_eq_abs, abs_of_nonneg ((norm_nonneg $ f x).trans h), one_mul]
end

variables [normed_group E] [normed_space ùïú E] [normed_space ùïú F]
          {G : Type*} [normed_group G] [normed_space ùïú G]

lemma asymptotics.is_O.eq_zero {f : E ‚Üí F} {x‚ÇÄ : E} {n : ‚Ñï}
  (h : is_O f (Œª x, ‚à•x - x‚ÇÄ‚à•^n) (ùìù x‚ÇÄ)) (hn : 0 < n) : f x‚ÇÄ = 0 :=
begin
  cases h.is_O_with with c hc,
  have:= mem_of_mem_nhds (is_O_with_iff.mp hc),
  simpa [zero_pow hn]
end

lemma is_o_pow_sub_pow_sub (x‚ÇÄ : E) {n m : ‚Ñï} (h : n < m) :
    is_o (Œª (x : E), ‚à•x - x‚ÇÄ‚à•^m) (Œª (x : E), ‚à•x - x‚ÇÄ‚à•^n) (ùìù x‚ÇÄ) :=
begin
  have : tendsto (Œª x, ‚à•x - x‚ÇÄ‚à•) (ùìù x‚ÇÄ) (ùìù 0),
  { apply tendsto_norm_zero.comp,
    rw ‚Üê sub_self x‚ÇÄ,
    exact tendsto_id.sub tendsto_const_nhds },
  exact (is_o_pow_pow h).comp_tendsto this
end

lemma is_o_pow_sub_sub (x‚ÇÄ : E) {m : ‚Ñï} (h : 1 < m) :
    is_o (Œª (x : E), ‚à•x - x‚ÇÄ‚à•^m) (Œª (x : E), x - x‚ÇÄ) (ùìù x‚ÇÄ) :=
by simpa only [is_o_norm_right, pow_one] using is_o_pow_sub_pow_sub x‚ÇÄ h

lemma asymptotics.is_O_sub_prod_left (e‚ÇÄ : E) (f‚ÇÄ : F) (l : filter $ E √ó F) :
  is_O (Œª p : E √ó F, p.1 - e‚ÇÄ) (Œª p : E √ó F, p - (e‚ÇÄ, f‚ÇÄ)) l :=
is_O_of_le l (Œª p, le_max_left _ _)

lemma asymptotics.is_O_sub_prod_right (e‚ÇÄ : E) (f‚ÇÄ : F) (l : filter $ E √ó F) :
  is_O (Œª p : E √ó F, p.2 - f‚ÇÄ) (Œª p : E √ó F, p - (e‚ÇÄ, f‚ÇÄ)) l :=
is_O_of_le l (Œª p, le_max_right _ _)

lemma asymptotics.is_O_pow_sub_prod_left (e‚ÇÄ : E) (f‚ÇÄ : F) (l : filter $ E √ó F) (n : ‚Ñï) :
  is_O (Œª p : E √ó F, ‚à•p.1 - e‚ÇÄ‚à•^n) (Œª p : E √ó F, ‚à•p - (e‚ÇÄ, f‚ÇÄ)‚à•^n) l :=
(is_O_norm_norm.mpr $ asymptotics.is_O_sub_prod_left e‚ÇÄ f‚ÇÄ l).pow n

lemma asymptotics.is_O_pow_sub_prod_right (e‚ÇÄ : E) (f‚ÇÄ : F) (l : filter $ E √ó F) (n : ‚Ñï) :
  is_O (Œª p : E √ó F, ‚à•p.2 - f‚ÇÄ‚à•^n) (Œª p : E √ó F, ‚à•p - (e‚ÇÄ, f‚ÇÄ)‚à•^n) l :=
(is_O_norm_norm.mpr $ asymptotics.is_O_sub_prod_right e‚ÇÄ f‚ÇÄ l).pow n

lemma asymptotics.is_O.comp_fst {f : E ‚Üí F} {n : ‚Ñï} {e‚ÇÄ : E} {l : filter E}
  (h : is_O f (Œª e, ‚à•e - e‚ÇÄ‚à•^n) l) (g‚ÇÄ : G) (l' : filter G) :
  is_O (Œª p : E √ó G, f p.1) (Œª p, ‚à•p - (e‚ÇÄ, g‚ÇÄ)‚à•^n) (l √ó·∂† l') :=
(h.comp_tendsto tendsto_fst).trans (asymptotics.is_O_pow_sub_prod_left _ _ _ _)

lemma asymptotics.is_O.comp_fst_one {f : E ‚Üí F} {e‚ÇÄ : E}  {l : filter E}
  (h : is_O f (Œª e, ‚à•e - e‚ÇÄ‚à•) l) (g‚ÇÄ : G) (l' : filter G) :
  is_O (Œª p : E √ó G, f p.1) (Œª p, ‚à•p - (e‚ÇÄ, g‚ÇÄ)‚à•) (l √ó·∂† l') :=
begin
  rw show (Œª e, ‚à•e - e‚ÇÄ‚à•) = (Œª e, ‚à•e - e‚ÇÄ‚à•^1), by { ext e, simp } at h,
  simpa using h.comp_fst g‚ÇÄ l'
end

lemma asymptotics.is_O.comp_snd {f : G ‚Üí F} {n : ‚Ñï}  {g‚ÇÄ : G} {l' : filter G}
  (h : is_O f (Œª g, ‚à•g - g‚ÇÄ‚à•^n) l') (e‚ÇÄ : E) (l : filter E) :
  is_O (Œª p : E √ó G, f p.2) (Œª p, ‚à•p - (e‚ÇÄ, g‚ÇÄ)‚à•^n) (l √ó·∂† l') :=
(h.comp_tendsto tendsto_snd).trans (asymptotics.is_O_pow_sub_prod_right _ _ _ _)

lemma asymptotics.is_O.comp_snd_one {f : G ‚Üí F}  {g‚ÇÄ : G} {l' : filter G}
  (h : is_O f (Œª g, ‚à•g - g‚ÇÄ‚à•) l') (e‚ÇÄ : E) (l : filter E) :
  is_O (Œª p : E √ó G, f p.2) (Œª p, ‚à•p - (e‚ÇÄ, g‚ÇÄ)‚à•) (l √ó·∂† l') :=
begin
  rw show (Œª g, ‚à•g - g‚ÇÄ‚à•) = (Œª g, ‚à•g - g‚ÇÄ‚à•^1), by { ext g, simp } at h,
  simpa using h.comp_snd e‚ÇÄ l
end

lemma asymptotics.is_O.has_fderiv_at {f : E ‚Üí F} {x‚ÇÄ : E} {n : ‚Ñï}
  (h : is_O f (Œª x, ‚à•x - x‚ÇÄ‚à•^n) (ùìù x‚ÇÄ)) (hn : 1 < n) :
  has_fderiv_at f (0 : E ‚ÜíL[ùïú] F) x‚ÇÄ :=
begin
  change is_o _ _ _,
  simp only [h.eq_zero (zero_lt_one.trans hn), sub_zero, zero_apply],
  exact h.trans_is_o (is_o_pow_sub_sub x‚ÇÄ hn)
end

lemma has_deriv_at.is_O {f : E ‚Üí F} {x‚ÇÄ : E} {f' : E ‚ÜíL[ùïú] F} (h : has_fderiv_at f f' x‚ÇÄ) :
  is_O (Œª x, f x - f x‚ÇÄ) (Œª x, x - x‚ÇÄ) (ùìù x‚ÇÄ) :=
by simpa using h.is_O.add (is_O_sub f' (ùìù x‚ÇÄ) x‚ÇÄ)

end

section calculus
open continuous_linear_map
variables {ùïú : Type*} [nondiscrete_normed_field ùïú]
          {E : Type*} [normed_group E] [normed_space ùïú E]
          {F : Type*} [normed_group F] [normed_space ùïú F]
          {G : Type*} [normed_group G] [normed_space ùïú G]

lemma has_fderiv_at_prod_left (e‚ÇÄ : E) (f‚ÇÄ : F) : has_fderiv_at (Œª e : E, (e, f‚ÇÄ)) (inl ùïú E F) e‚ÇÄ :=
begin
  rw has_fderiv_at_iff_is_o_nhds_zero,
  simp [asymptotics.is_o_zero]
end

lemma has_fderiv_at.partial_fst {œÜ : E ‚Üí F ‚Üí G} {œÜ' : E √ó F ‚ÜíL[ùïú] G} {e‚ÇÄ : E} {f‚ÇÄ : F}
  (h : has_fderiv_at (uncurry œÜ) œÜ' (e‚ÇÄ, f‚ÇÄ)) :
  has_fderiv_at (Œª e, œÜ e f‚ÇÄ) (œÜ'.comp (inl ùïú E F)) e‚ÇÄ :=
begin
  rw show (Œª e, œÜ e f‚ÇÄ) = (uncurry œÜ) ‚àò (Œª e, (e, f‚ÇÄ)), by { ext e, simp },
  refine h.comp e‚ÇÄ _,
  apply has_fderiv_at_prod_left
end

lemma fderiv_partial_fst {œÜ : E ‚Üí F ‚Üí G} {œÜ' : E √ó F ‚ÜíL[ùïú] G} {e‚ÇÄ : E} {f‚ÇÄ : F}
  (h : has_fderiv_at (uncurry œÜ) œÜ' (e‚ÇÄ, f‚ÇÄ)) :
  fderiv ùïú (Œª e, œÜ e f‚ÇÄ) e‚ÇÄ = œÜ'.comp (inl ùïú E F) :=
h.partial_fst.fderiv

lemma times_cont_diff_prod_left (f‚ÇÄ : F) : times_cont_diff ùïú ‚ä§ (Œª e : E, (e, f‚ÇÄ)) :=
begin
  rw times_cont_diff_top_iff_fderiv,
  split,
  { intro e‚ÇÄ,
    exact (has_fderiv_at_prod_left e‚ÇÄ f‚ÇÄ).differentiable_at },
  { dsimp only,
    rw show fderiv ùïú (Œª (e : E), (e, f‚ÇÄ)) = Œª (e : E), inl ùïú E F,
      from  funext (Œª e : E, (has_fderiv_at_prod_left e f‚ÇÄ).fderiv),
    exact times_cont_diff_const }
end

lemma has_fderiv_at_prod_mk (e‚ÇÄ : E) (f‚ÇÄ : F) : has_fderiv_at (Œª f : F, (e‚ÇÄ, f)) (inr ùïú E F) f‚ÇÄ :=
begin
  rw has_fderiv_at_iff_is_o_nhds_zero,
  simp [asymptotics.is_o_zero]
end

lemma has_fderiv_at.partial_snd {œÜ : E ‚Üí F ‚Üí G} {œÜ' : E √ó F ‚ÜíL[ùïú] G} {e‚ÇÄ : E} {f‚ÇÄ : F}
  (h : has_fderiv_at (uncurry œÜ) œÜ' (e‚ÇÄ, f‚ÇÄ)) :
  has_fderiv_at (Œª f, œÜ e‚ÇÄ f) (œÜ'.comp (inr ùïú E F)) f‚ÇÄ :=
begin
  rw show (Œª f, œÜ e‚ÇÄ f) = (uncurry œÜ) ‚àò (Œª f, (e‚ÇÄ, f)), by { ext e, simp },
  refine h.comp f‚ÇÄ _,
  apply has_fderiv_at_prod_mk
end

lemma fderiv_partial_snd {œÜ : E ‚Üí F ‚Üí G} {œÜ' : E √ó F ‚ÜíL[ùïú] G} {e‚ÇÄ : E} {f‚ÇÄ : F}
  (h : has_fderiv_at (uncurry œÜ) œÜ' (e‚ÇÄ, f‚ÇÄ)) :
  fderiv ùïú (Œª f, œÜ e‚ÇÄ f) f‚ÇÄ = œÜ'.comp (inr ùïú E F) :=
h.partial_snd.fderiv

lemma times_cont_diff_prod_mk (e‚ÇÄ : E) : times_cont_diff ùïú ‚ä§ (Œª f : F, (e‚ÇÄ, f)) :=
begin
  rw times_cont_diff_top_iff_fderiv,
  split,
  { intro f‚ÇÄ,
    exact (has_fderiv_at_prod_mk e‚ÇÄ f‚ÇÄ).differentiable_at },
  { dsimp only,
    rw show fderiv ùïú (Œª (f : F), (e‚ÇÄ, f)) = Œª (f : F), inr ùïú E F,
      from  funext (Œª f : F, (has_fderiv_at_prod_mk e‚ÇÄ f).fderiv),
    exact times_cont_diff_const }
end

/-- Precomposition by a continuous linear map as a continuous linear map between spaces of
continuous linear maps. -/
def continuous_linear_map.comp_rightL (œÜ  : E ‚ÜíL[ùïú] F) : (F ‚ÜíL[ùïú] G) ‚ÜíL[ùïú] (E ‚ÜíL[ùïú] G) :=
{ to_fun := Œª œà, œà.comp œÜ,
  map_add' := Œª x y, add_comp _ _ _,
  map_smul' := Œª r x, by rw [smul_comp, ring_hom.id_apply],
  cont := begin
    dsimp only,
    apply @continuous_of_linear_of_bound ùïú,
    { intros x y,
      apply add_comp },
    { intros c œà,
      rw smul_comp },
    { intros œà,
      change ‚à•œà.comp œÜ‚à• ‚â§ ‚à•œÜ‚à• * ‚à•œà‚à•,
      rw mul_comm,
      apply op_norm_comp_le }
  end }

/-- Postcomposition by a continuous linear map as a continuous linear map between spaces of
continuous linear maps. -/
def continuous_linear_map.comp_leftL (œÜ  : F ‚ÜíL[ùïú] G) : (E ‚ÜíL[ùïú] F) ‚ÜíL[ùïú] (E ‚ÜíL[ùïú] G) :=
{ to_fun := œÜ.comp,
  map_add' := Œª x y, comp_add _ _ _,
  map_smul' := Œª r x, by rw [comp_smul, ring_hom.id_apply],
  cont := begin
    dsimp only,
    apply @continuous_of_linear_of_bound ùïú,
    { intros x y,
      apply comp_add },
    { intros c œà,
      rw comp_smul },
    { intros œà,
      apply op_norm_comp_le }
  end }
end calculus

section real_calculus
open continuous_linear_map
variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          {F : Type*} [normed_group F] [normed_space ‚Ñù F]

lemma times_cont_diff.lipschitz_on_with {s : set E} {f : E ‚Üí F} (hf : times_cont_diff ‚Ñù 1 f)
  (hs : convex ‚Ñù s) (hs' : is_compact s) : ‚àÉ K, lipschitz_on_with K f s :=
begin
  rcases hs'.bdd_above_norm (hf.continuous_fderiv le_rfl) with ‚ü®M, M_pos : 0 < M, hM‚ü©,
  use ‚ü®M, M_pos.le‚ü©,
  exact convex.lipschitz_on_with_of_nnnorm_fderiv_le (Œª x x_in, hf.differentiable le_rfl x) hM hs
end

end real_calculus

section
variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          [complete_space E] [second_countable_topology E]
          [measurable_space E] [borel_space E]
          {H : Type*} [normed_group H] [normed_space ‚Ñù H]
          [finite_dimensional ‚Ñù H]
/-!
We could weaken `finite_dimensional ‚Ñù H` with `second_countable (H ‚ÜíL[‚Ñù] E)` if needed,
but that is less convenient to work with.
-/

open real continuous_linear_map asymptotics

lemma of_eventually_nhds {X : Type*} [topological_space X] {P : X ‚Üí Prop} {x‚ÇÄ : X}
  (h : ‚àÄ·∂† x in ùìù x‚ÇÄ, P x) : P x‚ÇÄ :=
mem_of_mem_nhds h

/--
This statement is a new version using the continuity note in mathlib.
See commit `39e3f3f` for an older version
Maybe todo: let `a` depend on `x`.
-/
lemma has_fderiv_at_parametric_primitive_of_lip' {F : H ‚Üí ‚Ñù ‚Üí E} {F' : ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {G' : H ‚ÜíL[‚Ñù] E}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {s : H ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  {a a‚ÇÄ b‚ÇÄ : ‚Ñù}
  {s' : H ‚ÜíL[‚Ñù] ‚Ñù}
  (ha :  a ‚àà Ioo a‚ÇÄ b‚ÇÄ)
  (hsx‚ÇÄ : s x‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ)
  (hF_meas : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ae_measurable (F x) (volume.restrict (Ioo a‚ÇÄ b‚ÇÄ)))
  (hF_int : integrable_on (F x‚ÇÄ) (Ioo a‚ÇÄ b‚ÇÄ))
  (hF_cont : continuous_at (F x‚ÇÄ) (s x‚ÇÄ))
  (hF'_meas : ae_measurable F' (volume.restrict $ Œô a (s x‚ÇÄ)))
  (h_lipsch : ‚àÄ·µê t ‚àÇ(volume.restrict $ Ioo a‚ÇÄ b‚ÇÄ),
    lipschitz_on_with (nnabs $ bound t) (Œª x, F x t) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable_on bound (Ioo a‚ÇÄ b‚ÇÄ))
  (bound_cont : continuous_at bound (s x‚ÇÄ))
  (bound_nonneg : ‚àÄ t, 0 ‚â§ bound t) -- this is not really needed, but much more convenient
  (h_diff : ‚àÄ·µê a ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)), has_fderiv_at (Œª x, F x a) (F' a) x‚ÇÄ)
  (s_diff : has_fderiv_at s s' x‚ÇÄ)
  (hG' : (‚à´ t in a..s x‚ÇÄ, F' t) + (to_span_singleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s' = G') :
  interval_integrable F' volume a (s x‚ÇÄ) ‚àß
  has_fderiv_at (Œª x : H, ‚à´ t in a..s x, F x t) G' x‚ÇÄ :=
begin
  subst hG',
  let œÜ : H ‚Üí ‚Ñù ‚Üí E := Œª x t, ‚à´ s in a..t, F x s,
  let œà : H ‚ÜíL[‚Ñù] E := ‚à´ t in a..s x‚ÇÄ, F' t,
  have Ioo_nhds : Ioo a‚ÇÄ b‚ÇÄ ‚àà ùìù (s x‚ÇÄ) := Ioo_mem_nhds hsx‚ÇÄ.1 hsx‚ÇÄ.2,
  have bound_int : ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí interval_integrable bound volume s u,
  { intros s u hs hu,
    exact (bound_integrable.mono_set $ interval_subset_Ioo hs hu).interval_integrable },
  have mem_nhds : ball x‚ÇÄ Œµ ‚à© (s ‚Åª¬π' Ioo a‚ÇÄ b‚ÇÄ) ‚àà ùìù x‚ÇÄ :=
  filter.inter_mem (ball_mem_nhds x‚ÇÄ Œµ_pos) (s_diff.continuous_at.preimage_mem_nhds Ioo_nhds),
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have hF_meas_ball : ‚àÄ {x}, x ‚àà ball x‚ÇÄ Œµ ‚Üí ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
    ae_measurable (F x) (volume.restrict $ Œô s u),
  { intros x hx s u hs hu,
    exact (hF_meas x hx).mono_set (interval_oc_subset_Ioo hs hu) },
  have hF_int_ball : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
    interval_integrable (F x) volume s u,
  { intros x hx s u hs hu,
    have : integrable_on (F x) (Ioo a‚ÇÄ b‚ÇÄ),
    { apply integrable_of_norm_sub_le (hF_meas x hx) hF_int (bound_integrable.mul_const (‚à•x - x‚ÇÄ‚à•)),
      apply h_lipsch.mono,
      intros t ht,
      rw norm_sub_rev,
      rw lipschitz_on_with_iff_norm_sub_le at ht,
      simpa [bound_nonneg t] using ht x hx x‚ÇÄ x‚ÇÄ_in },
    exact (this.mono_set $ interval_subset_Ioo hs hu).interval_integrable },
  split,
  { apply interval_integrable_of_norm_le hF'_meas _ (bound_int ha hsx‚ÇÄ),
    replace h_lipsch : ‚àÄ·µê t ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)),
      lipschitz_on_with (nnabs (bound t)) (Œª (x : H), F x t) (ball x‚ÇÄ Œµ),
      from ae_restrict_of_ae_restrict_of_subset (interval_oc_subset_Ioo ha hsx‚ÇÄ) h_lipsch,
    filter_upwards [h_lipsch, h_diff],
    intros t ht_lip ht_diff,
    rw show bound t = nnabs (bound t), by simp [bound_nonneg t],
    exact ht_diff.le_of_lip (ball_mem_nhds x‚ÇÄ Œµ_pos) ht_lip },
  { have D‚ÇÅ : has_fderiv_at (Œª x, œÜ x (s x‚ÇÄ)) (‚à´ t in a..s x‚ÇÄ, F' t) x‚ÇÄ,
    { replace hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) (volume.restrict (Œô a (s x‚ÇÄ))),
        from eventually.mono (ball_mem_nhds x‚ÇÄ Œµ_pos) (Œª x hx, hF_meas_ball hx ha hsx‚ÇÄ),
      replace hF_int : interval_integrable (F x‚ÇÄ) volume a (s x‚ÇÄ), from hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ,
      exact (has_fderiv_at_of_dominated_loc_of_lip_interval _ Œµ_pos hF_meas hF_int hF'_meas
              (ae_restrict_of_ae_restrict_of_subset (interval_oc_subset_Ioo ha hsx‚ÇÄ) h_lipsch)
              (bound_int ha hsx‚ÇÄ) h_diff).2 },
    have D‚ÇÇ : has_fderiv_at (Œª x, œÜ x‚ÇÄ (s x)) ((to_span_singleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s') x‚ÇÄ,
    { refine has_fderiv_at.comp _ _ s_diff,
      rw [has_fderiv_at_iff_has_deriv_at, to_span_singleton_apply, one_smul],
      exact interval_integral.integral_has_deriv_at_right (hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ)
        ‚ü®Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, (hF_meas x‚ÇÄ x‚ÇÄ_in)‚ü© hF_cont },
    have D‚ÇÉ : has_fderiv_at (Œª x, ‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) 0 x‚ÇÄ,
    { apply is_O.has_fderiv_at _ one_lt_two,
      have O‚ÇÅ : is_O (Œª x, ‚à´ s in s x‚ÇÄ..s x, bound s) (Œª x, ‚à•x - x‚ÇÄ‚à•) (ùìù x‚ÇÄ),
      { have : is_O (Œª x, s x - s x‚ÇÄ) (Œª x, ‚à•x - x‚ÇÄ‚à•) (ùìù x‚ÇÄ) := s_diff.is_O_sub.norm_right,
        refine is_O.trans _ this,
        show is_O ((Œª t, ‚à´ s in s x‚ÇÄ..t, bound s) ‚àò s) ((Œª t, t - s x‚ÇÄ) ‚àò s) (ùìù x‚ÇÄ),
        refine is_O.comp_tendsto _ s_diff.continuous_at,
        have M : measurable_at_filter bound (ùìù (s x‚ÇÄ)) volume,
        { use [Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, bound_integrable.1] },
        apply is_O.congr' _ eventually_eq.rfl
          (interval_integral.integral_has_deriv_at_right (bound_int ha hsx‚ÇÄ) M bound_cont).is_O,
        apply eventually.mono Ioo_nhds,
        rintros t ht,
        dsimp only {eta := false},
        rw interval_integral.integral_interval_sub_left (bound_int ha ht) (bound_int ha hsx‚ÇÄ) },
      have O‚ÇÇ : is_O (Œª x, ‚à•x - x‚ÇÄ‚à•) (Œª x, ‚à•x - x‚ÇÄ‚à•) (ùìù x‚ÇÄ), from is_O_refl _ _,
      have O‚ÇÉ : is_O (Œª x, ‚à´ (t : ‚Ñù) in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t)
             (Œª x, (‚à´ t' in s x‚ÇÄ..s x, bound t') * ‚à•x - x‚ÇÄ‚à•)
             (ùìù x‚ÇÄ),
      { have bdd : ‚àÄ·∂† x in ùìù x‚ÇÄ,
          ‚à•‚à´ s in s x‚ÇÄ..s x, F x s - F x‚ÇÄ s‚à• ‚â§ |‚à´ s in s x‚ÇÄ..s x, bound s |* ‚à•x - x‚ÇÄ‚à•,
        { apply eventually.mono mem_nhds,
          rintros x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©,
          rw [‚Üê abs_of_nonneg (norm_nonneg $ x - x‚ÇÄ), ‚Üê abs_mul, ‚Üê interval_integral.mul_const],
          apply interval_integral.norm_integral_le_of_norm_le _ ((hF_meas_ball hx hsx‚ÇÄ hsx).sub
            (hF_meas_ball x‚ÇÄ_in hsx‚ÇÄ hsx))
            ((bound_int hsx‚ÇÄ hsx).mul_const _),
          apply ae_restrict_of_ae_restrict_of_subset (interval_oc_subset_Ioo hsx‚ÇÄ hsx),
          apply h_lipsch.mono,
          intros t ht,
          rw lipschitz_on_with_iff_norm_sub_le at ht,
          simp only [coe_nnabs] at ht,
          rw ‚Üê abs_of_nonneg (bound_nonneg t),
          exact ht x hx x‚ÇÄ (mem_ball_self Œµ_pos) },
        rw ‚Üê is_O_norm_right,
        simp only [norm_eq_abs, abs_mul, abs_norm_eq_norm],
        exact bdd.is_O' },
      simp_rw pow_two,
      exact O‚ÇÉ.trans (O‚ÇÅ.mul O‚ÇÇ) },
    have : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚à´ t in a..s x, F x t =
      œÜ x (s x‚ÇÄ) + œÜ x‚ÇÄ (s x) + (‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) - œÜ x‚ÇÄ (s x‚ÇÄ),
    { apply eventually.mono mem_nhds,
      rintros x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©,
      have int‚ÇÅ : interval_integrable (F x‚ÇÄ) volume a (s x‚ÇÄ) := hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ,
      have int‚ÇÇ : interval_integrable (F x‚ÇÄ) volume (s x‚ÇÄ) (s x) := hF_int_ball x‚ÇÄ x‚ÇÄ_in hsx‚ÇÄ hsx,
      have int‚ÇÉ : interval_integrable (F x) volume a (s x‚ÇÄ) := hF_int_ball x hx ha hsx‚ÇÄ,
      have int‚ÇÑ : interval_integrable (F x) volume (s x‚ÇÄ) (s x) := hF_int_ball x hx hsx‚ÇÄ hsx,
      dsimp [œÜ] {eta := ff},
      rw [interval_integral.integral_sub int‚ÇÑ int‚ÇÇ, add_sub,
          add_right_comm, sub_sub, interval_integral.integral_add_adjacent_intervals int‚ÇÉ int‚ÇÑ],
      conv_rhs { congr, skip, rw add_comm },
      rw interval_integral.integral_add_adjacent_intervals int‚ÇÅ int‚ÇÇ,
      abel },
    apply has_fderiv_at.congr_of_eventually_eq _ this,
    simpa using ((D‚ÇÅ.add D‚ÇÇ).add D‚ÇÉ).sub (has_fderiv_at_const (œÜ x‚ÇÄ (s x‚ÇÄ)) x‚ÇÄ) }
end

/- Sketch of an ugly proof of the old version from the new version -/
lemma has_fderiv_at_parametric_primitive_of_lip {F : H ‚Üí ‚Ñù ‚Üí E} {F' : ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {bound : ‚Ñù ‚Üí ‚Ñù} {t‚ÇÄ : ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  {a a‚ÇÄ b‚ÇÄ : ‚Ñù}
  (ha :  a ‚àà Ioo a‚ÇÄ b‚ÇÄ)
  (ht‚ÇÄ : t‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ)
  (hF_meas : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ae_measurable (F x) (volume.restrict (Ioo a‚ÇÄ b‚ÇÄ)))
  (hF_int : integrable_on (F x‚ÇÄ) (Ioo a‚ÇÄ b‚ÇÄ))
  (hF_cont : continuous_at (F x‚ÇÄ) t‚ÇÄ)
  (hF'_meas : ae_measurable F' (volume.restrict $ Œô a t‚ÇÄ))
  (h_lipsch : ‚àÄ·µê t ‚àÇ(volume.restrict $ Ioo a‚ÇÄ b‚ÇÄ),
    lipschitz_on_with (nnabs $ bound t) (Œª x, F x t) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable_on bound (Ioo a‚ÇÄ b‚ÇÄ))
  (bound_cont : continuous_at bound t‚ÇÄ)
  (bound_nonneg : ‚àÄ t, 0 ‚â§ bound t) -- this is not really needed, but much more convenient
  (h_diff : ‚àÄ·µê a ‚àÇvolume.restrict (Œô a t‚ÇÄ), has_fderiv_at (Œª x, F x a) (F' a) x‚ÇÄ) :
  interval_integrable F' volume a t‚ÇÄ ‚àß
  has_fderiv_at (Œª p : H √ó ‚Ñù, ‚à´ t in a..p.2, F p.1 t)
    (coprod (‚à´ t in a..t‚ÇÄ, F' t) (to_span_singleton ‚Ñù $ F x‚ÇÄ t‚ÇÄ)) (x‚ÇÄ, t‚ÇÄ) :=
begin
  split, sorry, -- ignoring this part for now
  apply (has_fderiv_at_parametric_primitive_of_lip' Œµ_pos ha _ _ _ _ _ _
    bound_integrable _ bound_nonneg _ _ _).2,
  { exact Œª t, (F' t).comp (fst ‚Ñù H ‚Ñù) },
  { apply_instance },
  { exact snd ‚Ñù H ‚Ñù },
  { exact ht‚ÇÄ },
  { exact Œª p hp, hF_meas p.1 (mem_ball_prod.mp hp).1 },
  { exact hF_int },
  { exact hF_cont },
  { exact (fst ‚Ñù H ‚Ñù).comp_rightL.continuous.measurable.comp_ae_measurable hF'_meas },
  { filter_upwards [h_lipsch], intros t ht, sorry }, -- cannot find lipschitz_on_with.comp,
  exact bound_cont,
  { filter_upwards [h_diff],
    rintros t (ht : has_fderiv_at (Œª (x : H), F x t) (F' t) (x‚ÇÄ, t‚ÇÄ).1),
    exact ht.comp _ has_fderiv_at_fst },
  { exact has_fderiv_at_snd },
  ext; simp only [continuous_linear_map.add_comp,
    continuous_linear_map.coprod_apply,
    continuous_linear_map.inl_apply,
    continuous_linear_map.inr_apply,
    add_zero, zero_add,
    continuous_linear_map.coe_comp',
    function.comp_app,
    continuous_linear_map.coe_snd',
    continuous_linear_map.add_apply,
    continuous_linear_map.map_zero,
    add_left_eq_self],
  { sorry }, -- need some form of `continuous_linear_map.interval_integral_apply`
  { sorry },
end

lemma nnabs_coe (K : ‚Ñù‚â•0) : nnabs K = K := by simp


lemma has_fderiv_at_parametric_primitive_of_times_cont_diff {F : H ‚Üí ‚Ñù ‚Üí E} (hF : times_cont_diff ‚Ñù 1 ‚ÜøF)
  [finite_dimensional ‚Ñù H] (x‚ÇÄ : H) (a t‚ÇÄ : ‚Ñù) :
  (interval_integrable (Œª t, (fderiv ‚Ñù $ Œª x, F x t) x‚ÇÄ) volume a t‚ÇÄ) ‚àß
  has_fderiv_at (Œª p : H √ó ‚Ñù, ‚à´ t in a..p.2, F p.1 t) (coprod (‚à´ t in a..t‚ÇÄ, (fderiv ‚Ñù $ Œª x, F x t) x‚ÇÄ) (to_span_singleton ‚Ñù $ F x‚ÇÄ t‚ÇÄ)) (x‚ÇÄ, t‚ÇÄ) :=
begin
  set a‚ÇÄ :=  min a t‚ÇÄ - 1,
  set b‚ÇÄ :=  max a t‚ÇÄ + 1,
  have ha : a ‚àà Ioo a‚ÇÄ b‚ÇÄ,
  { dsimp [a‚ÇÄ, b‚ÇÄ],
    split,
    linarith [min_le_left a t‚ÇÄ],
    linarith [le_max_left a t‚ÇÄ] },
  have ht‚ÇÄ : t‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ,
  { dsimp [a‚ÇÄ, b‚ÇÄ],
    split,
    linarith [min_le_right a t‚ÇÄ],
    linarith [le_max_right a t‚ÇÄ] },
  have cpct : is_compact ((closed_ball x‚ÇÄ 1).prod $ Icc a‚ÇÄ b‚ÇÄ),
      from (proper_space.is_compact_closed_ball x‚ÇÄ 1).prod is_compact_Icc,
  obtain ‚ü®M, M_nonneg, F_bound‚ü© : ‚àÉ M : ‚Ñù, 0 ‚â§ M ‚àß ‚àÄ x ‚àà ball x‚ÇÄ 1, ‚àÄ t ‚àà Ioo a‚ÇÄ b‚ÇÄ, ‚à•F x t‚à• ‚â§ M,
  { rcases cpct.bdd_above_norm hF.continuous with ‚ü®M, M_pos : 0 < M, hM‚ü©,
    use [M, M_pos.le],
    exact Œª x x_in t t_in, hM (x, t) ‚ü®ball_subset_closed_ball x_in, mem_Icc_of_Ioo t_in‚ü© },
  obtain ‚ü®K, F_lip‚ü© : ‚àÉ K, ‚àÄ t ‚àà Ioo a‚ÇÄ b‚ÇÄ, lipschitz_on_with K (Œª x, F x t) (ball x‚ÇÄ 1),
  { have conv : convex ‚Ñù ((closed_ball x‚ÇÄ 1).prod $ Icc  a‚ÇÄ b‚ÇÄ),
      from (convex_closed_ball x‚ÇÄ 1).prod (convex_Icc a‚ÇÄ b‚ÇÄ),
    rcases hF.lipschitz_on_with conv cpct with ‚ü®K, hK‚ü©,
    use K,
    intros t t_in,
    rw [show (Œª (x : H), F x t) = (uncurry F) ‚àò (Œª x : H, (x, t)), by { ext, simp }, ‚Üê mul_one K],
    apply hK.comp ((lipschitz_with_prod_mk_right t).lipschitz_on_with $ ball x‚ÇÄ 1),
    rintros ‚ü®x, s‚ü© ‚ü®x', hx, h‚ü©, cases h,
    refine ‚ü®ball_subset_closed_ball hx, mem_Icc_of_Ioo t_in‚ü© },
  have cont_x : ‚àÄ x, continuous (F x),
    from Œª x, hF.continuous.comp (continuous.prod.mk x),
  have int_Icc : ‚àÄ x, integrable_on (F x) (Icc a‚ÇÄ b‚ÇÄ),
    from Œª x, (cont_x x).integrable_on_compact is_compact_Icc,
  have int_Ioo : ‚àÄ x, integrable_on (F x) (Ioo a‚ÇÄ b‚ÇÄ),
    from Œª x, (int_Icc x).mono_set Ioo_subset_Icc_self,
  apply has_fderiv_at_parametric_primitive_of_lip zero_lt_one ha ht‚ÇÄ
    (Œª x hx, (cont_x x).ae_measurable _) (int_Ioo x‚ÇÄ) (cont_x x‚ÇÄ).continuous_at
    _ _ _ (continuous_at_const : continuous_at (Œª (t : ‚Ñù), (K : ‚Ñù)) t‚ÇÄ) (Œª t, nnreal.coe_nonneg K),
  { apply ae_of_all,
    intro t,
    apply (times_cont_diff.has_strict_fderiv_at _ le_rfl).has_fderiv_at,
    rw show (Œª x, F x t) = (uncurry F) ‚àò (Œª x, (x, t)), by { ext, simp },
    exact hF.comp ((times_cont_diff_prod_left t).of_le le_top) },
  { apply continuous.ae_measurable,
    have : (Œª t, fderiv ‚Ñù (Œª (x : H), F x t) x‚ÇÄ) =
      ((Œª œÜ : H √ó ‚Ñù ‚ÜíL[‚Ñù] E, œÜ.comp (inl ‚Ñù H ‚Ñù)) ‚àò (fderiv ‚Ñù $ uncurry F) ‚àò (Œª t, (x‚ÇÄ, t))),
    { ext t,
      have : has_fderiv_at (Œª e, F e t) ((fderiv ‚Ñù (uncurry F) (x‚ÇÄ, t)).comp (inl ‚Ñù H ‚Ñù)) x‚ÇÄ,
        from has_fderiv_at.partial_fst (hF.has_strict_fderiv_at le_rfl).has_fderiv_at,
      rw [this.fderiv] },
    rw this, clear this,
    exact (inl ‚Ñù H ‚Ñù).comp_rightL.continuous.comp ((hF.continuous_fderiv le_rfl).comp $
      continuous.prod.mk x‚ÇÄ) },
  { refine ae_restrict_of_forall_mem measurable_set_Ioo _,
    swap,
    intros t t_in,
    rw nnabs_coe K,
    exact F_lip t t_in },
  { exact integrable_on_const.mpr (or.inr measure_Ioo_lt_top) }
end

lemma times_cont_diff_parametric_primitive_of_times_cont_diff {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï} (hF : times_cont_diff ‚Ñù n ‚ÜøF)
  [finite_dimensional ‚Ñù H] (x‚ÇÄ : H) (a t‚ÇÄ : ‚Ñù) :
  times_cont_diff ‚Ñù n (Œª p : H √ó ‚Ñù, ‚à´ t in a..p.2, F p.1 t) :=
begin
  revert F,
  induction n with n ih,
  {
    sorry },
  { intros F hF,
    have hF‚ÇÅ : times_cont_diff ‚Ñù 1 (‚ÜøF),
    /- { apply hF.of_le,
      norm_cast,
      exact le_add_self } -/sorry,
    rw times_cont_diff_succ_iff_fderiv,
    split,
    { rintros ‚ü®x‚ÇÄ, t‚ÇÄ‚ü©,
      exact ‚ü®_, (has_fderiv_at_parametric_primitive_of_times_cont_diff hF‚ÇÅ x‚ÇÄ a t‚ÇÄ).2‚ü© },
    { rw times_cont_diff_succ_iff_fderiv at hF,
      sorry } },
end

end
