import measure_theory.interval_integral
import analysis.calculus.parametric_integral

noncomputable theory

open topological_space measure_theory filter first_countable_topology metric
open_locale topological_space filter nnreal big_operators

section interval_integrable
open set

variables {Œ± : Type*} [linear_order Œ±] {P : Œ± ‚Üí Prop} {a b : Œ±}

/-- The open-closed interval with unordered bounds. -/
def interval_oc : Œ± ‚Üí Œ± ‚Üí set Œ± := Œª a b, Ioc (min a b) (max a b)

-- Below is a capital iota
local notation `Œô` := interval_oc

lemma interval_oc_of_le (h : a ‚â§ b) : Œô a b = Ioc a b :=
by simp [interval_oc, h]

lemma interval_oc_of_lt (h : b < a) : Œô a b = Ioc b a :=
by simp [interval_oc, le_of_lt h]

lemma forall_interval_oc_iff :
  (‚àÄ x ‚àà Œô a b, P x) ‚Üî (‚àÄ x ‚àà Ioc a b, P x) ‚àß (‚àÄ x ‚àà Ioc b a, P x) :=
by { dsimp [interval_oc], cases le_total a b with hab hab ; simp [hab] }

variables {E : Type*} [measurable_space Œ±] {Œº : measure Œ±} [normed_group E]

lemma ae_interval_oc_iff :
  (‚àÄ·µê x ‚àÇŒº, x ‚àà Œô a b ‚Üí P x) ‚Üî (‚àÄ·µê x ‚àÇŒº, x ‚àà Ioc a b ‚Üí P x) ‚àß (‚àÄ·µê x ‚àÇŒº, x ‚àà Ioc b a ‚Üí P x) :=
by { dsimp [interval_oc], cases le_total a b with hab hab ; simp [hab] }

lemma ae_measurable_interval_oc_iff {Œº : measure Œ±} {Œ≤ : Type*} [measurable_space Œ≤] {f : Œ± ‚Üí Œ≤} :
  (ae_measurable f $ Œº.restrict $ Œô a b) ‚Üî
  (ae_measurable f $ Œº.restrict $ Ioc a b) ‚àß (ae_measurable f $ Œº.restrict $ Ioc b a) :=
by { dsimp [interval_oc], cases le_total a b with hab hab ; simp [hab] }


variables  [topological_space Œ±] [opens_measurable_space Œ±] [order_closed_topology Œ±]

lemma ae_interval_oc_iff' : (‚àÄ·µê x ‚àÇŒº, x ‚àà Œô a b ‚Üí P x) ‚Üî
  (‚àÄ·µê x ‚àÇ (Œº.restrict $ Ioc a b), P x) ‚àß (‚àÄ·µê x ‚àÇ (Œº.restrict $ Ioc b a), P x) :=
begin
  simp_rw ae_interval_oc_iff,
  rw [ae_restrict_eq, eventually_inf_principal, ae_restrict_eq, eventually_inf_principal] ;
  exact measurable_set_Ioc,
end

variables  [second_countable_topology E] [complete_space E] [normed_space ‚Ñù E]
  [measurable_space E] [borel_space E]

lemma interval_integrable.norm {f : Œ± ‚Üí E} {a b : Œ±} (h : interval_integrable f Œº a b) :
  interval_integrable (Œª x, ‚à•f x‚à•) Œº a b  :=
‚ü®h.1.norm, h.2.norm‚ü©

lemma interval_integral.congr_ae' {f g : Œ± ‚Üí E} (h : ‚àÄ·µê x ‚àÇŒº, x ‚àà Ioc a b ‚Üí f x = g x)
  (h' : ‚àÄ·µê x ‚àÇŒº, x ‚àà Ioc b a ‚Üí f x = g x) :
  ‚à´ (x : Œ±) in a..b, f x ‚àÇŒº = ‚à´ (x : Œ±) in a..b, g x ‚àÇŒº :=
by simp only [interval_integral, set_integral_congr_ae (measurable_set_Ioc) h,
              set_integral_congr_ae (measurable_set_Ioc) h']

lemma interval_integral.congr_ae {f g : Œ± ‚Üí E} (h : ‚àÄ·µê x ‚àÇŒº, x ‚àà Œô a b ‚Üí f x = g x) :
  ‚à´ (x : Œ±) in a..b, f x ‚àÇŒº = ‚à´ (x : Œ±) in a..b, g x ‚àÇŒº :=
interval_integral.congr_ae' (ae_interval_oc_iff.mp h).1 (ae_interval_oc_iff.mp h).2

lemma interval_integral.integral_zero_ae  {f : Œ± ‚Üí E} (h : ‚àÄ·µê x ‚àÇŒº, x ‚àà Œô a b ‚Üí f x = 0) :
  ‚à´ (x : Œ±) in a..b, f x ‚àÇŒº = 0 :=
calc ‚à´ x in a..b, f x ‚àÇŒº = ‚à´ x in a..b, 0 ‚àÇŒº : interval_integral.congr_ae h
                     ... = 0                 : interval_integral.integral_zero

end interval_integrable

-- Below is a capital iota
local notation `Œô` := interval_oc



section interval
variables {E : Type*} [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]
variables {X : Type*} [topological_space X]
variables {Œ± : Type*} [measurable_space Œ±] {Œº : measure Œ±}
variables [linear_order Œ±]

open set

lemma continuous_at_of_dominated_interval [first_countable_topology X]
  {F : X ‚Üí Œ± ‚Üí E} {x‚ÇÄ : X} {bound : Œ± ‚Üí ‚Ñù} {a b : Œ±}
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) (Œº.restrict $ Œô a b))
  (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•F x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound Œº a b)
  (h_cont : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), continuous_at (Œª x, F x t) x‚ÇÄ) :
  continuous_at (Œªn, ‚à´ t in a..b, F n t ‚àÇŒº) x‚ÇÄ :=
begin
  have gc := first_countable_topology.nhds_generated_countable x‚ÇÄ,
  cases bound_integrable,
  cases le_or_gt a b with hab hab;
  [{ rw interval_oc_of_le hab at *,
     simp_rw interval_integral.integral_of_le hab },
   { rw interval_oc_of_lt hab at *,
     simp_rw interval_integral.integral_of_ge (le_of_lt hab),
     refine tendsto.neg _ }];
  apply tendsto_integral_filter_of_dominated_convergence bound gc hF_meas (mem_of_mem_nhds hF_meas : _) h_bound,
  exact bound_integrable_left,
  exact h_cont,
  exact bound_integrable_right,
  exact h_cont
end

lemma continuous_of_dominated_interval [first_countable_topology X]
  {F : X ‚Üí Œ± ‚Üí E} {bound : Œ± ‚Üí ‚Ñù} {a b : Œ±}
  (hF_meas : ‚àÄ x, ae_measurable (F x) $ Œº.restrict $ Œô a b)
  (h_bound : ‚àÄ x, ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•F x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound Œº a b)
  (h_cont : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), continuous (Œª x, F x t)) :
  continuous (Œªn, ‚à´ t in a..b, F n t ‚àÇŒº) :=
continuous_iff_continuous_at.mpr (Œª x‚ÇÄ, continuous_at_of_dominated_interval (eventually_of_forall hF_meas)
  (eventually_of_forall h_bound) ‚Äπ_‚Ä∫ $ h_cont.mono $ Œª _, continuous.continuous_at)

variables

lemma Iic_inter_Ioc {Œ± : Type*} [linear_order Œ±] {a‚ÇÅ a‚ÇÇ a‚ÇÉ : Œ±} (h : a‚ÇÇ ‚àà Ioc a‚ÇÅ a‚ÇÉ) :
Iic a‚ÇÇ ‚à© Ioc a‚ÇÅ a‚ÇÉ = Ioc a‚ÇÅ a‚ÇÇ :=
begin
  ext x,
  change x ‚â§ a‚ÇÇ ‚àß a‚ÇÅ < x ‚àß x ‚â§ a‚ÇÉ ‚Üî a‚ÇÅ < x ‚àß x ‚â§ a‚ÇÇ,
  split,
  rintros ‚ü®H, H', H''‚ü©,
  exact ‚ü®H', H‚ü©,
  rintros ‚ü®H, H'‚ü©,
  exact ‚ü®H', H, H'.trans h.2‚ü©,
end

lemma interval_integral_indicator [topological_space Œ±] [opens_measurable_space Œ±] [order_closed_topology Œ±] [first_countable_topology Œ±]
  {a‚ÇÅ a‚ÇÇ a‚ÇÉ : Œ±} (h : a‚ÇÇ ‚àà Ioc a‚ÇÅ a‚ÇÉ) {f : Œ± ‚Üí E} :
  ‚à´ x in a‚ÇÅ..a‚ÇÉ, indicator {x | x ‚â§ a‚ÇÇ} f x ‚àÇ Œº = ‚à´ x in a‚ÇÅ..a‚ÇÇ, f x ‚àÇ Œº :=
begin
  have : {x | x ‚â§ a‚ÇÇ} ‚à© Ioc a‚ÇÅ a‚ÇÉ = Ioc a‚ÇÅ a‚ÇÇ, from Iic_inter_Ioc h,
  rw [interval_integral.integral_of_le h.1.le, interval_integral.integral_of_le (h.1.le.trans h.2),
      integral_indicator, measure.restrict_restrict, this],
  exact measurable_set_Iic,
  all_goals { apply measurable_set_Iic},
end

lemma continuous_at_primitive [topological_space Œ±] [first_countable_topology Œ±]
  [opens_measurable_space Œ±] [order_topology Œ±] {f : Œ± ‚Üí E}
  (h_int : ‚àÄ a b : Œ±, interval_integrable f Œº a b) (a : Œ±)
  {b‚ÇÄ b‚ÇÅ b‚ÇÇ : Œ±} (hb‚ÇÅ : b‚ÇÅ < b‚ÇÄ) (hb‚ÇÇ : b‚ÇÄ < b‚ÇÇ) (hb‚ÇÄ : Œº {b‚ÇÄ} = 0) :
  continuous_at (Œª b, ‚à´ x in a .. b, f x ‚àÇ Œº) b‚ÇÄ :=
begin
  have : (Œª b, ‚à´ x in a..b, f x ‚àÇŒº) = (Œª b, ‚à´ x in a..b‚ÇÅ, f x ‚àÇŒº) + (Œª b, ‚à´ x in b‚ÇÅ..b, f x ‚àÇŒº),
  { ext b,
    exact (interval_integral.integral_add_adjacent_intervals (h_int _ _) (h_int _ _)).symm },
  rw this, clear this,
  refine continuous_const.continuous_at.add _,
  have : (Œª b, ‚à´ x in b‚ÇÅ..b, f x ‚àÇŒº) =·∂†[ùìù b‚ÇÄ] Œª b, ‚à´ x in b‚ÇÅ..b‚ÇÇ, indicator {x | x ‚â§ b} f x ‚àÇ Œº,
  from eventually_eq_of_mem (Ioo_mem_nhds hb‚ÇÅ hb‚ÇÇ)
                          (Œª b b_in, (interval_integral_indicator (Ioo_subset_Ioc_self b_in)).symm),
  rw  continuous_at_congr this, clear this,
  refine continuous_at_of_dominated_interval _ _ (h_int b‚ÇÅ b‚ÇÇ).norm _,
  { apply eventually.mono (Ioo_mem_nhds hb‚ÇÅ hb‚ÇÇ),
    intros x hx,
    erw [‚Üê ae_measurable_indicator_iff, measure.restrict_restrict, Iic_inter_Ioc],
    { exact (h_int _ _).2.ae_measurable },
    { simp [hb‚ÇÅ, hb‚ÇÇ, hx.1, hx.2.le] },
    exacts [measurable_set_Iic, measurable_set_Iic] },
  { refine eventually_of_forall (Œª (x : Œ±), eventually_of_forall (Œª (t : Œ±), _)),
    dsimp [indicator],
    split_ifs ; simp },
  { have : ‚àÄ·µê t ‚àÇŒº.restrict (Œô b‚ÇÅ b‚ÇÇ), t < b‚ÇÄ ‚à® t > b‚ÇÄ,
    { apply ae_restrict_of_ae,
      apply eventually.mono (compl_mem_ae_iff.mpr hb‚ÇÄ),
      intros x hx,
      exact ne.lt_or_lt hx },
    apply this.mono,
    rintros x‚ÇÄ (hx‚ÇÄ | hx‚ÇÄ),
    { have : ‚àÄ·∂† x in ùìù b‚ÇÄ, {t : Œ± | t ‚â§ x}.indicator f x‚ÇÄ = f x‚ÇÄ,
      { apply eventually.mono (Ioi_mem_nhds hx‚ÇÄ),
        intros x hx,
        simp [hx.le] },
      rw continuous_at_congr this,
      apply continuous_at_const },
    { have : ‚àÄ·∂† x in ùìù b‚ÇÄ, {t : Œ± | t ‚â§ x}.indicator f x‚ÇÄ = 0,
      { apply eventually.mono (Iio_mem_nhds hx‚ÇÄ),
        intros x hx,
        simp [hx] },
      rw continuous_at_congr this,
      apply continuous_at_const } },
end

lemma continuous_primitive [no_bot_order Œ±] [no_top_order Œ±] [topological_space Œ±]
  [first_countable_topology Œ±] [opens_measurable_space Œ±] [order_topology Œ±] {f : Œ± ‚Üí E}
  (h_int : ‚àÄ a b : Œ±, interval_integrable f Œº a b) (a : Œ±) (hŒº : ‚àÄ x, Œº {x} = 0):
  continuous (Œª b, ‚à´ x in a .. b, f x ‚àÇ Œº) :=
begin
  rw continuous_iff_continuous_at,
  intro b‚ÇÄ,
  cases no_bot b‚ÇÄ with b‚ÇÅ hb‚ÇÅ,
  cases no_top b‚ÇÄ with b‚ÇÇ hb‚ÇÇ,
  exact continuous_at_primitive h_int a hb‚ÇÅ hb‚ÇÇ (hŒº b‚ÇÄ)
end

end interval

variables (ŒΩ : measure ‚Ñù)

local notation `I` := interval_oc

variables {E : Type*} [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]
  {H : Type*} [normed_group H] [normed_space ‚Ñù H]
  [second_countable_topology $ H ‚ÜíL[‚Ñù] E]
  [borel_space $ H ‚ÜíL[‚Ñù] E]

lemma has_fderiv_at_of_dominated_of_fderiv_le'' {F : H ‚Üí ‚Ñù ‚Üí E} {F' : H ‚Üí ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {a b : ‚Ñù}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) $ ŒΩ.restrict (Œô a b))
  (hF_int : interval_integrable (F x‚ÇÄ) ŒΩ a b)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) $ ŒΩ.restrict (Œô a b))
  (h_bound : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà I a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound ŒΩ a b)
  (h_diff : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà I a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_fderiv_at (Œª x, F x t) (F' x t) x) :
  has_fderiv_at (Œª x, ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' x‚ÇÄ t ‚àÇŒΩ) x‚ÇÄ :=
begin
  erw ae_interval_oc_iff' at h_diff h_bound,
  simp_rw [ae_measurable_interval_oc_iff, eventually_and] at hF_meas hF'_meas,
  exact (has_fderiv_at_of_dominated_of_fderiv_le Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1 h_bound.1
         bound_integrable.1 h_diff.1).sub
        (has_fderiv_at_of_dominated_of_fderiv_le Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2 h_bound.2
         bound_integrable.2 h_diff.2)
end
