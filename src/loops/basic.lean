import analysis.normed_space.finite_dimension
import analysis.calculus.times_cont_diff
import measure_theory.integral.set_integral
import measure_theory.measure.lebesgue
import topology.algebra.floor_ring
import topology.path_connected
import linear_algebra.affine_space.independent
import to_mathlib.topology.misc

/-!
# Basic definitions and properties of loops
-/

open set function finite_dimensional int (hiding range)
open_locale big_operators topological_space topological_space unit_interval
noncomputable theory

def nhds_set {Œ± : Type*} [topological_space Œ±] (s : set Œ±) : filter Œ± :=
Sup (nhds '' s)

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          {F : Type*} [normed_group F] [normed_space ‚Ñù F] [finite_dimensional ‚Ñù F]
          {F' : Type*} [normed_group F'] [normed_space ‚Ñù F'] [finite_dimensional ‚Ñù F']

local notation `d` := finrank ‚Ñù F

local notation `smooth_on` := times_cont_diff_on ‚Ñù ‚ä§

def smooth_at (f : E ‚Üí F) (x : E) : Prop := ‚àÉ s ‚àà ùìù x, smooth_on f s

section surrounding_points

-- def:surrounds_points
structure surrounding_pts (f : F) (p : fin (d + 1) ‚Üí F) (w : fin (d + 1) ‚Üí ‚Ñù) : Prop :=
(indep : affine_independent ‚Ñù p)
(w_pos : ‚àÄ i, 0 < w i)
(w_sum : ‚àë i, w i = 1)
(avg : ‚àë i, (w i) ‚Ä¢ (p i) = f)


def surrounded (f : F) (s : set F) : Prop :=
‚àÉ p w, surrounding_pts f p w ‚àß ‚àÄ i, p i ‚àà s

-- lem:int_cvx alternative formulation, compare int_cvx.lean
lemma surrounded_of_convex_hull {f : F} {s : set F} (hs : is_open s) (hsf : f ‚àà convex_hull ‚Ñù s) :
  surrounded f s :=
sorry

-- lem:smooth_convex_hull
lemma smooth_surrounding {x : F} {p w} (h : surrounding_pts x p w) :
  ‚àÉ W : F ‚Üí (fin (d+1) ‚Üí F) ‚Üí (fin (d+1) ‚Üí ‚Ñù),
  ‚àÄ·∂† y in ùìù x, ‚àÄ·∂† q in  ùìù p, smooth_at (uncurry W) (y, q) ‚àß
                              ‚àÄ i, W y q i ‚àà Ioo (0 : ‚Ñù) 1 ‚àß
                              ‚àë i, W y q i ‚Ä¢ q i = y :=
sorry

end surrounding_points

namespace unit_interval

lemma nonneg' {t : I} : 0 ‚â§ t := t.prop.1
lemma le_one' {t : I} : t ‚â§ 1 := t.prop.2
lemma coe_eq_zero {x : I} : (x : ‚Ñù) = 0 ‚Üî x = 0 :=
by { symmetry, exact subtype.ext_iff }

end unit_interval

namespace path

/-- A loop evaluated at `t / t` is equal to its endpoint. Note that `t / t = 0` for `t = 0`. -/
@[simp] lemma extend_div_self {x : F} (Œ≥ : path x x) (t : ‚Ñù) : Œ≥.extend (t / t) = x :=
by by_cases h : t = 0; simp [h]

/-- Concatenation of two loops which moves through the first loop on `[0, t‚ÇÄ]` and
through the second one on `[t‚ÇÄ, 1]`. All endpoints are assumed to be the same so that this
function is also well-defined for `t‚ÇÄ ‚àà {0, 1}`. -/
@[trans] def trans' {x : F} (Œ≥ Œ≥' : path x x) (t‚ÇÄ : I) : path x x :=
{ to_fun := Œª t, if t ‚â§ t‚ÇÄ then Œ≥.extend (t / t‚ÇÄ) else Œ≥'.extend ((t - t‚ÇÄ) / (1 - t‚ÇÄ)),
  continuous_to_fun :=
  begin
    refine continuous.if_le _ _ continuous_id continuous_const (by simp only [extend_div_self,
      unit_interval.mk_zero, zero_le_one, id.def, zero_div, forall_eq, extend_extends, path.source,
      left_mem_Icc, sub_self]),
    -- TODO: the following are provable by `continuity` but it is too slow
    exacts [Œ≥.continuous_extend.comp continuous_subtype_coe.div_const,
      Œ≥'.continuous_extend.comp (continuous_subtype_coe.sub continuous_const).div_const]
  end,
  source' := by simp only [unit_interval.nonneg', unit_interval.coe_zero,
    unit_interval.mk_zero, zero_le_one,
    if_true, zero_div, comp_app, extend_extends, path.source, left_mem_Icc],
  target' := by simp only [unit_interval.le_one'.le_iff_eq.trans eq_comm, extend_div_self,
    unit_interval.coe_one, implies_true_iff, eq_self_iff_true, comp_app, ite_eq_right_iff]
    {contextual := tt}}

@[simp] lemma trans'_zero {x : F} (Œ≥ Œ≥' : path x x) : Œ≥.trans' Œ≥' 0 = Œ≥' :=
by { ext t, simp only [trans', path.coe_mk, if_pos, unit_interval.coe_zero,
  div_one, extend_extends',
  unit_interval.nonneg'.le_iff_eq, sub_zero, div_zero, extend_zero, ite_eq_right_iff,
  show (t : ‚Ñù) = 0 ‚Üî t = 0, from (@subtype.ext_iff _ _ t 0).symm, path.source, eq_self_iff_true,
  implies_true_iff] {contextual := tt} }

@[simp] lemma trans'_one {x : F} (Œ≥ Œ≥' : path x x) : Œ≥.trans' Œ≥' 1 = Œ≥ :=
by { ext t, simp only [trans', unit_interval.le_one', path.coe_mk, if_pos, div_one,
  extend_extends', unit_interval.coe_one] }

@[simp] lemma trans'_self {x : F} (Œ≥ Œ≥' : path x x) (t‚ÇÄ : I) : Œ≥.trans' Œ≥' t‚ÇÄ t‚ÇÄ = x :=
by { simp only [trans', path.coe_mk, extend_div_self, if_pos, le_rfl], }

lemma _root_.continuous.trans' {x : F} (Œ≥ Œ≥' : I ‚Üí path x x)
  (hŒ≥ : continuous ‚ÜøŒ≥)
  (hŒ≥' : continuous ‚ÜøŒ≥')
  (hŒ≥0 : tendsto_uniformly (Œª t, Œ≥ t) (Œª _, Œ≥ 0 0) (ùìù (0 : I)))
  (hŒ≥'1 : tendsto_uniformly (Œª t, Œ≥' t) (Œª _, Œ≥' 1 0) (ùìù (1 : I))) :
  continuous ‚Üø(Œª t s, trans' (Œ≥ t) (Œ≥' t) t s) :=
begin
  have : filter.tendsto ‚ÜøŒ≥ ((ùìù (0 : I)).prod ‚ä§) (ùìù (Œ≥ 0 0)),
  { rwa [‚Üê tendsto_prod_top_iff] at hŒ≥0 },
  refine continuous.if_le _ _ continuous_snd continuous_fst _,
  { rw [continuous_iff_continuous_at],
    rintro ‚ü®t, s‚ü©,
    apply continuous_at.comp_div_zero (Œª (t : I) s, (Œ≥ t).extend s) 0
      continuous_at_fst (continuous_at_subtype_coe.comp continuous_at_snd)
      (continuous_at_subtype_coe.comp continuous_at_fst) _ _ _,
    { intro h, refine continuous_at.extend hŒ≥.continuous_at continuous_at_fst continuous_at_snd },
    { dsimp, sorry },
    { intros p hp, exact subtype.ext hp } },
  { sorry },
  { rintro x h, rw [h, sub_self, zero_div, extend_div_self, extend_zero] },
end

end path

set_option old_structure_cmd true

variables (E F)

structure loop :=
(to_fun : ‚Ñù ‚Üí F)
(per' : ‚àÄ t, to_fun (t + 1) = to_fun t)

instance : has_coe_to_fun (loop F) := ‚ü®_, Œª Œ≥, Œ≥.to_fun‚ü©

initialize_simps_projections loop (to_fun ‚Üí apply)

/-- Any function `œÜ : Œ± ‚Üí loop F` can be seen as a function `Œ± √ó ‚Ñù ‚Üí F`. -/
instance has_uncurry_loop {Œ± : Type*} : has_uncurry (Œ± ‚Üí loop F) (Œ± √ó ‚Ñù) F := ‚ü®Œª œÜ p, œÜ p.1 p.2‚ü©

variables {E F}

@[simps]
def const_loop (f : F) : loop F :=
‚ü®Œª t, f, by simp‚ü©

namespace loop

@[ext] protected lemma ext : ‚àÄ {Œ≥‚ÇÅ Œ≥‚ÇÇ : loop F}, (Œ≥‚ÇÅ : ‚Ñù ‚Üí F) = Œ≥‚ÇÇ ‚Üí Œ≥‚ÇÅ = Œ≥‚ÇÇ
| ‚ü®x, h1‚ü© ‚ü®.(x), h2‚ü© rfl := rfl

/-- Periodicity of loops restated in terms of the function coercion. -/
lemma per (Œ≥ : loop F) : ‚àÄ t, Œ≥ (t + 1) = Œ≥ t :=
loop.per' Œ≥

protected lemma one (Œ≥ : loop F) : Œ≥ 1 = Œ≥ 0 :=
by { convert Œ≥.per 0, rw [zero_add] }

/-- Transforming a loop by applying function `f`. -/
@[simps]
def transform (Œ≥ : loop F) (f : F ‚Üí F') : loop F' :=
‚ü®Œª t, f (Œ≥ t), Œª t, by rw Œ≥.per‚ü©

/-- Shifting a loop, or equivalently, adding a constant value to a loop -/
@[simps]
def shift (Œ≥ : loop F) (x : F) : loop F := Œ≥.transform (+ x)

/-- The average value of a loop. -/
noncomputable
def average [measurable_space F] [borel_space F] (Œ≥ : loop F) : F := ‚à´ x in Icc 0 1, (Œ≥ x)

def support {X : Type*} [topological_space X] [measurable_space F] [borel_space F] (Œ≥ : X ‚Üí loop F) : set X :=
closure {x | Œ≥ x ‚â† const_loop (Œ≥ x).average}

lemma const_of_not_mem_support {X : Type*} [topological_space X] [measurable_space F] [borel_space F] {Œ≥ : X ‚Üí loop F} {x : X}
  (hx : x ‚àâ support Œ≥) : Œ≥ x = const_loop (Œ≥ x).average :=
begin
  classical,
  by_contradiction H,
  apply hx,
  apply subset_closure,
  exact H
end

lemma continuous_of_family {Œ± : Type*} [topological_space Œ±] {Œ≥ : Œ± ‚Üí loop F} (h : continuous ‚ÜøŒ≥) :
  ‚àÄ a, continuous (Œ≥ a) :=
begin
  intro a,
  rw show (Œ≥ a : ‚Ñù ‚Üí F) = ‚ÜøŒ≥ ‚àò (Œª t, (a, t)), from rfl,
  exact h.comp (continuous_const.prod_mk continuous_id')
end

lemma continuous_of_family_step {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]
  {Œ≥ : Œ± ‚Üí Œ≤ ‚Üí loop F} (h : continuous ‚ÜøŒ≥) : ‚àÄ a, continuous ‚Üø(Œ≥ a) :=
begin
  intro a,
  rw show ‚Üø(Œ≥ a : Œ≤ ‚Üí loop F) = ‚ÜøŒ≥ ‚àò (Œª t, (a, t)), from rfl,
  exact h.comp (continuous_const.prod_mk continuous_id')
end

lemma add_nat_eq (Œ≥ : loop F) (t : ‚Ñù) : ‚àÄ (n : ‚Ñï), Œ≥ (t+n) = Œ≥ t
| 0 := (add_zero t).symm ‚ñ∏ rfl
| (nat.succ n) := by rw [‚Üê add_nat_eq n, nat.cast_succ, ‚Üê add_assoc, Œ≥.per]

lemma add_int_eq (Œ≥ : loop F) (t : ‚Ñù) (n : ‚Ñ§) : Œ≥ (t+n) = Œ≥ t :=
begin
  induction n using int.induction_on with n hn n hn,
  { norm_cast, rw add_zero },
  { rw [‚Üê hn, int.cast_add, ‚Üê add_assoc, int.cast_one, Œ≥.per] },
  { rw [‚Üê hn, int.cast_sub, add_sub, int.cast_one, ‚Üê Œ≥.per, sub_add_cancel] }
end

lemma fract_eq (Œ≥ : loop F) : ‚àÄ t, Œ≥ (fract t) = Œ≥ t :=
begin
  intro t,
  unfold fract,
  rw [sub_eq_add_neg, ‚Üê int.cast_neg],
  exact Œ≥.add_int_eq _ _
end

lemma comp_fract_eq (Œ≥ : loop F) : Œ≥ ‚àò fract = Œ≥ :=
funext Œ≥.fract_eq

lemma range_eq_image (Œ≥ : loop F) : range Œ≥ = Œ≥ '' I :=
begin
  apply eq_of_subset_of_subset,
  { rw range_subset_iff,
    exact Œª y, ‚ü®fract y, ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©, Œ≥.fract_eq _‚ü© },
  { rintros y ‚ü®x, hx, hxy‚ü©,
    exact ‚ü®x, hxy‚ü© },
end

@[simps]
noncomputable
def of_path {x : F} (Œ≥ : path x x) : loop F :=
{ to_fun := Œª t, Œ≥.extend (fract t),
  per' :=
  begin
    intros t,
    congr' 1,
    rw fract_eq_fract,
    use 1,
    norm_num
  end }

lemma of_path_range {x : F} (Œ≥ : path x x) : range (of_path Œ≥) = range Œ≥ :=
begin
  rw loop.range_eq_image,
  unfold_coes,
  simp only [of_path, image_eq_range],
  congr,
  ext t,
  by_cases ht1 : t.val = 1,
  { have : t = ‚ü®1, right_mem_Icc.mpr zero_le_one‚ü© := subtype.ext_val ht1,
    rw this,
    norm_cast,
    simp only [fract, floor_one, path.extend_zero, int.cast_one, sub_self, subtype.coe_mk],
    exact Œ≥.target.symm },
  { change (t : ‚Ñù) ‚â† 1 at ht1,
    have : fract ‚Üët = t.val,
    { rw fract_eq_iff,
      exact ‚ü®t.2.1, lt_of_le_of_ne t.2.2 ht1, ‚ü®0, sub_self _‚ü©‚ü© },
    simp only [this, Œ≥.extend_extends t.2],
    congr',
    rw subtype.ext_iff_val }
end

lemma of_path_continuous {x : F} (Œ≥ : path x x) : continuous (of_path Œ≥) :=
begin
  simp only [has_coe_to_fun.coe, coe_fn, of_path],
  apply Œ≥.continuous_extend.continuous_on.comp_fract,
  rw [Œ≥.extend_zero, Œ≥.extend_one]
end

lemma of_path_continuous_family {Œπ : Type*} [topological_space Œπ] {x : F} (Œ≥ : Œπ ‚Üí path x x)
  (h : continuous ‚ÜøŒ≥) : continuous ‚Üø(Œª s, of_path $ Œ≥ s) :=
begin
  change continuous (Œª p : Œπ √ó ‚Ñù, (Œª s, (Œ≥ s).extend) p.1 (fract p.2)),
  apply continuous_on.comp_fract',
  { exact (h.comp (continuous_id.prod_map continuous_proj_Icc)).continuous_on },
  { simp }
end

noncomputable
def round_trip {x y : F} (Œ≥ : path x y) : loop F :=
of_path (Œ≥.trans Œ≥.symm)

lemma round_trip_range {x y : F} {Œ≥ : path x y} : range (round_trip Œ≥) = range Œ≥ :=
by simp [round_trip, of_path_range, path.trans_range, path.symm_range]

lemma round_trip_based_at {x y : F} {Œ≥ : path x y} : round_trip Œ≥ 0 = x :=
begin
  unfold_coes,
  rw [round_trip, of_path],
  simp [fract_zero]
end

lemma round_trip_continuous {x y : F} (Œ≥ : path x y) : continuous (round_trip Œ≥) :=
of_path_continuous _

noncomputable
def round_trip_family {x y : F} (Œ≥ : path x y) : ‚Ñù ‚Üí loop F :=
have key : ‚àÄ {t}, x = Œ≥.extend (min 0 t) := Œª t, (Œ≥.extend_of_le_zero $ min_le_left _ _).symm,
Œª t, round_trip ((Œ≥.truncate 0 t).cast key rfl)

lemma round_trip_family_continuous {x y : F} {Œ≥ : path x y} : continuous ‚Üø(round_trip_family Œ≥) :=
of_path_continuous_family _
  (path.trans_continuous_family _ (Œ≥.truncate_const_continuous_family 0) _ $
    path.symm_continuous_family _ $ Œ≥.truncate_const_continuous_family 0)

lemma round_trip_family_based_at {x y : F} {Œ≥ : path x y} : ‚àÄ t, (round_trip_family Œ≥) t 0 = x :=
Œª t, round_trip_based_at

lemma round_trip_family_zero {x y : F} {Œ≥ : path x y} : (round_trip_family Œ≥) 0 = of_path (path.refl x) :=
begin
  simp only [round_trip_family, round_trip, path.truncate_zero_zero, of_path],
  ext z,
  congr,
  ext t,
  simp [path.refl_symm]
end

lemma round_trip_family_one {x y : F} {Œ≥ : path x y} : (round_trip_family Œ≥) 1 = round_trip Œ≥ :=
begin
  simp only [round_trip_family, round_trip, path.truncate_zero_one, of_path],
  refl
end

end loop
