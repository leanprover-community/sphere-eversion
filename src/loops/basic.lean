import analysis.normed_space.finite_dimension
import analysis.calculus.times_cont_diff
import measure_theory.set_integral
import to_mathlib

import has_uncurry

/-!
# Basic definitions and properties of loops
-/

open set function finite_dimensional
open_locale big_operators topological_space

def nhds_set {Œ± : Type*} [topological_space Œ±] (s : set Œ±) : filter Œ± :=
Sup (nhds '' s)

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          {F : Type*} [normed_group F] [normed_space ‚Ñù F] [finite_dimensional ‚Ñù F]

local notation `d` := findim ‚Ñù F

local notation `smooth_on` := times_cont_diff_on ‚Ñù ‚ä§

def smooth_at (f : E ‚Üí F) (x : E) : Prop := ‚àÉ s ‚àà ùìù x, smooth_on f s

section surrounding_points

def affinely_independent {n : ‚Ñï} (p : fin n ‚Üí F) : Prop :=
sorry

-- def:surrounds_points
structure surrounding_pts (f : F) (p : fin (d + 1) ‚Üí F) (w : fin (d + 1) ‚Üí ‚Ñù) : Prop :=
(indep : affinely_independent p)
(w_pos : ‚àÄ i, 0 < w i)
(w_sum : ‚àë i, w i = 1)
(avg : ‚àë i, (w i) ‚Ä¢ (p i) = f)


def surrounded (f : F) (s : set F) : Prop :=
‚àÉ p w, surrounding_pts f p w ‚àß ‚àÄ i, p i ‚àà s

-- lem:int_cvx alternative formulation, compare int_cvx.lean
lemma surrounded_of_convex_hull {f : F} {s : set F} (hs : is_open s) (hsf : f ‚àà convex_hull s) : surrounded f s :=
sorry

-- lem:smooth_convex_hull
lemma smooth_surrounding {x : F} {p w} (h : surrounding_pts x p w) : 
  ‚àÉ w : F ‚Üí (fin (d+1) ‚Üí F) ‚Üí (fin (d+1) ‚Üí ‚Ñù),
  ‚àÄ·∂† y in ùìù x, ‚àÄ·∂† q in  ùìù p, smooth_at (uncurry w) (y, q) ‚àß 
                              ‚àÄ i, w y q i ‚àà Ioo (0 : ‚Ñù) 1 ‚àß 
                              ‚àë i, w y q i ‚Ä¢ q i = y :=
sorry

end surrounding_points

set_option old_structure_cmd true

variables (E F)

structure loop :=
(to_fun : ‚Ñù ‚Üí F)
(per' : ‚àÄ t, to_fun (t + 1) = to_fun t)

instance : has_coe_to_fun (loop F) := ‚ü®_, Œª Œ≥, Œ≥.to_fun‚ü©

/-- Any function `œÜ : Œ± ‚Üí loop F` can be seen as a function `Œ± √ó ‚Ñù ‚Üí F`. -/
instance has_uncurry_loop {Œ± : Type*} : has_uncurry (Œ± ‚Üí loop F) (Œ± √ó ‚Ñù) F := ‚ü®Œª œÜ p, œÜ p.1 p.2‚ü©

variables {E F}

namespace loop

/-- Periodicity of loops restated in terms of the function coercion. -/
lemma per (Œ≥ : loop F) : ‚àÄ t, Œ≥ (t + 1) = Œ≥ t :=
loop.per' Œ≥

/-- The average value of a loop. -/
noncomputable
def average [measurable_space F] [borel_space F] (Œ≥ : loop F) : F := ‚à´ x in Icc 0 1, (Œ≥ x)

#check fract_nonneg

noncomputable
def of_path {x : F} (Œ≥ : path x x) : loop F :=
{ to_fun := Œª t, Œ≥.extend (fract t),
  per' := 
  begin
    intros t,
    congr' 1,
    rw fract_eq_fract,
    use 1,
    norm_num
  end }

#check subtype.ext_iff

lemma of_path_range {x : F} (Œ≥ : path x x) : range (of_path Œ≥) = range Œ≥ :=
begin
  apply eq_of_subset_of_subset; rw range_subset_iff,
  { intro t,
    rw ‚Üê Œ≥.extend_range,
    exact ‚ü®fract t, rfl‚ü© },
  { rintro t,
    by_cases ht1 : t = 1,
    { rw [ht1, of_path],
      use 0,
      unfold_coes,
      simp [path.target'], },
    { use t,
      rw subtype.ext_iff at ht1,
      change (t : ‚Ñù) ‚â† 1 at ht1,
      have : fract t.val = t.val,
      { rw fract_eq_iff,
        exact ‚ü®t.2.1, lt_of_le_of_ne t.2.2 ht1, ‚ü®0, sub_self _‚ü©‚ü© },
      rw of_path,
      unfold_coes,
      simp only [this, Œ≥.extend_extends t.2],
      congr',
      rw subtype.ext_iff_val } }
end 

end loop
