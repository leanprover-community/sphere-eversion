import notations
import loops.surrounding
import analysis.calculus.specific_functions
import measure_theory.integral.periodic
import to_mathlib.order.hom.basic

/-!
#¬†The reparametrization lemma
-/

noncomputable theory

open set function measure_theory interval_integral
open_locale topological_space unit_interval

variables {E F : Type*}
variables [normed_group E] [normed_space ‚Ñù E]
variables [normed_group F] [normed_space ‚Ñù F]
variables [measurable_space F] [borel_space F] [finite_dimensional ‚Ñù F]

structure smooth_surrounding_family (g : E ‚Üí F) :=
(to_fun : E ‚Üí loop F)
(smooth : ùíû ‚àû ‚Üøto_fun)
(surrounds : ‚àÄ x, (to_fun x).surrounds $ g x)

namespace smooth_surrounding_family

variables {g : E ‚Üí F} (Œ≥ : smooth_surrounding_family g) (x : E)

instance : has_coe_to_fun (smooth_surrounding_family g) (Œª _, E ‚Üí loop F) := ‚ü®to_fun‚ü©

protected lemma continuous : continuous (Œ≥ x) :=
begin
  apply continuous_uncurry_left x,
  exact Œ≥.smooth.continuous,
end

include Œ≥
/-- This the key construction. It represents a smooth probability distribution on the circle with
the property that:
`‚à´ s in 0..1, (Œ≥.centering_density x s) ‚Ä¢ (Œ≥ x s) = g x`
(see `centering_density_average` below).

The above property, which is global in `x`, is obtained from the corresponding local property via
a standard partition of unity argument. The local property is obtained by combining smoothness
of barycentric coordinates with the fact that `g x` lies in the _interior_ of a convex hull.

The _pointwise_ statement is at least intuitive: for a given `x : E`, since `Œ≥.to_fun x` surrounds
`g x`, there are real numbers `t‚ÇÅ,` ..., `t‚Çô` such that `g x` is in the interior of the convex hull
of `Œ≥.to_fun x t·µ¢`, which are an affine basis. One defines `centering_density` so that
`centering_density x t` has almost all of its mass concentrated at the values `t = t·µ¢` with each
value getting a share of the total mass proportional to the barycentric coordinate of `g x`. -/
def centering_density : E ‚Üí ‚Ñù ‚Üí ‚Ñù :=
sorry
omit Œ≥

@[simp] lemma centering_density_pos (t : ‚Ñù) :
  0 < Œ≥.centering_density x t :=
sorry

lemma centering_density_periodic :
  periodic (Œ≥.centering_density x) 1 :=
sorry

lemma centering_density_smooth :
  ùíû ‚àû ‚ÜøŒ≥.centering_density :=
sorry

@[simp] lemma centering_density_integral_eq_one :
  ‚à´ s in 0..1, Œ≥.centering_density x s = 1 :=
sorry

@[simp] lemma centering_density_average :
  ‚à´ s in 0..1, (Œ≥.centering_density x s) ‚Ä¢ (Œ≥ x s) = g x :=
sorry

lemma centering_density_continuous :
  continuous (Œ≥.centering_density x) :=
begin
  apply continuous_uncurry_left x,
  exact Œ≥.centering_density_smooth.continuous,
end

lemma centering_density_interval_integrable (t‚ÇÅ t‚ÇÇ : ‚Ñù) :
  interval_integrable (Œ≥.centering_density x) measure_space.volume t‚ÇÅ t‚ÇÇ :=
(Œ≥.centering_density_continuous x).interval_integrable t‚ÇÅ t‚ÇÇ

@[simp] lemma integral_add_one_centering_density (t : ‚Ñù) :
  ‚à´ s in 0..t+1, Œ≥.centering_density x s = (‚à´ s in 0..t, Œ≥.centering_density x s) + 1 :=
begin
  have h‚ÇÅ := Œ≥.centering_density_interval_integrable x 0 t,
  have h‚ÇÇ := Œ≥.centering_density_interval_integrable x t (t + 1),
  simp [‚Üê integral_add_adjacent_intervals h‚ÇÅ h‚ÇÇ,
    (Œ≥.centering_density_periodic x).interval_integral_add_eq t 0],
end

lemma strict_mono_integral_centering_density :
  strict_mono $ Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s :=
begin
  intros t‚ÇÅ t‚ÇÇ ht‚ÇÅ‚ÇÇ,
  have h := Œ≥.centering_density_interval_integrable x,
  rw [‚Üê sub_pos, integral_interval_sub_left (h 0 t‚ÇÇ) (h 0 t‚ÇÅ)],
  have hK : is_compact (Icc t‚ÇÅ t‚ÇÇ) := is_compact_Icc,
  have hK' : (Icc t‚ÇÅ t‚ÇÇ).nonempty := nonempty_Icc.mpr ht‚ÇÅ‚ÇÇ.le,
  obtain ‚ü®u, hu‚ÇÅ, hu‚ÇÇ‚ü© := hK.exists_forall_le hK' (Œ≥.centering_density_continuous x).continuous_on,
  refine lt_of_lt_of_le _ (integral_mono_on ht‚ÇÅ‚ÇÇ.le interval_integrable_const (h t‚ÇÅ t‚ÇÇ) hu‚ÇÇ),
  simp [ht‚ÇÅ‚ÇÇ],
end

lemma surjective_integral_centering_density :
  surjective $ Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s :=
begin
  have : continuous (Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s),
  { exact continuous_primitive (Œ≥.centering_density_interval_integrable x) 0, },
  apply this.surjective,
  { exact (Œ≥.centering_density_periodic x).tendsto_at_top_interval_integral_of_pos'
      (Œ≥.centering_density_interval_integrable x) (Œ≥.centering_density_pos x) one_pos, },
  { exact (Œ≥.centering_density_periodic x).tendsto_at_bot_interval_integral_of_pos'
      (Œ≥.centering_density_interval_integrable x) (Œ≥.centering_density_pos x) one_pos, },
end

def reparametrize : E ‚Üí equivariant_equiv := Œª x,
({ to_fun := Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s,
  inv_fun := (strict_mono.order_iso_of_surjective _
    (Œ≥.strict_mono_integral_centering_density x)
    (Œ≥.surjective_integral_centering_density x)).symm,
  left_inv := strict_mono.order_iso_of_surjective_symm_apply_self _ _ _,
  right_inv := Œª t, strict_mono.order_iso_of_surjective_self_symm_apply _ _ _ t,
  map_zero' := integral_same,
  eqv' := Œ≥.integral_add_one_centering_density x, } : equivariant_equiv).symm

lemma coe_reparametrize_symm :
  ((Œ≥.reparametrize x).symm : ‚Ñù ‚Üí ‚Ñù) = Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s :=
rfl

lemma reparametrize_symm_apply (t : ‚Ñù) :
  (Œ≥.reparametrize x).symm t = ‚à´ s in 0..t, Œ≥.centering_density x s :=
rfl

@[simp] lemma integral_reparametrize (t : ‚Ñù) :
  ‚à´ s in 0..(Œ≥.reparametrize x t), Œ≥.centering_density x s = t :=
by simp [‚Üê reparametrize_symm_apply]

lemma has_deriv_at_reparametrize_symm (s : ‚Ñù) :
  has_deriv_at (Œ≥.reparametrize x).symm (Œ≥.centering_density x s) s :=
integral_has_deriv_at_right
  (Œ≥.centering_density_interval_integrable x 0 s)
  ((Œ≥.centering_density_continuous x).measurable_at_filter _ _)
  (Œ≥.centering_density_continuous x).continuous_at

lemma reparametrize_smooth :
  -- ùíû ‚àû ‚ÜøŒ≥.reparametrize :=
  ùíû ‚àû $ uncurry (Œª x t, Œ≥.reparametrize x t) :=
sorry

@[simp] lemma reparametrize_average :
  ((Œ≥ x).reparam $ (Œ≥.reparametrize x).equivariant_map).average = g x :=
begin
  change ‚à´ (s : ‚Ñù) in 0..1, Œ≥ x (Œ≥.reparametrize x s) = g x,
  have h‚ÇÅ : ‚àÄ s,
    s ‚àà interval 0 (1 : ‚Ñù) ‚Üí has_deriv_at (Œ≥.reparametrize x).symm (Œ≥.centering_density x s) s :=
    Œª s hs, Œ≥.has_deriv_at_reparametrize_symm x s,
  have h‚ÇÇ : continuous_on (Œª s, Œ≥.centering_density x s) (interval 0 1) :=
    (Œ≥.centering_density_continuous x).continuous_on,
  have h‚ÇÉ : continuous (Œª s, Œ≥ x (Œ≥.reparametrize x s)) :=
    (Œ≥.continuous x).comp (continuous_uncurry_left x Œ≥.reparametrize_smooth.continuous),
  rw [‚Üê (Œ≥.reparametrize x).symm.map_zero, ‚Üê (Œ≥.reparametrize x).symm.map_one,
    ‚Üê integral_comp_smul_deriv h‚ÇÅ h‚ÇÇ h‚ÇÉ],
  simp,
end

end smooth_surrounding_family
