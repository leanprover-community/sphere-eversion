import notations
import loops.surrounding
import loops.delta_mollifier
import analysis.calculus.specific_functions
import measure_theory.integral.periodic
import geometry.manifold.partition_of_unity
import to_mathlib.order.hom.basic
import to_mathlib.geometry.manifold.partition_of_unity

/-!
#¬†The reparametrization lemma
-/

noncomputable theory

open set function measure_theory interval_integral
open_locale topological_space unit_interval manifold big_operators

variables {E F : Type*}
variables [normed_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
variables [normed_group F] [normed_space ‚Ñù F] [finite_dimensional ‚Ñù F]
variables [measurable_space F] [borel_space F]

local notation `d` := finite_dimensional.finrank ‚Ñù F
local notation `Œπ` := fin (d + 1)

structure smooth_surrounding_family (g : E ‚Üí F) :=
(to_fun : E ‚Üí loop F)
(smooth : ùíû ‚àû ‚Üøto_fun)
(surrounds : ‚àÄ x, (to_fun x).surrounds $ g x)

namespace smooth_surrounding_family

variables {g : E ‚Üí F} (Œ≥ : smooth_surrounding_family g) (x y : E)

instance : has_coe_to_fun (smooth_surrounding_family g) (Œª _, E ‚Üí loop F) := ‚ü®to_fun‚ü©

protected lemma continuous : continuous (Œ≥ x) :=
begin
  apply continuous_uncurry_left x,
  exact Œ≥.smooth.continuous,
end

include Œ≥ x

def surrounding_parameters_at : Œπ ‚Üí ‚Ñù := classical.some (Œ≥.surrounds x)

def surrounding_points_at : Œπ ‚Üí F := Œ≥ x ‚àò Œ≥.surrounding_parameters_at x

def surrounding_weights_at : Œπ ‚Üí ‚Ñù := classical.some (classical.some_spec (Œ≥.surrounds x))

lemma surround_pts_points_weights_at :
  surrounding_pts (g x) (Œ≥.surrounding_points_at x) (Œ≥.surrounding_weights_at x) :=
classical.some_spec _

/-- Because `delta_mollifier Œ∑` approximates the Dirac delta function,
`Œ≥.approx_surrounding_points_at x x Œ∑` tends to `Œ≥.surrounding_points_at x` as `Œ∑` tends to `0`. -/
def approx_surrounding_points_at (Œ∑ : ‚Ñù) (i : Œπ) : F :=
‚à´ s in 0..1, delta_mollifier Œ∑ (Œ≥.surrounding_parameters_at x i) s ‚Ä¢ Œ≥ y s

/-- The key property from which it should be easy to construct `local_centering_density`,
`local_centering_density_nhd` etc below. -/
lemma eventually_surrounded_approx_surrounding_points_at : ‚àÄ·∂† (yt : E √ó ‚Ñù) in ùìù (x, 0),
  surrounded (g yt.1) (range $ Œ≥.approx_surrounding_points_at x yt.1 yt.2) :=
sorry

/- This is an auxiliary definition to help construct `centering_density` below.

Given `x : E`, it represents a smooth probability distribution on the circle with the property that:
`‚à´ s in 0..1, Œ≥.local_centering_density x y s ‚Ä¢ Œ≥ y s = g y`
for all `y` in a neighbourhood of `x` (see `local_centering_density_average` below).

This property is obtained by combining smoothness of barycentric coordinates with the fact that
`g x` lies in the _interior_ of a convex hull.

The intuition is that given `y : E` in a neighbourhood of `x`, since `Œ≥ y` surrounds `g y`, there
are real numbers `t‚ÇÅ`, ..., `t‚Çô` (depending on `y`) such that `g y` is in the interior of the convex
hull of `Œ≥ y t·µ¢`, which are an affine basis. One defines `local_centering_density x y`, for `y` in a
neighbourhood of `x`, so that `local_centering_density x y t` has almost all of its mass
concentrated at the values `t = t·µ¢` with each value getting a share of the total mass proportional
to the barycentric coordinate of `g y`. -/
def local_centering_density : E ‚Üí ‚Ñù ‚Üí ‚Ñù :=
sorry

def local_centering_density_nhd : set E :=
sorry
omit x

lemma local_centering_density_nhd_is_open :
  is_open $ Œ≥.local_centering_density_nhd x :=
sorry

lemma local_centering_density_nhd_self_mem :
  x ‚àà Œ≥.local_centering_density_nhd x :=
sorry

lemma local_centering_density_nhd_covers :
  univ ‚äÜ ‚ãÉ x, Œ≥.local_centering_density_nhd x :=
Œª x hx, mem_Union.mpr ‚ü®x, Œ≥.local_centering_density_nhd_self_mem x‚ü©

@[simp] lemma local_centering_density_pos (t : ‚Ñù) (hy : y ‚àà Œ≥.local_centering_density_nhd x) :
  0 < Œ≥.local_centering_density x y t :=
sorry

lemma local_centering_density_periodic (hy : y ‚àà Œ≥.local_centering_density_nhd x) :
  periodic (Œ≥.local_centering_density x y) 1 :=
sorry

lemma local_centering_density_smooth_on :
  cont_diff_on ‚Ñù ‚àû ‚Üø(Œ≥.local_centering_density x) $
    (Œ≥.local_centering_density_nhd x) √óÀ¢ (univ : set ‚Ñù) :=
sorry

lemma local_centering_density_continuous (hy : y ‚àà Œ≥.local_centering_density_nhd x) :
  continuous (Œª t, Œ≥.local_centering_density x y t) :=
begin
  refine continuous_iff_continuous_at.mpr (Œª t, _),
  have hyt : Œ≥.local_centering_density_nhd x √óÀ¢ univ ‚àà ùìù (y, t) :=
    mem_nhds_prod_iff'.mpr ‚ü®Œ≥.local_centering_density_nhd x, univ,
      Œ≥.local_centering_density_nhd_is_open x, hy, is_open_univ, mem_univ t, rfl.subset‚ü©,
  exact ((Œ≥.local_centering_density_smooth_on x).continuous_on.continuous_at hyt).comp
    (continuous.prod.mk y).continuous_at,
end

@[simp] lemma local_centering_density_integral_eq_one (hy : y ‚àà Œ≥.local_centering_density_nhd x) :
  ‚à´ s in 0..1, Œ≥.local_centering_density x y s = 1 :=
sorry

@[simp] lemma local_centering_density_average (hy : y ‚àà Œ≥.local_centering_density_nhd x) :
  ‚à´ s in 0..1, Œ≥.local_centering_density x y s ‚Ä¢ Œ≥ y s = g y :=
sorry

/-- This the key construction. It represents a smooth probability distribution on the circle with
the property that:
`‚à´ s in 0..1, Œ≥.centering_density x s ‚Ä¢ Œ≥ x s = g x`
for all `x : E` (see `centering_density_average` below).

It is constructed from `local_centering_density` using a partition of unity
(see `centering_density_eq_exists_pou` below). -/
def centering_density : E ‚Üí ‚Ñù ‚Üí ‚Ñù :=
begin
  choose p hp using
    @smooth_partition_of_unity.exists_is_subordinate _ _ _ _ _ _ _ ùìò(‚Ñù, E) _ _ _ _ _ _ _
    is_closed_univ (Œ≥.local_centering_density_nhd) (Œ≥.local_centering_density_nhd_is_open)
    Œ≥.local_centering_density_nhd_covers,
  exact Œª x t, ‚àë·∂† (y : E), (p y x) * Œ≥.local_centering_density y x t,
end
omit Œ≥

lemma centering_density_def :
  ‚àÉ (p : smooth_partition_of_unity E ùìò(‚Ñù, E) E)
    (hp : p.is_subordinate Œ≥.local_centering_density_nhd),
    ‚àÄ x t, Œ≥.centering_density x t = ‚àë·∂† y, (p y x) * Œ≥.local_centering_density y x t :=
let h := @smooth_partition_of_unity.exists_is_subordinate _ _ _ _ _ _ _ ùìò(‚Ñù, E) _ _ _ _ _ _ _
  is_closed_univ (Œ≥.local_centering_density_nhd) (Œ≥.local_centering_density_nhd_is_open)
  Œ≥.local_centering_density_nhd_covers in
‚ü®classical.some h, classical.some_spec h, Œª x y, rfl‚ü©

lemma centering_density_eq_exists_pou_nhd_finset_sum :
  ‚àÉ (p : smooth_partition_of_unity E ùìò(‚Ñù, E) E)
    (hp : p.is_subordinate Œ≥.local_centering_density_nhd),
    ‚àÄ (x : E), ‚àÉ (ys : finset E) {n : set E} (hn‚ÇÅ : n ‚àà ùìù x)
      (hn‚ÇÇ : n ‚äÜ ‚ãÇ y ‚àà ys, Œ≥.local_centering_density_nhd y),
      ‚àÄ (z ‚àà n) t, ‚àë y in ys, p y z = 1 ‚àß
      Œ≥.centering_density z t = ‚àë y in ys, p y z * Œ≥.local_centering_density y z t :=
begin
  obtain ‚ü®p, hp, hp'‚ü© := Œ≥.centering_density_def,
  refine ‚ü®p, hp, Œª x, _‚ü©,
  obtain ‚ü®ys, n, hn‚ÇÅ, hn‚ÇÇ, hn‚ÇÉ‚ü© := p.exists_finset_nhd hp x (Œ≥.local_centering_density_nhd_is_open),
  refine ‚ü®ys, n, hn‚ÇÅ, hn‚ÇÇ, Œª z hz t, ‚ü®_, _‚ü©‚ü©,
  { rw [‚Üê finsum_eq_sum_of_support_to_finset_subset' _ (hn‚ÇÉ z hz), p.sum_eq_one (mem_univ z)], },
  { rw hp',
    suffices : support (Œª y, p y z * Œ≥.local_centering_density y z t) ‚äÜ ys,
    { exact finsum_eq_sum_of_support_to_finset_subset' _ this, },
    refine subset.trans (Œª y hy, _) (hn‚ÇÉ z hz),
    rintros (contra : p y z = 0),
    simpa [contra] using hy, },
end

@[simp] lemma centering_density_pos (t : ‚Ñù) :
  0 < Œ≥.centering_density x t :=
begin
  obtain ‚ü®p, hp, hp'‚ü© := Œ≥.centering_density_eq_exists_pou_nhd_finset_sum,
  obtain ‚ü®ys, n, hn‚ÇÅ, hn‚ÇÇ, hn‚ÇÉ‚ü© := hp' x,
  obtain ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü© := hn‚ÇÉ x (mem_of_mem_nhds hn‚ÇÅ) t,
  rw hx‚ÇÇ,
  have hx‚ÇÄ : ‚àÄ y ‚àà ys, 0 ‚â§ p y x  := Œª y hy, p.nonneg y x,
  refine (convex_Ioi (0 : ‚Ñù)).sum_mem hx‚ÇÄ hx‚ÇÅ (Œª y hy, _),
  simp only [subset_Inter‚ÇÇ_iff] at hn‚ÇÇ,
  exact Œ≥.local_centering_density_pos y x t (hn‚ÇÇ y hy (mem_of_mem_nhds hn‚ÇÅ)),
end

lemma centering_density_periodic :
  periodic (Œ≥.centering_density x) 1 :=
begin
  obtain ‚ü®p, hp, hp'‚ü© := Œ≥.centering_density_def,
  have : ‚àÄ y t,
    p y x * Œ≥.local_centering_density y x (t + 1) = p y x * Œ≥.local_centering_density y x t,
  { intros,
    by_cases h : x ‚àà Œ≥.local_centering_density_nhd y,
    { rw Œ≥.local_centering_density_periodic y x h, },
    { suffices : x ‚àâ support (p y), { simp [nmem_support.mp this], },
      exact set.not_mem_subset (subset_tsupport _) (set.not_mem_subset (hp y) h), }, },
  intros t,
  simp_rw [hp', this],
end

lemma centering_density_smooth :
  -- ùíû ‚àû ‚ÜøŒ≥.centering_density :=
  ùíû ‚àû $ uncurry (Œª x t, Œ≥.centering_density x t) :=
begin
  rw cont_diff_iff_cont_diff_at,
  rintros ‚ü®x, t‚ü©,
  obtain ‚ü®p, hp, hp'‚ü© := Œ≥.centering_density_eq_exists_pou_nhd_finset_sum,
  obtain ‚ü®ys, n, hn‚ÇÅ, hn‚ÇÇ, hn‚ÇÉ‚ü© := hp' x,
  have hn‚ÇÑ : n √óÀ¢ (univ : set ‚Ñù) ‚àà ùìù (x, t) :=
    mem_nhds_prod_iff.mpr ‚ü®n, hn‚ÇÅ, univ, filter.univ_mem, rfl.subset‚ü©,
  refine cont_diff_within_at.cont_diff_at
    (cont_diff_on.cont_diff_within_at _ (mem_of_mem_nhds hn‚ÇÑ)) hn‚ÇÑ,
  let f : E √ó ‚Ñù ‚Üí ‚Ñù := Œª zt, ‚àë y in ys, p y zt.1 * Œ≥.local_centering_density y zt.1 zt.2,
  have hf : ‚àÄ zs ‚àà n √óÀ¢ (univ : set ‚Ñù), (uncurry Œ≥.centering_density) zs = f zs,
  { rintros ‚ü®z, s‚ü© hz,
    simp only [prod_mk_mem_set_prod_eq, mem_univ, and_true] at hz,
    simp [hn‚ÇÉ z hz s], },
  apply cont_diff_on.congr _ hf,
  refine cont_diff_on.sum (Œª y hy, cont_diff_on.mul (cont_diff.cont_diff_on _) _),
  { refine cont_diff.comp _ cont_diff_fst,
    rw ‚Üê cont_mdiff_iff_cont_diff,
    exact (p y).cont_mdiff },
  { suffices : n √óÀ¢ (univ : set ‚Ñù) ‚äÜ (Œ≥.local_centering_density_nhd y) √óÀ¢ (univ : set ‚Ñù),
    { exact (Œ≥.local_centering_density_smooth_on y).mono this, },
    simp only [subset_Inter‚ÇÇ_iff] at hn‚ÇÇ,
    exact prod_mono (hn‚ÇÇ y hy) rfl.subset, },
end

@[simp] lemma centering_density_integral_eq_one :
  ‚à´ s in 0..1, Œ≥.centering_density x s = 1 :=
begin
  obtain ‚ü®p, hp, hp'‚ü© := Œ≥.centering_density_def,
  have h_int : ‚àÄ y, interval_integrable
    (Œª t, p y x ‚Ä¢ Œ≥.local_centering_density y x t) volume 0 1,
  { intros y,
    by_cases hy : x ‚àà Œ≥.local_centering_density_nhd y,
    { refine continuous.interval_integrable (continuous.const_smul _ (p y x)) _ _,
      exact Œ≥.local_centering_density_continuous _ _ hy, },
    { suffices : x ‚àâ support (p y), { simp [nmem_support.mp this], },
      exact Œª contra, hy (hp _ (subset_tsupport _ contra)), }, },
  have h_supp : (support (Œª y t, p y x ‚Ä¢ Œ≥.local_centering_density y x t)).finite,
  { refine set.finite.subset (p.locally_finite.point_finite x) (Œª y hy, _),
    simp only [ne.def, mem_set_of_eq, mem_support],
    intros contra,
    simpa only [mem_support, contra, zero_smul, ne.def, pi.zero_def] using hy, },
  simp_rw [hp', ‚Üê smul_eq_mul, integral_finsum h_int h_supp, interval_integral.integral_smul],
  suffices : ‚àÄ y z, z ‚àà univ ‚à© Œ≥.local_centering_density_nhd y ‚Üí
    ‚à´ t in 0..1, Œ≥.local_centering_density y z t = 1,
  { let f := Œª y z, ‚à´ t in 0..1, Œ≥.local_centering_density y z t,
    exact p.finsum_smul_eq hp f 1 this (mem_univ x), },
  intros y z hyz,
  simp only [univ_inter] at hyz,
  exact Œ≥.local_centering_density_integral_eq_one y z hyz,
end

@[simp] lemma centering_density_average :
  ‚à´ s in 0..1, Œ≥.centering_density x s ‚Ä¢ Œ≥ x s = g x :=
begin
  obtain ‚ü®p, hp, hp'‚ü© := Œ≥.centering_density_def,
  have h_int : ‚àÄ y, interval_integrable
    (Œª t, p y x ‚Ä¢ Œ≥.local_centering_density y x t ‚Ä¢ Œ≥ x t) volume 0 1,
  { intros y,
    by_cases hy : x ‚àà Œ≥.local_centering_density_nhd y,
    { refine continuous.interval_integrable (continuous.const_smul _ (p y x)) _ _,
      refine continuous.smul _ (Œ≥.smooth.continuous.comp (continuous.prod.mk x)),
      exact Œ≥.local_centering_density_continuous _ _ hy, },
    { suffices : x ‚àâ support (p y), { simp [nmem_support.mp this], },
      exact Œª contra, hy (hp _ (subset_tsupport _ contra)), }, },
  have h_supp : (support (Œª y t, p y x ‚Ä¢ Œ≥.local_centering_density y x t ‚Ä¢ Œ≥ x t)).finite,
  { refine set.finite.subset (p.locally_finite.point_finite x) (Œª y hy, _),
    simp only [ne.def, mem_set_of_eq, mem_support],
    intros contra,
    simpa only [mem_support, contra, zero_smul, ne.def, pi.zero_def] using hy, },
  simp_rw [hp', finsum_smul, mul_smul, integral_finsum h_int h_supp,
    interval_integral.integral_smul],
  suffices : ‚àÄ (y x : E), x ‚àà univ ‚à© Œ≥.local_centering_density_nhd y ‚Üí
    ‚à´ s in 0..1, Œ≥.local_centering_density y x s ‚Ä¢ Œ≥ x s = g x,
  { exact p.finsum_smul_eq hp _ _ this (mem_univ x), },
  intros y x' hx',
  simp only [univ_inter] at hx',
  exact Œ≥.local_centering_density_average _ _ hx',
end

lemma centering_density_continuous :
  continuous (Œ≥.centering_density x) :=
begin
  apply continuous_uncurry_left x,
  exact Œ≥.centering_density_smooth.continuous,
end

lemma centering_density_interval_integrable (t‚ÇÅ t‚ÇÇ : ‚Ñù) :
  interval_integrable (Œ≥.centering_density x) volume t‚ÇÅ t‚ÇÇ :=
(Œ≥.centering_density_continuous x).interval_integrable t‚ÇÅ t‚ÇÇ

@[simp] lemma integral_add_one_centering_density (t : ‚Ñù) :
  ‚à´ s in 0..t+1, Œ≥.centering_density x s = (‚à´ s in 0..t, Œ≥.centering_density x s) + 1 :=
begin
  have h‚ÇÅ := Œ≥.centering_density_interval_integrable x 0 t,
  have h‚ÇÇ := Œ≥.centering_density_interval_integrable x t (t + 1),
  simp [‚Üê integral_add_adjacent_intervals h‚ÇÅ h‚ÇÇ,
    (Œ≥.centering_density_periodic x).interval_integral_add_eq t 0],
end

lemma strict_mono_integral_centering_density :
  strict_mono $ Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s :=
begin
  intros t‚ÇÅ t‚ÇÇ ht‚ÇÅ‚ÇÇ,
  have h := Œ≥.centering_density_interval_integrable x,
  rw [‚Üê sub_pos, integral_interval_sub_left (h 0 t‚ÇÇ) (h 0 t‚ÇÅ)],
  have hK : is_compact (Icc t‚ÇÅ t‚ÇÇ) := is_compact_Icc,
  have hK' : (Icc t‚ÇÅ t‚ÇÇ).nonempty := nonempty_Icc.mpr ht‚ÇÅ‚ÇÇ.le,
  obtain ‚ü®u, hu‚ÇÅ, hu‚ÇÇ‚ü© := hK.exists_forall_le hK' (Œ≥.centering_density_continuous x).continuous_on,
  refine lt_of_lt_of_le _ (integral_mono_on ht‚ÇÅ‚ÇÇ.le interval_integrable_const (h t‚ÇÅ t‚ÇÇ) hu‚ÇÇ),
  simp [ht‚ÇÅ‚ÇÇ],
end

lemma surjective_integral_centering_density :
  surjective $ Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s :=
begin
  have : continuous (Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s),
  { exact continuous_primitive (Œ≥.centering_density_interval_integrable x) 0, },
  apply this.surjective,
  { exact (Œ≥.centering_density_periodic x).tendsto_at_top_interval_integral_of_pos'
      (Œ≥.centering_density_interval_integrable x) (Œ≥.centering_density_pos x) one_pos, },
  { exact (Œ≥.centering_density_periodic x).tendsto_at_bot_interval_integral_of_pos'
      (Œ≥.centering_density_interval_integrable x) (Œ≥.centering_density_pos x) one_pos, },
end

def reparametrize : E ‚Üí equivariant_equiv := Œª x,
({ to_fun := Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s,
  inv_fun := (strict_mono.order_iso_of_surjective _
    (Œ≥.strict_mono_integral_centering_density x)
    (Œ≥.surjective_integral_centering_density x)).symm,
  left_inv := strict_mono.order_iso_of_surjective_symm_apply_self _ _ _,
  right_inv := Œª t, strict_mono.order_iso_of_surjective_self_symm_apply _ _ _ t,
  map_zero' := integral_same,
  eqv' := Œ≥.integral_add_one_centering_density x, } : equivariant_equiv).symm

lemma coe_reparametrize_symm :
  ((Œ≥.reparametrize x).symm : ‚Ñù ‚Üí ‚Ñù) = Œª t, ‚à´ s in 0..t, Œ≥.centering_density x s :=
rfl

lemma reparametrize_symm_apply (t : ‚Ñù) :
  (Œ≥.reparametrize x).symm t = ‚à´ s in 0..t, Œ≥.centering_density x s :=
rfl

@[simp] lemma integral_reparametrize (t : ‚Ñù) :
  ‚à´ s in 0..(Œ≥.reparametrize x t), Œ≥.centering_density x s = t :=
by simp [‚Üê reparametrize_symm_apply]

lemma has_deriv_at_reparametrize_symm (s : ‚Ñù) :
  has_deriv_at (Œ≥.reparametrize x).symm (Œ≥.centering_density x s) s :=
integral_has_deriv_at_right
  (Œ≥.centering_density_interval_integrable x 0 s)
  ((Œ≥.centering_density_continuous x).measurable_at_filter _ _)
  (Œ≥.centering_density_continuous x).continuous_at

lemma reparametrize_smooth :
  -- ùíû ‚àû ‚ÜøŒ≥.reparametrize :=
  ùíû ‚àû $ uncurry (Œª x t, Œ≥.reparametrize x t) :=
sorry

@[simp] lemma reparametrize_average :
  ((Œ≥ x).reparam $ (Œ≥.reparametrize x).equivariant_map).average = g x :=
begin
  change ‚à´ (s : ‚Ñù) in 0..1, Œ≥ x (Œ≥.reparametrize x s) = g x,
  have h‚ÇÅ : ‚àÄ s,
    s ‚àà interval 0 (1 : ‚Ñù) ‚Üí has_deriv_at (Œ≥.reparametrize x).symm (Œ≥.centering_density x s) s :=
    Œª s hs, Œ≥.has_deriv_at_reparametrize_symm x s,
  have h‚ÇÇ : continuous_on (Œª s, Œ≥.centering_density x s) (interval 0 1) :=
    (Œ≥.centering_density_continuous x).continuous_on,
  have h‚ÇÉ : continuous (Œª s, Œ≥ x (Œ≥.reparametrize x s)) :=
    (Œ≥.continuous x).comp (continuous_uncurry_left x Œ≥.reparametrize_smooth.continuous),
  rw [‚Üê (Œ≥.reparametrize x).symm.map_zero, ‚Üê (Œ≥.reparametrize x).symm.map_one,
    ‚Üê integral_comp_smul_deriv h‚ÇÅ h‚ÇÇ h‚ÇÉ],
  simp,
end

end smooth_surrounding_family
