import to_mathlib.data.set.prod
import to_mathlib.data.set.lattice
import to_mathlib.data.nat.basic
import to_mathlib.topology.constructions
import to_mathlib.topology.germ

import global.indexing
import loops.surrounding

open set filter metric prod topological_space
open_locale topology unit_interval

/-!
Notes by Patrick:

The goal of this file is to explore how to prove `exists_surrounding_loops` (or rather its version
with `C = U = univ` which is the only needed case) in a way that uncouples the general
topological argument from the things specific to loops. The general lemma is meant to
be something like `inductive_construction'` below.
-/


section inductive_construction
/-!
Notes by Patrick:

In this section, I took lemmas that used to exist when I worked on the inductive construction
refactor. In particular there is the lemma which can't quite be used to prove
`inductive_htpy_construction`, namely `inductive_construction`.

In that lemma, the covering is fixed. Lemma `inductive_construction'`, to be proven, is meant
to combine this with an argument using local existence and exhaustions.
-/

lemma index_type.tendsto_coe_at_top (N : ‚Ñï) : tendsto (coe : ‚Ñï ‚Üí index_type N) at_top at_top :=
tendsto_at_top_at_top.mpr
  (Œª i, ‚ü®indexing.to_nat i, Œª n hn,(indexing.from_to i) ‚ñ∏ indexing.coe_mono hn‚ü©)

lemma locally_finite.exists_forall_eventually_of_indexing
  {Œ± X Œπ : Type*} [topological_space X] [linear_order Œπ] [indexing Œπ] {f : ‚Ñï ‚Üí X ‚Üí Œ±}
  {V : Œπ ‚Üí set X} (hV : locally_finite V)
  (h : ‚àÄ n : ‚Ñï, ‚àÄ x ‚àâ V ((n + 1) : ‚Ñï), f (n + 1) x = f n x)
  (h' : ‚àÄ n : ‚Ñï, ((n+1 : ‚Ñï) : Œπ) = n ‚Üí f (n + 1) = f n) :
  ‚àÉ (F : X ‚Üí Œ±), ‚àÄ (x : X), ‚àÄ·∂† (n : ‚Ñï) in filter.at_top, f n =·∂†[ùìù x] F :=
begin
  let œÄ :  ‚Ñï ‚Üí Œπ := indexing.from_nat,
  choose U hUx hU using hV,
  choose i‚ÇÄ hi‚ÇÄ using Œª x, (hU x).bdd_above,
  let n‚ÇÄ : X ‚Üí ‚Ñï := indexing.to_nat ‚àò i‚ÇÄ,
  have key : ‚àÄ {x} {n}, n ‚â• n‚ÇÄ x ‚Üí ‚àÄ {y}, y ‚àà U x ‚Üí f n y = f (n‚ÇÄ x) y,
  { intros x n hn,
    rcases le_iff_exists_add.mp hn with ‚ü®k, rfl‚ü©, clear hn,
    intros y hy,
    induction k with k hk,
    { simp },
    { rw ‚Üê hk, clear hk,
      have : ‚àÄ n, œÄ n < œÄ (n+1) ‚à® œÄ n = œÄ (n+1),
      exact Œª n, lt_or_eq_of_le (indexing.mono_from n.le_succ),
      rcases this (n‚ÇÄ x + k) with H | H ; clear this,
      { have ineq : œÄ (n‚ÇÄ x + k + 1) > i‚ÇÄ x,
        { suffices : i‚ÇÄ x ‚â§ œÄ (n‚ÇÄ x + k), from lt_of_le_of_lt this H,
          rw ‚Üê indexing.from_to (i‚ÇÄ x),
          exact indexing.mono_from le_self_add },
        apply h,
        rintro (hy' : y ‚àà V (œÄ (n‚ÇÄ x + k + 1))),
        have := hi‚ÇÄ x ‚ü®y, ‚ü®hy', hy‚ü©‚ü©, clear hy hy',
        exact lt_irrefl _ (lt_of_le_of_lt this ineq) },
      { erw [‚Üê (h' _ H.symm)],
        refl } } },
  refine ‚ü®Œª x, f (n‚ÇÄ x) x, Œª x, _‚ü©,
  change ‚àÄ·∂† (n : ‚Ñï) in at_top, f n =·∂†[ùìù x] Œª (y : X), f (n‚ÇÄ y) y,
  apply (eventually_gt_at_top (n‚ÇÄ x)).mono (Œª n hn, _),
  apply mem_of_superset (hUx x) (Œª y hy, _),
  change f n y = f (n‚ÇÄ y) y,
  calc f n y = f (n‚ÇÄ x) y : key hn.le hy
  ... = f (max (n‚ÇÄ x) (n‚ÇÄ y)) y : (key (le_max_left _ _) hy).symm
  ... = f (n‚ÇÄ y) y : key (le_max_right _ _) (mem_of_mem_nhds $ hUx y)
end

lemma inductive_construction {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U K : index_type N ‚Üí set X}
  (P‚ÇÄ P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  (U_fin : locally_finite U) (K_cover : (‚ãÉ i, K i) = univ)
  (init : ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ x ‚àà ‚ãÉ j < i, K j, P‚ÇÅ x f) ‚Üí
    ‚àÉ f' : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f') ‚àß (‚àÄ x ‚àà ‚ãÉ j ‚â§ i, K j, P‚ÇÅ x f') ‚àß ‚àÄ x ‚àâ U i, f' x = f x) :
    ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÅ x f :=
begin
  let P : ‚Ñï ‚Üí (X ‚Üí Y) ‚Üí Prop :=
    Œª n f, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ x ‚àà (‚ãÉ i ‚â§ (n : index_type N) , K i), P‚ÇÅ x f,
  let Q : ‚Ñï ‚Üí (X ‚Üí Y) ‚Üí (X ‚Üí Y) ‚Üí Prop :=
    Œª n f f', ((((n+1:‚Ñï) : index_type N) = n) ‚Üí f' = f) ‚àß ‚àÄ x ‚àâ U (n + 1 : ‚Ñï), f' x = f x,
  obtain ‚ü®f, hf‚ü© : ‚àÉ f : ‚Ñï ‚Üí X ‚Üí Y, ‚àÄ n, P n (f n) ‚àß Q n (f n) (f $ n + 1),
  { apply exists_by_induction',
    { dsimp [P],
      cases init with f‚ÇÄ hf‚ÇÄ,
      rcases ind 0 f‚ÇÄ hf‚ÇÄ _ with ‚ü®f', h‚ÇÄf', h‚ÇÅf', hf'‚ü©,
      use [f', h‚ÇÄf'],
      intros x hx,
      apply h‚ÇÅf' _ hx,
      have : (‚ãÉ (j : index_type N) (H : j < 0), K j) = ‚àÖ,
      { simp [index_type.not_lt_zero] },
      simp only [this, mem_empty_iff_false, is_empty.forall_iff, implies_true_iff] },
    { rintros n f ‚ü®h‚ÇÄf, h‚ÇÅf‚ü©,
      rcases index_type.lt_or_eq_succ N n with hn | hn,
      { simp_rw index_type.le_or_lt_succ hn at h‚ÇÅf,
        rcases ind (n+1 : ‚Ñï) f h‚ÇÄf h‚ÇÅf with ‚ü®f', h‚ÇÄf', h‚ÇÅf', hf'‚ü©,
        exact ‚ü®f', ‚ü®h‚ÇÄf', h‚ÇÅf'‚ü©, ‚ü®Œª hn', (hn.ne hn'.symm).elim, hf'‚ü©‚ü© },
      { simp only [hn] at h‚ÇÅf,
        exact ‚ü®f, ‚ü®h‚ÇÄf, h‚ÇÅf‚ü©, Œª hn, rfl, Œª x hx, rfl‚ü© } } },
  dsimp only [P, Q] at hf,
  simp only [forall_and_distrib] at hf,
  rcases hf with ‚ü®‚ü®h‚ÇÄf, h‚ÇÅf‚ü©, hf, hf'‚ü©,
  rcases U_fin.exists_forall_eventually_of_indexing hf' hf with ‚ü®F, hF‚ü©,
  refine ‚ü®F, Œª x, _‚ü©,
  have : ‚àÄ·∂† (n : ‚Ñï) in at_top, x ‚àà ‚ãÉ i ‚â§ (n : index_type N), K i,
  { have : x ‚àà ‚ãÉ (i : index_type N), K i := K_cover.symm ‚ñ∏ (mem_univ x),
    rcases mem_Union.mp this with ‚ü®i, hi‚ü©,
    apply (filter.tendsto_at_top.mp (index_type.tendsto_coe_at_top N) i).mono,
    intros n hn,
    exact mem_Union‚ÇÇ.mpr ‚ü®i, hn, hi‚ü© },
  rcases eventually_at_top.mp ((hF x).and this) with ‚ü®n‚ÇÄ, hn‚ÇÄ‚ü©,
  rcases hn‚ÇÄ n‚ÇÄ le_rfl with ‚ü®hx, hx'‚ü©,
  rw germ.coe_eq.mpr hx.symm,
  exact ‚ü®h‚ÇÄf n‚ÇÄ x, h‚ÇÅf n‚ÇÄ x hx'‚ü©
end

/-- We are given a suitably nice topological space `X` and two local constraints `P‚ÇÄ` and `P‚ÇÅ`
on maps from `X` to some type `Y`. All maps entering the discussion are required to statisfy `P‚ÇÄ`
everywhere. The goal is to turn a map `f‚ÇÄ` satisfying `P‚ÇÅ` near a compact set `K` into
one satisfying everywhere without changing `f‚ÇÄ` near `K`. The assumptions are:
* For every `x` in `X` there is a map which satisfies `P‚ÇÅ` near `x`
* One can patch two maps `f‚ÇÅ f‚ÇÇ` satisfying `P‚ÇÅ` on open sets `U‚ÇÅ` and `U‚ÇÇ` respectively
  into a map satisfying `P‚ÇÅ` on `K‚ÇÅ ‚à™ K‚ÇÇ` for any compact sets `K·µ¢ ‚äÜ U·µ¢`.
One can probably deduce this version from the version where `K` is empty for some
other `P‚ÇÄ`. -/
lemma inductive_construction'' {X Y : Type*} [emetric_space X] [locally_compact_space X]
  [second_countable_topology X]
  (P‚ÇÄ P‚ÇÄ' P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  {f‚ÇÄ : X ‚Üí Y} (hP‚ÇÄf‚ÇÄ : ‚àÄ x, P‚ÇÄ x f‚ÇÄ ‚àß P‚ÇÄ' x f‚ÇÄ )
  (loc : ‚àÄ x, ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ·∂† x' in ùìù x, P‚ÇÅ x' f)
  (ind : ‚àÄ {U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ : set X} {f‚ÇÅ f‚ÇÇ : X ‚Üí Y}, is_open U‚ÇÅ ‚Üí is_open U‚ÇÇ ‚Üí
     is_compact K‚ÇÅ ‚Üí is_compact K‚ÇÇ ‚Üí K‚ÇÅ ‚äÜ U‚ÇÅ ‚Üí K‚ÇÇ ‚äÜ U‚ÇÇ ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÅ ‚àß P‚ÇÄ' x f‚ÇÅ) ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÇ) ‚Üí
     (‚àÄ x ‚àà U‚ÇÅ, P‚ÇÅ x f‚ÇÅ) ‚Üí (‚àÄ x ‚àà U‚ÇÇ, P‚ÇÅ x f‚ÇÇ) ‚Üí
     ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÄ' x f ) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ K‚ÇÇ, P‚ÇÅ x f) ‚àß
                  (‚àÄ·∂† x near K‚ÇÅ ‚à™ U‚ÇÇ·∂ú, f x = f‚ÇÅ x)) :
    ‚àÉ f : X ‚Üí Y, ‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÄ' x f ‚àß P‚ÇÅ x f :=
begin
  sorry
end

/-- We are given a suitably nice topological space `X` and two local constraints `P‚ÇÄ` and `P‚ÇÅ`
on maps from `X` to some type `Y`. All maps entering the discussion are required to statisfy `P‚ÇÄ`
everywhere. The goal is to turn a map `f‚ÇÄ` satisfying `P‚ÇÅ` near a compact set `K` into
one satisfying everywhere without changing `f‚ÇÄ` near `K`. The assumptions are:
* For every `x` in `X` there is a map which satisfies `P‚ÇÅ` near `x`
* One can patch two maps `f‚ÇÅ f‚ÇÇ` satisfying `P‚ÇÅ` on open sets `U‚ÇÅ` and `U‚ÇÇ` respectively
  into a map satisfying `P‚ÇÅ` on `K‚ÇÅ ‚à™ K‚ÇÇ` for any compact sets `K·µ¢ ‚äÜ U·µ¢`.
One can probably deduce this version from the version where `K` is empty for some
other `P‚ÇÄ`. -/
lemma inductive_construction' {X Y : Type*} [emetric_space X] [locally_compact_space X]
  [second_countable_topology X]
  (P‚ÇÄ P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop)
  {K : set X} (hK : is_compact K)
  {f‚ÇÄ : X ‚Üí Y} (hP‚ÇÄf‚ÇÄ : ‚àÄ x, P‚ÇÄ x f‚ÇÄ) (hP‚ÇÅf‚ÇÄ : ‚àÄ·∂† x near K, P‚ÇÅ x f‚ÇÄ)
  (loc : ‚àÄ x, ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß ‚àÄ·∂† x' in ùìù x, P‚ÇÅ x' f)
  (ind : ‚àÄ {U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ : set X} {f‚ÇÅ f‚ÇÇ : X ‚Üí Y}, is_open U‚ÇÅ ‚Üí is_open U‚ÇÇ ‚Üí
     is_compact K‚ÇÅ ‚Üí is_compact K‚ÇÇ ‚Üí K‚ÇÅ ‚äÜ U‚ÇÅ ‚Üí K‚ÇÇ ‚äÜ U‚ÇÇ ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÅ) ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÇ) ‚Üí
     (‚àÄ x ‚àà U‚ÇÅ, P‚ÇÅ x f‚ÇÅ) ‚Üí (‚àÄ x ‚àà U‚ÇÇ, P‚ÇÅ x f‚ÇÇ) ‚Üí
     ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ K‚ÇÇ, P‚ÇÅ x f) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ U‚ÇÇ·∂ú, f x = f‚ÇÅ x)) :
    ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÅ x f) ‚àß ‚àÄ·∂† x near K, f x = f‚ÇÄ x :=
begin
  let P‚ÇÄ' : Œ† x : X, germ (ùìù x) Y ‚Üí Prop := restrict_germ_predicate (Œª x œÜ, œÜ.value = f‚ÇÄ x) K,
  have hf‚ÇÄ : ‚àÄ x, P‚ÇÄ x f‚ÇÄ ‚àß P‚ÇÄ' x f‚ÇÄ,
  { exact Œª x, ‚ü®hP‚ÇÄf‚ÇÄ x, Œª hx, eventually_of_forall (Œª x', rfl)‚ü© },
  have ind' : ‚àÄ (U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ : set X) {f‚ÇÅ f‚ÇÇ : X ‚Üí Y}, is_open U‚ÇÅ ‚Üí is_open U‚ÇÇ ‚Üí
     is_compact K‚ÇÅ ‚Üí is_compact K‚ÇÇ ‚Üí K‚ÇÅ ‚äÜ U‚ÇÅ ‚Üí K‚ÇÇ ‚äÜ U‚ÇÇ ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÅ ‚àß P‚ÇÄ' x f‚ÇÅ) ‚Üí (‚àÄ x, P‚ÇÄ x f‚ÇÇ) ‚Üí
     (‚àÄ x ‚àà U‚ÇÅ, P‚ÇÅ x f‚ÇÅ) ‚Üí (‚àÄ x ‚àà U‚ÇÇ, P‚ÇÅ x f‚ÇÇ) ‚Üí
     ‚àÉ f : X ‚Üí Y, (‚àÄ x, P‚ÇÄ x f ‚àß P‚ÇÄ' x f ) ‚àß (‚àÄ·∂† x near K‚ÇÅ ‚à™ K‚ÇÇ, P‚ÇÅ x f) ‚àß
                  (‚àÄ·∂† x near K‚ÇÅ ‚à™ U‚ÇÇ·∂ú, f x = f‚ÇÅ x),
  { intros U‚ÇÅ U‚ÇÇ K‚ÇÅ K‚ÇÇ f‚ÇÅ f‚ÇÇ U‚ÇÅ_op U‚ÇÇ_op K‚ÇÅ_cpct K‚ÇÇ_cpct hK‚ÇÅU‚ÇÅ hK‚ÇÇU‚ÇÇ hf‚ÇÅ hf‚ÇÇ hf‚ÇÅU‚ÇÅ hf‚ÇÇU‚ÇÇ,
    obtain ‚ü®h‚ÇÄf‚ÇÅ, h‚ÇÄ'f‚ÇÅ‚ü© := forall_and_distrib.mp hf‚ÇÅ,
    rw forall_restrict_germ_predicate_iff at h‚ÇÄ'f‚ÇÅ,
    rcases (has_basis_nhds_set K).mem_iff.mp (hP‚ÇÅf‚ÇÄ.germ_congr h‚ÇÄ'f‚ÇÅ) with ‚ü®U, ‚ü®U_op, hKU‚ü©, hU‚ü©,
    rcases ind (U_op.union U‚ÇÅ_op) U‚ÇÇ_op (hK.union K‚ÇÅ_cpct) K‚ÇÇ_cpct (union_subset_union hKU hK‚ÇÅU‚ÇÅ)
      hK‚ÇÇU‚ÇÇ h‚ÇÄf‚ÇÅ hf‚ÇÇ (Œª x hx, hx.elim (Œª hx, hU hx) (Œª hx, hf‚ÇÅU‚ÇÅ x hx)) hf‚ÇÇU‚ÇÇ with ‚ü®f, h‚ÇÄf, hf, h'f‚ü©,
    rw [union_assoc, eventually_nhds_set_union] at hf h'f,
    exact ‚ü®f, Œª x, ‚ü®h‚ÇÄf x, restrict_germ_predicate_congr (hf‚ÇÅ x).2 h'f.1‚ü©, hf.2, h'f.2‚ü© },
  rcases inductive_construction'' P‚ÇÄ P‚ÇÄ' P‚ÇÅ hf‚ÇÄ loc ind' with ‚ü®f, hf‚ü©,
  simp only [forall_and_distrib, forall_restrict_germ_predicate_iff ] at hf ‚ä¢,
  exact ‚ü®f, ‚ü®hf.1, hf.2.2‚ü©, hf.2.1‚ü©
end

end inductive_construction

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] {F : Type*}
  [normed_add_comm_group F] [normed_space ‚Ñù F] {g b : E ‚Üí F} {U K C : set E} {Œ© : set (E √ó F)}
  [finite_dimensional ‚Ñù E] [finite_dimensional ‚Ñù F]

-- Patrick doesn't understand why `apply_instance` doesn't work in the next example.
-- Because of this issue, the next definition can't use `‚ÜøŒ≥`.
example : function.has_uncurry (E ‚Üí ‚Ñù ‚Üí loop F) (E √ó ‚Ñù √ó ‚Ñù) F :=
begin
  apply function.has_uncurry_induction,
end

def continuous_germ {x : E} (œÜ : germ (ùìù x) (‚Ñù ‚Üí loop F)) : Prop :=
quotient.lift_on' œÜ (Œª Œ≥, ‚àÄ (t s : ‚Ñù), continuous_at (Œª p : E √ó ‚Ñù √ó ‚Ñù, Œ≥ p.1 p.2.1 p.2.2) (x, t, s))
begin
  rintros Œ≥ Œ≥' (h : {x | Œ≥ x = Œ≥' x} ‚àà ùìù x),
  ext,
  refine forall_congr (Œª t, forall_congr (Œª s, continuous_at_congr _)),
  rw [nhds_prod_eq],
  apply mem_of_superset (filter.prod_mem_prod h univ_mem),
  rintros ‚ü®x', p‚ü© ‚ü®hx' : Œ≥ x' = Œ≥' x', -‚ü©,
  simp only [mem_set_of_eq, hx']
end

variables (g b Œ©)

structure loop_family_germ (x : E) (œÜ : germ (ùìù x) (‚Ñù ‚Üí loop F)) : Prop :=
(base : ‚àÄ t, œÜ.value t 0 = b x)
(t‚ÇÄ : ‚àÄ s, œÜ.value 0 s = b x)
(proj_I : ‚àÄ (t : ‚Ñù) (s : ‚Ñù), œÜ.value (proj_I t) s = œÜ.value t s)
(cont : continuous_germ œÜ)

structure surrounding_family_germ (x : E) (œÜ : germ (ùìù x) (‚Ñù ‚Üí loop F)) : Prop :=
(surrounds : (œÜ.value 1).surrounds $ g x)
(val_in' : ‚àÄ (t ‚àà I) (s ‚àà I), (x, œÜ.value t s) ‚àà Œ©)

variables {g b Œ©}

/-
The following proof is slightly tedious because the definition of `surrounding_family_in`
splits weirdly into `surrounding_family` which includes one condition on `C`
and one extra condition on `C` instead of putting everything which does not depend on `C`
on one side and the two conditions depending on `C` on the other side as we do here.
-/
lemma surrounding_family_in_iff_germ {Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F} :
  surrounding_family_in g b Œ≥ C Œ© ‚Üî (‚àÄ x, loop_family_germ b x Œ≥) ‚àß
                                    (‚àÄ x ‚àà C, surrounding_family_germ g Œ© x Œ≥) :=
begin
  split,
  { rintro ‚ü®‚ü®base, t‚ÇÄ, proj_I, family_surrounds, family_cont‚ü©, H‚ü©,
    exact ‚ü®Œª x, ‚ü®base x, t‚ÇÄ x, proj_I x, Œª t s, family_cont.continuous_at‚ü©,
           Œª x x_in, ‚ü®family_surrounds x x_in, H x x_in‚ü©‚ü© },
  { rintro ‚ü®h, h'‚ü©,
    refine ‚ü®‚ü®Œª x, (h x).base, Œª x, (h x).t‚ÇÄ, Œª x, (h x).proj_I,  Œª x hx, (h' x hx).surrounds, _‚ü©,
            Œª x hx, (h' x hx).val_in'‚ü©,
    apply continuous_iff_continuous_at.mpr,
    rintros ‚ü®x, t, s‚ü©,
    apply (h x).cont }
end

lemma exists_surrounding_loops'
  (hK : is_compact K)
  (hŒ©_op : is_open Œ©)
  (hg : ‚àÄ x, continuous_at g x) (hb : continuous b)
  (hconv : ‚àÄ x, g x ‚àà convex_hull ‚Ñù (connected_component_in (prod.mk x ‚Åª¬π' Œ©) $ b x))
  {Œ≥‚ÇÄ :  E ‚Üí ‚Ñù ‚Üí loop F}
  (hŒ≥‚ÇÄ_surr : ‚àÉ V ‚àà ùìùÀ¢ K, surrounding_family_in g b Œ≥‚ÇÄ V Œ©) :
  ‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, surrounding_family_in g b Œ≥ univ Œ© ‚àß ‚àÄ·∂† x in ùìùÀ¢ K, Œ≥ x = Œ≥‚ÇÄ x :=
begin
  rcases hŒ≥‚ÇÄ_surr with ‚ü®V, V_in, hV‚ü©,
  cases surrounding_family_in_iff_germ.mp hV with hV h'V,
  simp only [surrounding_family_in_iff_germ, mem_univ, forall_true_left, ‚Üê forall_and_distrib],
  apply inductive_construction' (loop_family_germ b) (surrounding_family_germ g Œ©) hK hV
    (mem_of_superset V_in h'V),
  { intros x,
    rcases local_loops ‚ü®univ, univ_mem, by  simp only [preimage_univ, inter_univ,hŒ©_op ]‚ü©
      (hg x) hb (hconv x) with ‚ü®Œ≥, U, U_in, H‚ü©,
    cases surrounding_family_in_iff_germ.mp H with H H',
    exact ‚ü®Œ≥, H, mem_of_superset U_in H'‚ü© },
  { intros U‚ÇÅ U‚ÇÇ K‚ÇÅ  K‚ÇÇ Œ≥‚ÇÅ Œ≥‚ÇÇ hU‚ÇÅ hU‚ÇÇ hK‚ÇÅ hK‚ÇÇ hKU‚ÇÅ hKU‚ÇÇ hŒ≥‚ÇÅ hŒ≥‚ÇÇ h'Œ≥‚ÇÅ h'Œ≥‚ÇÇ,
    rcases extend_loops hU‚ÇÅ hU‚ÇÇ hK‚ÇÅ hK‚ÇÇ hKU‚ÇÅ hKU‚ÇÇ (surrounding_family_in_iff_germ.mpr ‚ü®hŒ≥‚ÇÅ, h'Œ≥‚ÇÅ‚ü©)
      (surrounding_family_in_iff_germ.mpr ‚ü®hŒ≥‚ÇÇ, h'Œ≥‚ÇÇ‚ü©) with ‚ü®U, U_in, Œ≥, H, H''‚ü©,
    cases surrounding_family_in_iff_germ.mp H with H H',
    refine ‚ü®Œ≥, H, mem_of_superset U_in H', eventually_nhds_set_union.mpr H''‚ü© }
end
