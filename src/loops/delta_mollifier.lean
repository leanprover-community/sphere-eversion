import measure_theory.integral.interval_integral
import analysis.calculus.specific_functions

import notations
import loops.basic

import to_mathlib.partition -- get our finsum stuff

noncomputable theory
open set function
open_locale topological_space big_operators filter

section
/-! ## Bump family

In this section we construct `bump (n : ‚Ñï)`, a bump function with support in
`Ioo -1/(n+1) 1/(n+2)`.
-/

lemma aux (n : ‚Ñï) : Ioo (-(1/(n+2 : ‚Ñù))) (1/(n+2)) ‚àà ùìù (0 : ‚Ñù) :=
begin
  have key : (0 : ‚Ñù) < 1/(n+2),
  { rw show (n : ‚Ñù) + 2 = ((n+1 :‚Ñï) : ‚Ñù) + 1, from by norm_cast,
    apply nat.one_div_pos_of_nat },
  apply Ioo_mem_nhds _ key,
  rwa neg_lt_zero
end

def bump (n : ‚Ñï) := (cont_diff_bump.exists_tsupport_subset (aux n)).some

lemma tsupport_bump (n : ‚Ñï) : tsupport (bump n) ‚äÜ Ioo (-(1/(n+2))) (1/(n+2)) :=
(cont_diff_bump.exists_tsupport_subset (aux n)).some_spec

lemma tsupport_bump' (n : ‚Ñï) : tsupport (bump n) ‚äÜ Ioo (-(1/2)) (1/2) :=
begin
  have ineg : 1 / (n + 2 : ‚Ñù) ‚â§ 1 / 2,
  { apply one_div_le_one_div_of_le ; norm_num },
  exact (tsupport_bump n).trans (Ioo_subset_Ioo (neg_le_neg ineg) ineg)
end

lemma bump_nonneg (n : ‚Ñï) (x : ‚Ñù) : 0 ‚â§ bump n x :=
cont_diff_bump.nonneg _

def integral_bump (n : ‚Ñï) := ‚à´ t in -(1/2)..1/2, bump n t

lemma integral_bump_pos (n : ‚Ñï) : 0 < integral_bump n :=
begin

  sorry
end

end

section finprod
/-! ## Missing finprod/finsum lemmas -/

variables {M : Type*} [comm_monoid M] {Œπ Œπ' : Type*}

@[to_additive]
lemma finset.prod_equiv [decidable_eq Œπ] {e : Œπ ‚âÉ Œπ'} {f : Œπ' ‚Üí M} {s' : finset Œπ'} {s : finset Œπ}
  (h : s = finset.image e.symm s') :
  ‚àè i' in s', f i' = ‚àè i in s, f (e i) :=
begin
  rw [h, finset.prod_bij' (Œª i' hi', e.symm i') _ _ (Œª i hi, e i)],
  { simp },
  { simp },
  { rintro a ha,
    rcases finset.mem_image.mp ha with ‚ü®i', hi', rfl‚ü©,
    simp [hi'] },
  { exact Œª i' hi',  finset.mem_image_of_mem _ hi' },
  { simp },
end

lemma equiv.preimage_eq_image {Œ± Œ≤ : Type*} (e : Œ± ‚âÉ Œ≤) (s : set Œ≤) : ‚áëe ‚Åª¬π' s = e.symm '' s :=
by simp [e.symm.image_eq_preimage]

@[to_additive]
lemma finprod_comp_equiv {e : Œπ ‚âÉ Œπ'} {f : Œπ' ‚Üí M} : ‚àè·∂† i', f i' = ‚àè·∂† i, f (e i) :=
begin
  classical,
  have supp : mul_support (Œª i, f (e i)) = e ‚Åª¬π' (mul_support f),
  { apply mul_support_comp_eq_preimage },
  cases (finite_or_infinite : (mul_support f).finite ‚à® _) with H H,
  { have H' : (mul_support (Œª i, f (e i))).finite,
    { rw [supp, e.preimage_eq_image],
      exact H.image (equiv.symm e) },
    rw [finprod_eq_prod f H, finprod_eq_prod _ H', finset.prod_equiv],
    apply finset.coe_injective,
    simp [e.preimage_eq_image, supp] },
  { rw finprod_of_infinite_mul_support H,
    rw [finprod_of_infinite_mul_support],
    rw supp,
    apply infinite_of_infinite_image,
    rwa e.image_preimage }
end

end finprod

section
/-! ## The standard ‚Ñ§ action on ‚Ñù is properly discontinuous

TODO: use that in to_mathlib.topology.periodic?
-/
instance : has_vadd ‚Ñ§ ‚Ñù := ‚ü®Œª n x, (n : ‚Ñù) + x‚ü©

instance : properly_discontinuous_vadd ‚Ñ§ ‚Ñù := sorry
end

section
/-! # Periodize

In this section we turn any function `f : ‚Ñù ‚Üí E` into a 1-periodic function
`Œª t : ‚Ñù, ‚àë·∂† n : ‚Ñ§, f (t+n)`.
-/

variables {M : Type*} [add_comm_monoid M]

def periodize (f : ‚Ñù ‚Üí M) (t : ‚Ñù) := ‚àë·∂† n : ‚Ñ§, f (t + n)

lemma periodic_periodize (f : ‚Ñù ‚Üí M) : periodic (periodize f) 1 :=
begin
  intros t,
  unfold periodize,
  have : (Œª n : ‚Ñ§, f (t + 1 + ‚Üën)) = Œª n, f (t + (n+1 : ‚Ñ§)),
  { ext n,
    rw add_assoc,
    congr' 2,
    simp [add_comm] },
  simp_rw this,
  let e := equiv.add_right (1 : ‚Ñ§),
  let F : ‚Ñ§ ‚Üí M := Œª n, f (t + n),
  change ‚àë·∂† (n : ‚Ñ§), F (e n) = ‚àë·∂† (n : ‚Ñ§), f (t + ‚Üën),
  exact finsum_comp_equiv.symm,
end

lemma periodize_nonneg {f : ‚Ñù ‚Üí ‚Ñù} (h : ‚àÄ t, 0 ‚â§ f t) (t : ‚Ñù) : 0 ‚â§ periodize f t :=
begin
  unfold periodize,
  cases (finite_or_infinite : (support (Œª i : ‚Ñ§, f (t+i))).finite ‚à® _) with H H,
  { rw [finsum_eq_sum _ H],
    apply finset.sum_nonneg,
    exact Œª i hi, h _ },
  { rwa finsum_of_infinite_support },
end

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]


lemma cont_diff.periodize {f : ‚Ñù ‚Üí E} {n : with_top ‚Ñï} (h : cont_diff ‚Ñù n f)
  (h' : has_compact_support f) : cont_diff ‚Ñù n (periodize f) :=
begin
  apply cont_diff_iff_cont_diff_at.mpr (Œª x, cont_diff_at_finsum _ _),
  { intros y,
    dsimp,
    set N := Ioo (y - 1) (y + 1),
    refine ‚ü®N, (nhds_basis_Ioo_pos y).mem_of_mem zero_lt_one, _‚ü©,
    let e := Œª i : ‚Ñ§, equiv.add_right (i : ‚Ñù),
    change {i : ‚Ñ§ | (support (Œª (x : ‚Ñù), f (e i x)) ‚à© N).nonempty}.finite,
    have hsupp : ‚àÄ i : ‚Ñ§, support (Œª (x : ‚Ñù), f (e i x)) = (e i)‚Åª¬π' (support f),
    { intro i,
      rw support_comp_eq_preimage },
    have hsupp' : ‚àÄ i, ((e i)‚Åª¬π' (support f) ‚à© N).nonempty ‚Üî (support f ‚à© e i '' N).nonempty,
    { intros i,
      conv_lhs { rw [‚Üê (e i).preimage_image N, ‚Üê preimage_inter] },
      rw (e i).surjective.nonempty_preimage },
    simp_rw [hsupp, hsupp', inter_comm (support f)], clear hsupp hsupp',
    refine (properly_discontinuous_vadd.finite_disjoint_inter_image (is_compact_Icc : is_compact $ Icc (y-1) (y+1)) h').subset _,
    intros i hi,
    rw [mem_set_of_eq, ne_empty_iff_nonempty],
    apply nonempty.mono _ hi,
    mono,
    { rw show (e i : ‚Ñù ‚Üí ‚Ñù) = (has_vadd.vadd i), by { ext x, exact add_comm x i },
      exact image_subset _ Ioo_subset_Icc_self },
    exact subset_tsupport f },
  { intros i,
    exact (h.cont_diff_at).comp _ (cont_diff_at_id.add cont_diff_at_const) },
end

lemma integral_periodize (f : ‚Ñù ‚Üí ‚Ñù) (hf : support f ‚äÜ Ioo (-(1/2)) (1/2)) :
  ‚à´ t in (-(1/2))..(1/2), periodize f t = ‚à´ t in (-(1/2))..(1/2), f t :=
begin

  sorry
end

end

section small_sets
open_locale filter
open filter
variables {Œ± Œπ : Type*}

def filter.small_sets (f : filter Œ±) : filter (set Œ±):=
‚®Ö t ‚àà f, ùìü {s | s ‚äÜ t}

lemma filter.has_basis_small_sets (f : filter Œ±) :
  has_basis f.small_sets (Œª t : set Œ±, t ‚àà f) (Œª t, {s | s ‚äÜ t}) :=
begin
  apply has_basis_binfi_principal _ _,
  { rintros u (u_in : u ‚àà f) v (v_in : v ‚àà f),
    use [u ‚à© v, inter_mem u_in v_in],
    split,
    rintros w (w_sub : w ‚äÜ u ‚à© v),
    exact w_sub.trans (inter_subset_left u v),
    rintros w (w_sub : w ‚äÜ u ‚à© v),
    exact w_sub.trans (inter_subset_right u v) },
  { use univ,
    exact univ_mem },
end

lemma filter.has_basis.small_sets {f : filter Œ±} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí set Œ±}
  (h : has_basis f p s) : has_basis f.small_sets p (Œª i, {u | u ‚äÜ s i}) :=
‚ü®begin
  intros t,
  rw f.has_basis_small_sets.mem_iff,
  split,
  { rintro ‚ü®u, u_in, hu : {v : set Œ± | v ‚äÜ u} ‚äÜ t‚ü©,
    rcases h.mem_iff.mp u_in with ‚ü®i, hpi, hiu‚ü©,
    use [i, hpi],
    apply subset.trans _ hu,
    intros v hv x hx,
    exact hiu (hv hx) },
  { rintro ‚ü®i, hi, hui‚ü©,
    exact ‚ü®s i, h.mem_of_mem hi, hui‚ü© }
end‚ü©

-- sanity check
example {Œ∫ : Type*} {a : filter Œ∫} {f : filter Œ±} {g : Œ∫ ‚Üí set Œ±} :
  tendsto g a f.small_sets ‚Üî ‚àÄ t : set Œ±, t ‚àà f ‚Üí ‚àÄ·∂† k in a, g k ‚äÜ t :=
f.has_basis_small_sets.tendsto_right_iff

end small_sets


section
open filter
open_locale filter

lemma tendsto_sup_dist {X Y : Type*} [topological_space X] [locally_compact_space X]
  [metric_space Y] {f : X ‚Üí Y} (h : continuous f)
  {t : X} {s : ‚Ñï ‚Üí set X} (hs : tendsto s at_top (ùìù t).small_sets) :
  tendsto (Œª (n : ‚Ñï), ‚®Ü x ‚àà s n, dist (f x) (f t)) at_top (ùìù 0) :=
begin
  sorry
end

end

section mollify_on_real

/-! ## Mollifiers on ‚Ñù -/
open_locale filter
open filter measure_theory

variables {Œ¥ : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù} (Œ¥_nonneg : ‚àÄ n x, 0 ‚â§ Œ¥ n x) (int_Œ¥ : ‚àÄ n, ‚à´ s, Œ¥ n s = 1)
  (supp_Œ¥ : tendsto (Œª n, support (Œ¥ n)) at_top (ùìù 0).small_sets)

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E] [complete_space E]

lemma continuous.integrable_of_tsupport {f : ‚Ñù ‚Üí E} (h : continuous f) (h' : has_compact_support f) :
integrable f :=
begin

  sorry
end

@[to_additive]
lemma has_compact_mul_support_of_subset {Œ± Œ≤ : Type*} [topological_space Œ±] [t2_space Œ±]
  [has_one Œ≤] {f : Œ± ‚Üí Œ≤} {K : set Œ±} (hK : is_compact K) (hf : mul_support f ‚äÜ K) :
  has_compact_mul_support f :=
begin
  apply compact_of_is_closed_subset hK (is_closed_mul_tsupport f),
  rw ‚Üê hK.is_closed.closure_eq,
  exact closure_mono hf
end

lemma tendsto_truc {Œ¥ : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù} (Œ¥_nonneg : ‚àÄ n x, 0 ‚â§ Œ¥ n x) (int_Œ¥ : ‚àÄ n, ‚à´ s, Œ¥ n s = 1)
  (supp_Œ¥ : tendsto (Œª n, support (Œ¥ n)) at_top (ùìù 0).small_sets) (Œ¥_cont : ‚àÄ n, continuous (Œ¥ n))
  {f : ‚Ñù ‚Üí E} {t : ‚Ñù} (h : continuous f) :
  tendsto (Œª n, ‚à´ s, Œ¥ n (t - s) ‚Ä¢ f s) at_top (ùìù $ f t) :=
begin
  have : ‚àÄ n, ‚à´ s, Œ¥ n (t - s) ‚Ä¢ f s = ‚à´ s, Œ¥ n s  ‚Ä¢ f (t - s),
  {
    sorry },
  rw funext this,
  have : tendsto (Œª n, ‚®Ü x ‚àà support (Œ¥ n), ‚à•f (t - x) - f t‚à•) at_top (ùìù 0),
  { set F := Œª x, f (t - x),
    suffices : tendsto (Œª n, ‚®Ü x ‚àà support (Œ¥ n), ‚à•F x - F 0‚à•) at_top (ùìù 0),
    { simp_rw [F, sub_zero t] at this, exact this },
    simp_rw ‚Üê dist_eq_norm,
    exact tendsto_sup_dist (h.comp $ continuous_sub_left t) supp_Œ¥ },
  rw tendsto_iff_norm_tendsto_zero,
  apply squeeze_zero_norm' _ this,
  have : ‚àÄ·∂† n in at_top, support (Œ¥ n) ‚äÜ Icc (-1) 1,
  { have : Icc (-(1 : ‚Ñù)) 1 ‚àà ùìù (0 : ‚Ñù),
    apply Icc_mem_nhds ; norm_num,
    exact (ùìù (0 : ‚Ñù)).has_basis_small_sets.tendsto_right_iff.mp supp_Œ¥ _ this },
  apply this.mono,
  intros n hn,
  have cpct‚ÇÅ : has_compact_support (Œ¥ n),
  { apply has_compact_support_of_subset is_compact_Icc hn },
  rw norm_norm,
  have : (‚à´ (s : ‚Ñù), Œ¥ n s ‚Ä¢ f (t - s)) - f t = ‚à´ (s : ‚Ñù), Œ¥ n s ‚Ä¢ (f (t - s) - f t),
  { conv_lhs { rw [show f t = (1 : ‚Ñù) ‚Ä¢ f t, by simp only [one_smul], ‚Üê int_Œ¥ n] },
    have Œ¥_integrable : integrable (Œ¥ n),
    { apply (Œ¥_cont n).integrable_of_tsupport cpct‚ÇÅ },
    have : (‚à´ (s : ‚Ñù), Œ¥ n s) ‚Ä¢ f t = (‚à´ (s : ‚Ñù), Œ¥ n s ‚Ä¢ f t),
    {
      sorry },
    rw [this, ‚Üê measure_theory.integral_sub],
    simp [smul_sub],
    { apply continuous.integrable_of_tsupport,
      sorry,
      sorry },
    { apply continuous.integrable_of_tsupport,
      sorry,
      sorry } },
  rw this,
  calc ‚à•‚à´ (s : ‚Ñù), Œ¥ n s ‚Ä¢ (f (t - s) - f t)‚à• ‚â§ ‚à´ s, ‚à•Œ¥ n s ‚Ä¢ (f (t - s) - f t)‚à• : _
  ... = ‚à´ s, ‚à•Œ¥ n s‚à• * ‚à•(f (t - s) - f t)‚à• : by simp_rw norm_smul
  ... = ‚à´ s in support (Œ¥ n), ‚à•Œ¥ n s‚à• * ‚à•(f (t - s) - f t)‚à• : _
  ... ‚â§ ‚à´ s in support (Œ¥ n), ‚à•Œ¥ n s‚à• * ‚®Ü s ‚àà support (Œ¥ n), ‚à•(f (t - s) - f t)‚à• : _
  ... = (‚à´ s in support (Œ¥ n), ‚à•Œ¥ n s‚à•) * ‚®Ü s ‚àà support (Œ¥ n), ‚à•(f (t - s) - f t)‚à• : _
  ... = ‚®Ü (x : ‚Ñù) (H : x ‚àà support (Œ¥ n)), ‚à•f (t - x) - f t‚à• : _,
  all_goals { sorry }
end

end mollify_on_real

section delta_approx

/-- ## An approximate Dirac "on the circle". -/

def approx_dirac (n : ‚Ñï) : ‚Ñù ‚Üí ‚Ñù :=
Œª t, 1/(integral_bump n)*(periodize (bump n) t)

lemma periodic_const {Œ± Œ≤ : Type*} [has_add Œ±] {a : Œ±} {b : Œ≤} : periodic (Œª x, b) a :=
Œª x, rfl

lemma periodic_approx_dirac (n : ‚Ñï) : periodic (approx_dirac n) 1 :=
begin
  intros t,
  unfold approx_dirac,
  rw periodic_periodize
end

lemma approx_dirac_nonneg (n : ‚Ñï) (t : ‚Ñù): 0 ‚â§ approx_dirac n t :=
mul_nonneg (one_div_nonneg.mpr (integral_bump_pos n).le)(periodize_nonneg (bump_nonneg n) t)


lemma approx_dirac_smooth (n : ‚Ñï) : ùíû ‚àû (approx_dirac n) :=
((bump n).cont_diff.periodize (bump n).has_compact_support).const_smul _

end delta_approx

/-- A stictly positive, smooth approximation to the Dirac delta function on the circle, centered at
`t` (regarded as a point of the circle) and converging to the Dirac delta function as `Œ∑ ‚Üí 0`.

TODO: When constructing these, we can just do `t = 0` case and then translate. -/
def delta_mollifier (Œ∑ t : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù := sorry

variables {Œ∑ : ‚Ñù} (hŒ∑ : Œ∑ ‚â† 0) (t : ‚Ñù)
include hŒ∑

lemma delta_mollifier_periodic : periodic (delta_mollifier Œ∑ t) 1 := sorry

lemma delta_mollifier_pos (s : ‚Ñù) : 0 < delta_mollifier Œ∑ t s := sorry

-- TODO Maybe just drop this, we'll probably only ever need `delta_mollifier_smooth'`.
lemma delta_mollifier_smooth : ùíû ‚àû ‚Üø(delta_mollifier Œ∑) := sorry

lemma delta_mollifier_smooth' : ùíû ‚àû (delta_mollifier Œ∑ t) :=
(delta_mollifier_smooth hŒ∑).comp (cont_diff_prod_mk t)

@[simp] lemma delta_mollifier_integral_eq_one : ‚à´ s in 0..1, delta_mollifier Œ∑ t s = 1 := sorry

omit hŒ∑

variables {F : Type*} [normed_group F] [normed_space ‚Ñù F] [finite_dimensional ‚Ñù F]
variables [measurable_space F] [borel_space F]

-- TODO Relocate to `src/loops/basic.lean` if this turns out to be useful.
instance loop.has_norm : has_norm (loop F) := ‚ü®Œª Œ≥, ‚®Ü t, ‚à•Œ≥ t‚à•‚ü©

-- TODO Come up with a better name for this.
def loop.mollify (Œ≥ : loop F) (Œ∑ t : ‚Ñù) : F :=
if Œ∑ = 0 then Œ≥ t else ‚à´ s in 0..1, delta_mollifier Œ∑ t s ‚Ä¢ Œ≥ s

lemma loop.mollify_eq_of_ne_zero (Œ≥ : loop F) (Œ∑ t : ‚Ñù) (hŒ∑ : Œ∑ ‚â† 0) :
  Œ≥.mollify Œ∑ t = ‚à´ s in 0..1, delta_mollifier Œ∑ t s ‚Ä¢ Œ≥ s :=
if_neg hŒ∑

/-- I doubt this is exactly the right property and I think we may be able to get away with something
a good deal weaker. The plan is to try finishing the reparametrization lemma and see what
convergence property it requires. -/
lemma loop.eval_at_sub_mollify_lt {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÄ·∂† Œ∑ in ùìù 0, ‚àÄ (Œ≥ : loop F) (hf : continuous Œ≥), ‚à•Œ≥ t - Œ≥.mollify Œ∑ t‚à• < Œµ * ‚à•Œ≥‚à• :=
sorry
