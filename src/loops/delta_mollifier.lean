import notations
import loops.basic
import measure_theory.integral.interval_integral

noncomputable theory
open set function
open_locale topological_space

/-- A stictly positive, smooth approximation to the Dirac delta function on the circle, centered at
`t` (regarded as a point of the circle) and converging to the Dirac delta function as `Œ∑ ‚Üí 0`.

TODO: When constructing these, we can just do `t = 0` case and then translate. -/
def delta_mollifier (Œ∑ t : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù := sorry

variables {Œ∑ : ‚Ñù} (hŒ∑ : Œ∑ ‚â† 0) (t : ‚Ñù)
include hŒ∑

lemma delta_mollifier_periodic : periodic (delta_mollifier Œ∑ t) 1 := sorry

lemma delta_mollifier_pos (s : ‚Ñù) : 0 < delta_mollifier Œ∑ t s := sorry

-- TODO Maybe just drop this, we'll probably only ever need `delta_mollifier_smooth'`.
lemma delta_mollifier_smooth : ùíû ‚àû ‚Üø(delta_mollifier Œ∑) := sorry

lemma delta_mollifier_smooth' : ùíû ‚àû (delta_mollifier Œ∑ t) :=
(delta_mollifier_smooth hŒ∑).comp (cont_diff_prod_mk t)

@[simp] lemma delta_mollifier_integral_eq_one : ‚à´ s in 0..1, delta_mollifier Œ∑ t s = 1 := sorry

omit hŒ∑

variables {F : Type*} [normed_group F] [normed_space ‚Ñù F] [finite_dimensional ‚Ñù F]
variables [measurable_space F] [borel_space F]

-- TODO Relocate to `src/loops/basic.lean` if this turns out to be useful.
instance loop.has_norm : has_norm (loop F) := ‚ü®Œª Œ≥, ‚®Ü t, ‚à•Œ≥ t‚à•‚ü©

-- TODO Come up with a better name for this.
def loop.mollify (Œ≥ : loop F) (Œ∑ t : ‚Ñù) : F :=
if Œ∑ = 0 then Œ≥ t else ‚à´ s in 0..1, delta_mollifier Œ∑ t s ‚Ä¢ Œ≥ s

lemma loop.mollify_eq_of_ne_zero (Œ≥ : loop F) (Œ∑ t : ‚Ñù) (hŒ∑ : Œ∑ ‚â† 0) :
  Œ≥.mollify Œ∑ t = ‚à´ s in 0..1, delta_mollifier Œ∑ t s ‚Ä¢ Œ≥ s :=
if_neg hŒ∑

/-- I doubt this is exactly the right property and I think we may be able to get away with something
a good deal weaker. The plan is to try finishing the reparametrization lemma and see what
convergence property it requires. -/
lemma loop.eval_at_sub_mollify_lt {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÄ·∂† Œ∑ in ùìù 0, ‚àÄ (Œ≥ : loop F) (hf : continuous Œ≥), ‚à•Œ≥ t - Œ≥.mollify Œ∑ t‚à• < Œµ * ‚à•Œ≥‚à• :=
sorry
