import loops.basic
import tactic.fin_cases
import topology.metric_space.emetric_paracompact
import topology.shrinking_lemma

import to_mathlib.topology.nhds_set

/-!
# Surrounding families of loops
-/

namespace filter
lemma diff_mem {Œ±} {f : filter Œ±} {s t : set Œ±} (hs : s ‚àà f) (ht : t·∂ú ‚àà f) : s \ t ‚àà f :=
inter_mem hs ht
end filter

open set function finite_dimensional int prod function path filter topological_space
open_locale classical topological_space unit_interval big_operators

namespace is_path_connected
-- we redo `exists_path_through_family` to use `def`s

variables {X : Type*} [topological_space X] {F : set X}

/-- An arbitrary path joining `x` and `y` in `F`. -/
noncomputable def some_path (hF : is_path_connected F) {x y : X} (hx : x ‚àà F) (hy : y ‚àà F) :
  path x y :=
(hF.joined_in x y hx hy).some_path

lemma some_path_mem (hF : is_path_connected F) {x y : X} (hx : x ‚àà F) (hy : y ‚àà F)
  (t : I) : hF.some_path hx hy t ‚àà F :=
joined_in.some_path_mem _ t

lemma range_some_path_subset (hF : is_path_connected F) {x y : X} (hx : x ‚àà F) (hy : y ‚àà F) :
  range (hF.some_path hx hy) ‚äÜ F :=
by { rintro _ ‚ü®t, rfl‚ü©, apply some_path_mem }

/-- A path through `p 0`, ..., `p n`. Usually this is used with `n := m`. -/
noncomputable def path_through (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) : ‚àÄ n : ‚Ñï, path (p 0) (p n)
| 0     := path.refl (p 0)
| (n+1) := (path_through n).trans $ hF.some_path (hp _) (hp _)

attribute [simp] path.trans_range
lemma range_path_through_subset (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) : ‚àÄ {n : ‚Ñï}, range (hF.path_through hp n) ‚äÜ F
| 0     := by simp [path_through, hp]
| (n+1) := by simp [path_through, hp, range_some_path_subset, @range_path_through_subset n]

lemma mem_range_path_through' (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) {i n : ‚Ñï} (h : i ‚â§ n) : p i ‚àà range (hF.path_through hp n) :=
begin
  induction h with n hn ih,
  { exact ‚ü®1, by simp‚ü© },
  { simp only [path_through, path.trans_range, mem_union, ih, true_or] }
end

lemma mem_range_path_through (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) {i : fin (m+1)} : p i ‚àà range (hF.path_through hp m) :=
by { convert hF.mem_range_path_through' hp (nat.le_of_lt_succ i.2), simp }

end is_path_connected

noncomputable theory

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          {F : Type*} [normed_group F] [normed_space ‚Ñù F]

local notation `d` := finrank ‚Ñù F
local notation `smooth_on` := times_cont_diff_on ‚Ñù ‚ä§

/-- `f` is smooth at `x` if `f` is smooth on some neighborhood of `x`. -/
def smooth_at (f : E ‚Üí F) (x : E) : Prop := ‚àÉ s ‚àà ùìù x, smooth_on f s

section surrounding_points

local notation `Œπ` := fin (d + 1)

-- def:surrounds_points
/-- `p` is a collection of points surrounding `f` with weights `w` (that are positive and sum to 1)
if the weighted average of the points `p` is `f` and the points `p` form an affine basis of the
space. -/
structure surrounding_pts (f : F) (p : Œπ ‚Üí F) (w : Œπ ‚Üí ‚Ñù) : Prop :=
(indep : affine_independent ‚Ñù p)
(w_pos : ‚àÄ i, 0 < w i)
(w_sum : ‚àë i, w i = 1)
(avg : ‚àë i, w i ‚Ä¢ p i = f)

lemma surrounding_pts.tot [finite_dimensional ‚Ñù F]
  {f : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù} (h : surrounding_pts f p w) :
  affine_span ‚Ñù (range p) = ‚ä§ :=
h.indep.affine_span_eq_top_iff_card_eq_finrank_add_one.mpr (fintype.card_fin _)

lemma surrounding_pts.coord_eq_w [finite_dimensional ‚Ñù F]
  {f : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù} (h : surrounding_pts f p w) :
  (‚ü®p, h.indep, h.tot‚ü© : affine_basis Œπ ‚Ñù F).coords f = w :=
begin
  let b : affine_basis Œπ ‚Ñù F := ‚ü®p, h.indep, h.tot‚ü©,
  change b.coords f = w,
  ext i,
  rw [‚Üê h.avg, ‚Üê finset.univ.affine_combination_eq_linear_combination _ w h.w_sum, affine_basis.coords_apply],
  exact affine_basis.coord_apply_combination_of_mem _ (finset.mem_univ i) h.w_sum,
end

/-- `f` is surrounded by a set `s` if there is an affine basis `p` in `s` with weighted average `f`.
-/
def surrounded (f : F) (s : set F) : Prop :=
‚àÉ p w, surrounding_pts f p w ‚àß ‚àÄ i, p i ‚àà s

lemma surrounded_iff_mem_interior_convex_hull_aff_basis [finite_dimensional ‚Ñù F]
  {f : F} {s : set F} :
  surrounded f s ‚Üî ‚àÉ (b : set F)
                     (h‚ÇÄ : b ‚äÜ s)
                     (h‚ÇÅ : affine_independent ‚Ñù (coe : b ‚Üí F))
                     (h‚ÇÇ : affine_span ‚Ñù b = ‚ä§),
                     f ‚àà interior (convex_hull ‚Ñù b) :=
begin
  split,
  { rintros ‚ü®p, w, ‚ü®‚ü®indep, w_pos, w_sum, rfl‚ü©, h_mem‚ü©‚ü©,
    have h_tot : affine_span ‚Ñù (range p) = ‚ä§ :=
      indep.affine_span_eq_top_iff_card_eq_finrank_add_one.mpr (fintype.card_fin _),
    refine ‚ü®range p, range_subset_iff.mpr h_mem, indep.range, h_tot, _‚ü©,
    let basis : affine_basis Œπ ‚Ñù F := ‚ü®p, indep, h_tot‚ü©,
    rw interior_convex_hull_aff_basis basis,
    intros i,
    rw [‚Üê finset.affine_combination_eq_linear_combination _ _ _ w_sum,
      basis.coord_apply_combination_of_mem (finset.mem_univ i) w_sum],
    exact w_pos i, },
  { rintros ‚ü®b, h‚ÇÄ, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©,
    haveI : fintype b := (finite_of_fin_dim_affine_independent ‚Ñù h‚ÇÅ).fintype,
    have hb : fintype.card b = d + 1,
    { rw [‚Üê h‚ÇÅ.affine_span_eq_top_iff_card_eq_finrank_add_one, subtype.range_coe_subtype,
        set_of_mem_eq, h‚ÇÇ], },
    let p := (coe : _ ‚Üí F) ‚àò (fintype.equiv_fin_of_card_eq hb).symm,
    have hp : b = range p,
    { ext x,
      exact ‚ü®by { intros h, use fintype.equiv_fin_of_card_eq hb ‚ü®x, h‚ü©, simp [p], },
             by { rintros ‚ü®y, rfl‚ü©, apply subtype.coe_prop, }‚ü©, },
    rw hp at h‚ÇÄ h‚ÇÇ h‚ÇÉ,
    replace h‚ÇÅ : affine_independent ‚Ñù p :=
      h‚ÇÅ.comp_embedding (fintype.equiv_fin_of_card_eq hb).symm.to_embedding,
    let basis : affine_basis Œπ ‚Ñù F := ‚ü®_, h‚ÇÅ, h‚ÇÇ‚ü©,
    rw [interior_convex_hull_aff_basis basis, mem_set_of_eq] at h‚ÇÉ,
    refine ‚ü®p, Œª i, basis.coord i f, ‚ü®h‚ÇÅ, h‚ÇÉ, _, _‚ü©, Œª i, h‚ÇÄ (mem_range_self i)‚ü©,
    { exact basis.sum_coord_apply_eq_one f, },
    { rw [‚Üê finset.univ.affine_combination_eq_linear_combination p _
        (basis.sum_coord_apply_eq_one f),
        basis.affine_combination_coord_eq_self] } }
end

--- lem:int_cvx
lemma surrounded_of_convex_hull [finite_dimensional ‚Ñù F]
  {f : F} {s : set F} (hs : is_open s) (hsf : f ‚àà convex_hull ‚Ñù s) :
  surrounded f s :=
begin
  rw surrounded_iff_mem_interior_convex_hull_aff_basis,
  obtain ‚ü®t, hts, hai, hf‚ü© :=
    (by simpa only [exists_prop, mem_Union] using convex_hull_eq_union.subst hsf :
    ‚àÉ (t : finset F), (t : set F) ‚äÜ s ‚àß affine_independent ‚Ñù (coe : t ‚Üí F) ‚àß
      f ‚àà convex_hull ‚Ñù (t : set F)),
  have htne : (t : set F).nonempty := (@convex_hull_nonempty_iff ‚Ñù _ _ _ _ _).mp ‚ü®f, hf‚ü©,
  obtain ‚ü®b, hb‚ÇÅ, hb‚ÇÇ, hb‚ÇÉ, hb‚ÇÑ‚ü© :=
    exists_subset_affine_independent_span_eq_top_of_open hs hts htne hai,
  have hb‚ÇÄ : b.finite, { exact finite_of_fin_dim_affine_independent ‚Ñù hb‚ÇÉ, },
  obtain ‚ü®c, hc‚ü© := interior_convex_hull_nonempty_iff_aff_span_eq_top.mpr hb‚ÇÑ,
  obtain ‚ü®Œµ, hŒµ, hcs‚ü© := homothety_image_subset_of_open c hs hb‚ÇÇ hb‚ÇÄ,
  have hbŒµ := convex.subset_interior_image_homothety_of_one_lt
    (convex_convex_hull ‚Ñù _) hc (1 + Œµ) (lt_add_of_pos_right 1 hŒµ),
  rw affine_map.image_convex_hull at hbŒµ,
  let t : units ‚Ñù := units.mk0 (1 + Œµ) (by linarith),
  refine ‚ü®affine_map.homothety c (t : ‚Ñù) '' b, hcs, _, _, hbŒµ (convex_hull_mono hb‚ÇÅ hf)‚ü©,
  { rwa (affine_equiv.homothety_units_mul_hom c t).affine_independent_set_of_eq_iff, },
  { exact (affine_equiv.homothety_units_mul_hom c t).span_eq_top_iff.mp hb‚ÇÑ, },
end

-- lem:smooth_barycentric_coord
lemma smooth_surrounding [finite_dimensional ‚Ñù F] {x : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù}
  (h : surrounding_pts x p w) :
  ‚àÉ W : F ‚Üí (Œπ ‚Üí F) ‚Üí (Œπ ‚Üí ‚Ñù),
  ‚àÄ·∂† (yq : F √ó (Œπ ‚Üí F)) in ùìù (x, p), smooth_at (uncurry W) yq ‚àß
                             (‚àÄ i, 0 < W yq.1 yq.2 i) ‚àß
                             ‚àë i, W yq.1 yq.2 i = 1 ‚àß
                             ‚àë i, W yq.1 yq.2 i ‚Ä¢ yq.2 i = yq.1 :=
begin
  classical,
  use eval_barycentric_coords Œπ ‚Ñù F,
  let V : set (Œπ ‚Üí ‚Ñù) := set.pi set.univ (Œª i, Ioi (0 : ‚Ñù)),
  let W' : F √ó (Œπ ‚Üí F) ‚Üí (Œπ ‚Üí ‚Ñù) := uncurry (eval_barycentric_coords Œπ ‚Ñù F),
  let A : set (F √ó (Œπ ‚Üí F)) := set.prod univ (affine_bases Œπ ‚Ñù F),
  let U : set (F √ó (Œπ ‚Üí F)) := A ‚à© (W' ‚Åª¬π' V),
  have hŒπ : fintype.card Œπ = d + 1 := fintype.card_fin _,
  have hp : p ‚àà affine_bases Œπ ‚Ñù F := ‚ü®h.indep, h.tot‚ü©,
  have hV : is_open V := is_open_set_pi finite_univ (Œª _ _, is_open_Ioi),
  have hW' : continuous_on W' A := (smooth_barycentric Œπ ‚Ñù F hŒπ).continuous_on,
  have hxp : W' (x, p) ‚àà V, { simp [W', hp, h.coord_eq_w, h.w_pos], },
  have hA : is_open A,
  { simp only [A, affine_bases_findim Œπ ‚Ñù F hŒπ],
    exact is_open_univ.prod (is_open_set_of_affine_independent ‚Ñù F), },
  have hU‚ÇÅ : U ‚äÜ A := set.inter_subset_left _ _,
  have hU‚ÇÇ : is_open U := hW'.preimage_open_of_open hA hV,
  have hU‚ÇÉ : U ‚àà ùìù (x, p) :=
    mem_nhds_iff.mpr ‚ü®U, le_refl U, hU‚ÇÇ, set.mem_inter (by simp [hp]) (mem_preimage.mpr hxp)‚ü©,
  apply filter.eventually_of_mem hU‚ÇÉ,
  rintros ‚ü®y, q‚ü© hyq,
  have hq : q ‚àà affine_bases Œπ ‚Ñù F, { simpa using hU‚ÇÅ hyq, },
  have hyq' : (y, q) ‚àà W' ‚Åª¬π' V := (set.inter_subset_right _ _) hyq,
  refine ‚ü®‚ü®U, mem_nhds_iff.mpr ‚ü®U, le_refl U, hU‚ÇÇ, hyq‚ü©, (smooth_barycentric Œπ ‚Ñù F hŒπ).mono hU‚ÇÅ‚ü©, _, _, _‚ü©,
  { simpa using hyq', },
  { simp [hq], },
  { simp [hq, affine_basis.linear_combination_coord_eq_self _ y], },
end

lemma smooth_surrounding_pts [finite_dimensional ‚Ñù F] {x : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù}
  (h : surrounding_pts x p w) :
  ‚àÉ W : F ‚Üí (Œπ ‚Üí F) ‚Üí (Œπ ‚Üí ‚Ñù),
  ‚àÄ·∂† (yq : F √ó (Œπ ‚Üí F)) in ùìù (x, p), smooth_at (uncurry W) yq ‚àß
    surrounding_pts yq.1 yq.2 (W yq.1 yq.2) :=
begin
  refine exists_imp_exists (Œª W hW, _) (smooth_surrounding h),
  rw [nhds_prod_eq] at hW ‚ä¢,
  have := (is_open.eventually_mem (is_open_set_of_affine_independent ‚Ñù F) h.indep).prod_inr (ùìù x),
  filter_upwards [hW, this], rintro ‚ü®y, q‚ü© ‚ü®hW, h2W, h3W, hq‚ü© h2q,
  exact ‚ü®hW, h2q, h2W, h3W, hq‚ü©
end

end surrounding_points


/-- A loop `Œ≥` surrounds a point `x` if `x` is surrounded by values of `Œ≥`. -/
def loop.surrounds (Œ≥ : loop F) (x : F) : Prop :=
  ‚àÉ t w : fin (d + 1) ‚Üí ‚Ñù, surrounding_pts x (Œ≥ ‚àò t) w

lemma loop.surrounds_iff_range_subset_range (Œ≥ : loop F) (x : F) :
  Œ≥.surrounds x ‚Üî ‚àÉ (p : fin (d + 1) ‚Üí F) (w : fin (d + 1) ‚Üí ‚Ñù),
  surrounding_pts x p w ‚àß range p ‚äÜ range Œ≥ :=
begin
  split,
  { exact Œª ‚ü®t, w, h‚ü©, ‚ü®(Œ≥ ‚àò t), w, h, range_comp_subset_range _ _‚ü© },
  { rintros ‚ü®p, w, h‚ÇÄ, h‚ÇÅ‚ü©,
    rw range_subset_iff at h‚ÇÅ,
    choose t ht using h‚ÇÅ,
    have hpt : Œ≥ ‚àò t = p := funext ht,
    exact ‚ü®t, w, hpt.symm ‚ñ∏ h‚ÇÄ‚ü© }
end

lemma loop.surrounds.mono {Œ≥ Œ≥' : loop F} {x : F} (h : Œ≥.surrounds x)
  (h2 : range Œ≥ ‚äÜ range Œ≥') : Œ≥'.surrounds x :=
begin
  revert h, simp_rw [loop.surrounds_iff_range_subset_range],
  refine exists_imp_exists (Œª t, _),
  refine exists_imp_exists (Œª w, _),
  exact and.imp_right (Œª h3, subset.trans h3 h2),
end

section surrounding_loop

variables {O : set F} {f b : F} {p : fin (d + 1) ‚Üí F}
  (O_conn : is_path_connected O)
  (hp : ‚àÄ i, p i ‚àà O)
  (hb : b ‚àà O)

/-- witness of `surrounding_loop_of_convex_hull` -/
def surrounding_loop : ‚Ñù ‚Üí loop F :=
loop.round_trip_family $ (O_conn.some_path hb (hp 0)).trans $ O_conn.path_through hp d

variables {O_conn hp hb}

/-- TODO: continuity note -/
lemma continuous_surrounding_loop : continuous ‚Üø(surrounding_loop O_conn hp hb) :=
loop.round_trip_family_continuous

@[simp] lemma surrounding_loop_zero_right (t : ‚Ñù) : surrounding_loop O_conn hp hb t 0 = b :=
loop.round_trip_family_based_at t

@[simp] lemma surrounding_loop_zero_left (s : ‚Ñù) : surrounding_loop O_conn hp hb 0 s = b :=
by { simp only [surrounding_loop, loop.round_trip_family_zero], refl }

lemma surrounding_loop_mem (t s : ‚Ñù) : surrounding_loop O_conn hp hb t s ‚àà O :=
begin
  revert s,
  rw ‚Üê range_subset_iff,
  simp only [surrounding_loop, loop.round_trip_family, path.trans_range, loop.round_trip_range,
    cast_coe],
  refine subset.trans (truncate_range _) _,
  simp only [trans_range, union_subset_iff, O_conn.range_some_path_subset,
    O_conn.range_path_through_subset, true_and]
end

lemma surrounding_loop_surrounds {w : fin (d + 1) ‚Üí ‚Ñù} (h : surrounding_pts f p w) :
  (surrounding_loop O_conn hp hb 1).surrounds f :=
begin
  rw loop.surrounds_iff_range_subset_range,
  refine ‚ü®p, w, h, _‚ü©,
  simp only [surrounding_loop, loop.round_trip_family_one, loop.round_trip_range, trans_range,
    range_subset_iff, mem_union, O_conn.mem_range_path_through, or_true, forall_true_iff]
end

lemma surrounding_loop_of_convex_hull [finite_dimensional ‚Ñù F] {f b : F} {O : set F}
  (O_op : is_open O) (O_conn : is_connected O)
  (hsf : f ‚àà convex_hull ‚Ñù O) (hb : b ‚àà O) :
  ‚àÉ Œ≥ : ‚Ñù ‚Üí loop F, continuous ‚ÜøŒ≥ ‚àß
                    (‚àÄ t, Œ≥ t 0 = b) ‚àß
                    (‚àÄ s, Œ≥ 0 s = b) ‚àß
                    (‚àÄ t s, Œ≥ t s ‚àà O) ‚àß
                    (Œ≥ 1).surrounds f :=
begin
  rcases surrounded_of_convex_hull O_op hsf with ‚ü®p, w, h, hp‚ü©,
  rw ‚Üê O_op.is_connected_iff_is_path_connected at O_conn,
  rcases (O_conn.exists_path_through_family p hp) with ‚ü®Œ©‚ÇÄ, hŒ©‚ÇÄ‚ü©,
  rcases O_conn.joined_in b (p 0) hb (hp 0) with ‚ü®Œ©‚ÇÅ, hŒ©‚ÇÅ‚ü©,
  exact ‚ü®surrounding_loop O_conn hp hb, continuous_surrounding_loop, surrounding_loop_zero_right,
    surrounding_loop_zero_left, surrounding_loop_mem, surrounding_loop_surrounds h‚ü©
end

end surrounding_loop

/-- `Œ≥` forms a family of loops surrounding `g` with base `b`.
In contrast to the notes we assume that `base` and `t‚ÇÄ` hold universally. -/
structure surrounding_family (g b : E ‚Üí F) (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U : set E) : Prop :=
(base : ‚àÄ (x : E) (t : ‚Ñù), Œ≥ x t 0 = b x)
(t‚ÇÄ : ‚àÄ (x : E) (s : ‚Ñù), Œ≥ x 0 s = b x)
(surrounds : ‚àÄ x ‚àà U, (Œ≥ x 1).surrounds $ g x)
(cont : continuous ‚ÜøŒ≥)

/-- `Œ≥` forms a family of loops surrounding `g` with base `b` in `Œ©`. -/
structure surrounding_family_in (g b : E ‚Üí F) (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U : set E) (Œ© : set $ E √ó F)
  extends surrounding_family g b Œ≥ U : Prop :=
(val_in' : ‚àÄ (x ‚àà U) (t ‚àà I) (s ‚àà I), (x, Œ≥ x t s) ‚àà Œ©)

namespace surrounding_family

variables {g b : E ‚Üí F} {Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F} {U : set E}

protected lemma one (h : surrounding_family g b Œ≥ U) (x : E) (t : ‚Ñù) : Œ≥ x t 1 = b x :=
by rw [loop.one, h.base]

protected lemma continuous_b (h : surrounding_family g b Œ≥ U) : continuous b :=
by { refine continuous.congr _ (Œª x, h.base x 0),
     exact h.cont.comp (continuous_id.prod_mk
      (continuous_const : continuous (Œª _, ((0, 0) : ‚Ñù √ó ‚Ñù)))) }

protected lemma change_set (h : surrounding_family g b Œ≥ U) {V : set E}
  (hV : ‚àÄ x ‚àà V \ U, (Œ≥ x 1).surrounds $ g x) :
  surrounding_family g b Œ≥ V :=
begin
  refine ‚ü®h.base, h.t‚ÇÄ, Œª x hx, _, h.cont‚ü©,
  by_cases h2x : x ‚àà U, exact h.surrounds x h2x, exact hV x ‚ü®hx, h2x‚ü©
end

protected lemma mono (h : surrounding_family g b Œ≥ U) {V : set E} (hVU : V ‚äÜ U) :
  surrounding_family g b Œ≥ V :=
‚ü®h.base, h.t‚ÇÄ, Œª x hx, h.surrounds x (hVU hx), h.cont‚ü©

/-- A surrounding family induces a family of paths from `b x` to `b x`.
Currently I(Floris) defined the concatenation we need on `path`, so we need to turn a surrounding
family into the family of paths. -/
@[simps]
protected def path (h : surrounding_family g b Œ≥ U) (x : E) (t : ‚Ñù) :
  path (b x) (b x) :=
{ to_fun := Œª s, Œ≥ x t s,
  continuous_to_fun := begin
    refine continuous.comp _ continuous_subtype_coe,
    refine loop.continuous_of_family _ t,
    refine loop.continuous_of_family_step h.cont x
  end,
  source' := h.base x t,
  target' := h.one x t }

lemma continuous_path {X : Type*} [topological_space X] (h : surrounding_family g b Œ≥ U)
  {t : X ‚Üí ‚Ñù} {f : X ‚Üí E} {s : X ‚Üí I} (hf : continuous f) (ht : continuous t)
  (hs : continuous s) : continuous (Œª x, h.path (f x) (t x) (s x)) :=
h.cont.comp (hf.prod_mk $ ht.prod_mk hs.subtype_coe)

@[simp]
lemma path_extend_fract (h : surrounding_family g b Œ≥ U) (t s : ‚Ñù) (x : E) :
  (h.path x t).extend (fract s) = Œ≥ x t s :=
by { rw [extend_extends _ (unit_interval.fract_mem s), ‚Üê loop.fract_eq], refl }

@[simp]
lemma range_path (h : surrounding_family g b Œ≥ U) (x : E) (t : ‚Ñù) :
  range (h.path x t) = range (Œ≥ x t) :=
by simp only [path.coe_mk, surrounding_family.path, range_comp _ coe, subtype.range_coe,
    loop.range_eq_image]

@[simp]
lemma path_t‚ÇÄ (h : surrounding_family g b Œ≥ U) (x : E) : h.path x 0 = refl (b x) :=
by { ext t, exact h.t‚ÇÄ x t }

end surrounding_family

variables {g b : E ‚Üí F} {U K : set E} {Œ© : set (E √ó F)}

namespace surrounding_family_in

variables {Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F}

/-- Abbreviation for `to_surrounding_family` -/
lemma to_sf (h : surrounding_family_in g b Œ≥ U Œ©) : surrounding_family g b Œ≥ U :=
h.to_surrounding_family

lemma val_in (h : surrounding_family_in g b Œ≥ U Œ©) {x : E} (hx : x ‚àà U) {t : ‚Ñù} (ht : t ‚àà I)
  {s : ‚Ñù} : (x, Œ≥ x t s) ‚àà Œ© :=
by { rw [‚Üê loop.fract_eq], exact h.val_in' x hx t ht (fract s) (unit_interval.fract_mem s) }

protected lemma mono (h : surrounding_family_in g b Œ≥ U Œ©) {V : set E} (hVU : V ‚äÜ U) :
  surrounding_family_in g b Œ≥ V Œ© :=
‚ü®h.to_sf.mono hVU, Œª x hx, h.val_in' x (hVU hx)‚ü©

end surrounding_family_in

section local_loops
variables {x‚ÇÄ : E} (hŒ©_conn : is_path_connected (prod.mk x‚ÇÄ ‚Åª¬π' Œ©))
  (hb_in : (x‚ÇÄ, b x‚ÇÄ) ‚àà Œ©)
  {p : fin (d + 1) ‚Üí F}
  (hp : ‚àÄ i, p i ‚àà prod.mk x‚ÇÄ ‚Åª¬π' Œ©)

/-- The witness of `local_loops`. -/
def local_loops_def (x : E) (t : ‚Ñù) : loop F :=
(surrounding_loop hŒ©_conn hp hb_in t).shift (b x - b x‚ÇÄ)

/--
Note: The conditions in this lemma are currently a bit weaker than the ones mentioned in the
blueprint.
TODO: use `local_loops_def`
-/
lemma local_loops [finite_dimensional ‚Ñù F]
  {x‚ÇÄ : E}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© fst ‚Åª¬π' U))
  (hŒ©_conn : is_connected (prod.mk x‚ÇÄ ‚Åª¬π' Œ©))
  (hg : continuous_at g x‚ÇÄ) (hb : continuous b)
  (hb_in : (x‚ÇÄ, b x‚ÇÄ) ‚àà Œ©)
  (hconv : g x‚ÇÄ ‚àà convex_hull ‚Ñù (prod.mk x‚ÇÄ ‚Åª¬π' Œ©)) :
  ‚àÉ (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U ‚àà ùìù x‚ÇÄ), surrounding_family_in g b Œ≥ U Œ© :=
begin
  have hbx‚ÇÄ : continuous_at b x‚ÇÄ := hb.continuous_at,
  have hŒ©_op_x‚ÇÄ : is_open (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) := is_open_slice_of_is_open_over hŒ©_op,
  rcases surrounding_loop_of_convex_hull hŒ©_op_x‚ÇÄ hŒ©_conn hconv hb_in with
    ‚ü®Œ≥, h1Œ≥, h2Œ≥, h3Œ≥, h4Œ≥, h5Œ≥‚ü©,
  let Œ¥ : E ‚Üí ‚Ñù ‚Üí loop F := Œª x t, (Œ≥ t).shift (b x - b x‚ÇÄ),
  have hŒ¥ : continuous ‚ÜøŒ¥,
  { dsimp only [Œ¥, has_uncurry.uncurry, loop.shift_apply],
    refine (h1Œ≥.comp continuous_snd).add _,
    refine continuous.sub _ continuous_const,
    exact hb.comp continuous_fst },
  have hŒ¥x‚ÇÄ : ‚àÄ t s, Œ¥ x‚ÇÄ t s = Œ≥ t s,
  { intros t s, simp only [add_zero, loop.shift_apply, sub_self] },
  have hŒ¥s0 : ‚àÄ x t, Œ¥ x t 0 = b x,
  { intros x t, simp only [h2Œ≥, loop.shift_apply, add_sub_cancel'_right] },
  have hŒ¥t0 : ‚àÄ x s, Œ¥ x 0 s = b x,
  { intros x t, simp only [h3Œ≥, loop.shift_apply, add_sub_cancel'_right] },
  have hŒ¥Œ© : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ (t ‚àà I) (s ‚àà I), (x, Œ¥ x t s) ‚àà Œ©,
  { rcases hŒ©_op with ‚ü®U, hUx‚ÇÄ, hU‚ü©,
    -- todo: this is nicer with `is_compact.eventually_forall_of_forall_eventually` twice, but then
    -- we need the continuity of `Œ¥` with the arguments reassociated differently.
    have : ‚àÄ·∂† (x : E) in ùìù x‚ÇÄ, ‚àÄ (ts : ‚Ñù √ó ‚Ñù), ts ‚àà set.prod I I ‚Üí (x, Œ¥ x ts.1 ts.2) ‚àà Œ©,
    { refine is_compact.eventually_forall_mem (is_compact_Icc.prod is_compact_Icc)
        (continuous_fst.prod_mk hŒ¥) _,
      rintro ‚ü®t, s‚ü© ‚ü®ht, hs‚ü©,
      rw [hŒ¥x‚ÇÄ],
      show Œ© ‚àà ùìù (x‚ÇÄ, Œ≥ t s),
      exact mem_nhds_iff.mpr
        ‚ü®_, inter_subset_left _ _, hU, ‚ü®h4Œ≥ t s, show x‚ÇÄ ‚àà U, from mem_of_mem_nhds hUx‚ÇÄ‚ü©‚ü© },
    refine this.mono _, intros x h t ht s hs, exact h (t, s) ‚ü®ht, hs‚ü© },
  have hŒ¥surr : ‚àÄ·∂† x in ùìù x‚ÇÄ, (Œ¥ x 1).surrounds (g x),
  { rcases h5Œ≥ with ‚ü®p, w, h‚ü©,
    obtain ‚ü®W, hW‚ü© := smooth_surrounding_pts h,
    let c : E ‚Üí F √ó (fin (d+1) ‚Üí F) := Œª x, (g x, Œ¥ x 1 ‚àò p),
    have hc : continuous_at c x‚ÇÄ := hg.prod
      (continuous_at_const.add $ (continuous_at_pi.2 (Œª _, hbx‚ÇÄ)).sub continuous_at_const),
    have hcx‚ÇÄ : c x‚ÇÄ = (g x‚ÇÄ, Œ≥ 1 ‚àò p),
    { simp only [c, hŒ¥x‚ÇÄ, function.comp, prod.mk.inj_iff, eq_self_iff_true, and_self] },
    rw [‚Üê hcx‚ÇÄ] at hW,
    filter_upwards [hc.eventually hW], rintro x ‚ü®hW, hx‚ü©,
    exact ‚ü®_, _, hx‚ü© },
  exact ‚ü®Œ¥, _, hŒ¥Œ©.and hŒ¥surr, ‚ü®‚ü®hŒ¥s0, hŒ¥t0, Œª x, and.right, hŒ¥‚ü©, Œª x, and.left‚ü©‚ü©
end

/-- A tiny reformulation of `local_loops` where the existing `U` is open. -/
lemma local_loops_open [finite_dimensional ‚Ñù F]
  {x‚ÇÄ : E}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© fst ‚Åª¬π' U))
  (hŒ©_conn : is_connected (prod.mk x‚ÇÄ ‚Åª¬π' Œ©))
  (hg : continuous_at g x‚ÇÄ) (hb : continuous b)
  (hb_in : (x‚ÇÄ, b x‚ÇÄ) ‚àà Œ©)
  (hconv : g x‚ÇÄ ‚àà convex_hull ‚Ñù (prod.mk x‚ÇÄ ‚Åª¬π' Œ©)) :
  ‚àÉ (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U : set E), is_open U ‚àß x‚ÇÄ ‚àà U ‚àß surrounding_family_in g b Œ≥ U Œ© :=
begin
  obtain ‚ü®Œ≥, U, hU, hŒ≥‚ü© := local_loops hŒ©_op hŒ©_conn hg hb hb_in hconv,
  obtain ‚ü®V, hVU, hV, hx‚ÇÄV‚ü© := mem_nhds_iff.mp hU,
  exact ‚ü®Œ≥, V, hV, hx‚ÇÄV, hŒ≥.mono hVU‚ü©
end

end local_loops

/-- Function used in `satisfied_or_refund`. Rename. -/
def œÅ (t : ‚Ñù) : ‚Ñù := max 0 $ min 1 $ 2 * (1 - t)

lemma continuous_œÅ : continuous œÅ :=
continuous_const.max $ continuous_const.min $ continuous_const.mul $ continuous_const.sub
  continuous_id

@[simp] lemma œÅ_eq_one_of_le {x : ‚Ñù} (h : x ‚â§ 1 / 2) : œÅ x = 1 :=
begin
  rw [œÅ, max_eq_right, min_eq_left],
  { linarith },
  rw [le_min_iff],
  suffices : x ‚â§ 1, { simpa },
  exact h.trans (by norm_num)
end

@[simp] lemma œÅ_eq_one_of_nonpos {x : ‚Ñù} (h : x ‚â§ 0) : œÅ x = 1 :=
œÅ_eq_one_of_le $ h.trans (by norm_num)

@[simp] lemma œÅ_eq_zero_of_le {x : ‚Ñù} (h : 1 ‚â§ x) : œÅ x = 0 :=
by { rw [œÅ, max_eq_left], refine (min_le_right _ _).trans (by linarith) }

@[simp] lemma œÅ_eq_one {x : ‚Ñù} : œÅ x = 1 ‚Üî x ‚â§ 1 / 2 :=
begin
  refine ‚ü®Œª h, _, œÅ_eq_one_of_le‚ü©,
  rw [œÅ] at h,
  have := ((max_choice _ _).resolve_left (by norm_num [h])).symm.trans h,
  rw [min_eq_left_iff] at this,
  linarith
end

@[simp] lemma œÅ_eq_zero {x : ‚Ñù} : œÅ x = 0 ‚Üî 1 ‚â§ x :=
begin
  refine ‚ü®Œª h, _, œÅ_eq_zero_of_le‚ü©,
  rw [œÅ, max_eq_left_iff, min_le_iff] at h,
  have := h.resolve_left (by norm_num),
  linarith
end

lemma œÅ_zero : œÅ 0 = 1 := by simp
lemma œÅ_half : œÅ 2‚Åª¬π = 1 := by simp
lemma œÅ_one : œÅ 1 = 0 := by simp
lemma œÅ_mem_I {x : ‚Ñù} : œÅ x ‚àà I :=
‚ü®le_max_left _ _, max_le zero_le_one $ min_le_left _ _‚ü©

section satisfied_or_refund

variables {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F}
variables (h‚ÇÄ : surrounding_family g b Œ≥‚ÇÄ U) (h‚ÇÅ : surrounding_family g b Œ≥‚ÇÅ U)

/-- The homotopy of surrounding families of loops used in lemma `satisfied_or_refund`.
  Having this as a separate definition is useful, because the construction actually gives some
  more information about the homotopy than the theorem `satisfied_or_refund` gives. -/
def sf_homotopy (œÑ : ‚Ñù) (x : E) (t : ‚Ñù) :=
loop.of_path $ (h‚ÇÄ.path x $ œÅ œÑ * t).strans (h‚ÇÅ.path x $ œÅ (1 - œÑ) * t)
  (set.proj_Icc 0 1 zero_le_one (1 - œÑ))

variables {h‚ÇÄ h‚ÇÅ}

@[simp] lemma sf_homotopy_zero : sf_homotopy h‚ÇÄ h‚ÇÅ 0 = Œ≥‚ÇÄ :=
begin
  ext x t s,
  simp only [sf_homotopy, one_mul, œÅ_eq_one_of_nonpos, surrounding_family.path_extend_fract,
    sub_zero, loop.of_path_apply, unit_interval.mk_one, proj_Icc_right, path.strans_one]
end

@[simp] lemma sf_homotopy_one : sf_homotopy h‚ÇÄ h‚ÇÅ 1 = Œ≥‚ÇÅ :=
begin
  ext x t s,
  simp only [sf_homotopy, path.strans_zero, unit_interval.mk_zero, one_mul, œÅ_eq_one_of_nonpos,
    surrounding_family.path_extend_fract, proj_Icc_left, loop.of_path_apply, sub_self]
end

lemma _root_.continuous.sf_homotopy {X : Type*} [uniform_space X]
  [separated_space X] [locally_compact_space X]
  {œÑ t s : X ‚Üí ‚Ñù} {f : X ‚Üí E} (hœÑ : continuous œÑ) (hf : continuous f) (ht : continuous t)
  (hs : continuous s) : continuous (Œª x, sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ x) (f x) (t x) (s x)) :=
begin
  refine continuous.of_path _ _ _ _ hs,
  refine continuous.path_strans _ _ _ _ _ continuous_snd,
  { refine h‚ÇÄ.continuous_path (hf.comp continuous_fst.fst) _ continuous_snd,
    exact (continuous_œÅ.comp $ hœÑ.comp continuous_fst.fst).mul (ht.comp continuous_fst.fst) },
  { refine h‚ÇÅ.continuous_path (hf.comp continuous_fst.fst) _ continuous_snd,
    refine (continuous_œÅ.comp _).mul (ht.comp continuous_fst.fst),
    exact continuous_const.sub (hœÑ.comp continuous_fst.fst) },
  { intros x s hs, simp only [proj_Icc_eq_zero, sub_nonpos] at hs,
    simp only [hs, h‚ÇÄ.t‚ÇÄ, zero_mul, surrounding_family.path_apply, œÅ_eq_zero_of_le] },
  { intros x s hs, simp only [proj_Icc_eq_one] at hs,
    simp only [hs, h‚ÇÅ.t‚ÇÄ, zero_mul, surrounding_family.path_apply, œÅ_eq_zero_of_le] },
  { refine continuous_proj_Icc.comp (continuous_const.sub (hœÑ.comp continuous_fst)) }
end

/-- In this lemmas and the lemmas below we add `finite_dimensional ‚Ñù E` so that we can conclude
 `locally_compact_space E`. -/
lemma continuous_sf_homotopy [finite_dimensional ‚Ñù E] : continuous ‚Üø(sf_homotopy h‚ÇÄ h‚ÇÅ) :=
continuous.sf_homotopy continuous_fst continuous_snd.fst continuous_snd.snd.fst
  continuous_snd.snd.snd

lemma surrounding_family_sf_homotopy [finite_dimensional ‚Ñù E] (œÑ : ‚Ñù) :
  surrounding_family g b (sf_homotopy h‚ÇÄ h‚ÇÅ œÑ) U :=
begin
  constructor,
  { intros x t, simp only [sf_homotopy, unit_interval.mk_zero, zero_le_one, extend_extends,
      path.source, loop.of_path_apply, left_mem_Icc, fract_zero] },
  { intros x s, simp only [sf_homotopy, surrounding_family.path_t‚ÇÄ, path.refl_strans_refl,
      path.refl_extend, loop.of_path_apply, mul_zero] },
  { intros x hx, cases le_total œÑ (1 / 2) with h h,
    { have : œÑ < 1 := h.trans_lt (by norm_num),
      refine (h‚ÇÄ.surrounds x hx).mono _,
      simp only [mul_one, loop.range_of_path, sf_homotopy],
      refine subset.trans (by simp only [surrounding_family.range_path, œÅ_eq_one_of_le, h])
        (subset_range_strans_left $ by simp [this]) },
    { have : 0 < œÑ := lt_of_lt_of_le (by norm_num) h,
      have h : 1 - œÑ ‚â§ 1 / 2, { rw [sub_le], convert h, norm_num },
      refine (h‚ÇÅ.surrounds x hx).mono _,
      simp only [mul_one, loop.range_of_path, sf_homotopy],
      refine subset.trans (by simp only [surrounding_family.range_path, œÅ_eq_one_of_le, h])
        (subset_range_strans_right $ by simp [this]) } },
  { exact continuous_const.sf_homotopy continuous_fst continuous_snd.fst continuous_snd.snd }
end

/-- A more precise version of `sf_homotopy_in`. -/
lemma sf_homotopy_in' {Œπ} (h‚ÇÄ : surrounding_family g b Œ≥‚ÇÄ U) (h‚ÇÅ : surrounding_family g b Œ≥‚ÇÅ U)
  (œÑ : Œπ ‚Üí ‚Ñù) (x : Œπ ‚Üí E) (i : Œπ) {V : set E} (hx : x i ‚àà V) {t : ‚Ñù} (ht : t ‚àà I) {s : ‚Ñù}
  (h_in‚ÇÄ : ‚àÄ i (hx : x i ‚àà V) (t ‚àà I) (s : ‚Ñù), œÑ i ‚â† 1 ‚Üí (x i, Œ≥‚ÇÄ (x i) t s) ‚àà Œ©)
  (h_in‚ÇÅ : ‚àÄ i (hx : x i ‚àà V) (t ‚àà I) (s : ‚Ñù), œÑ i ‚â† 0 ‚Üí (x i, Œ≥‚ÇÅ (x i) t s) ‚àà Œ©) :
  (x i, sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ i) (x i) t s) ‚àà Œ© :=
begin
  by_cases hœÑ0 : œÑ i = 0, { simp [hœÑ0], exact h_in‚ÇÄ i hx t ht s (by norm_num [hœÑ0]) },
  by_cases hœÑ1 : œÑ i = 1, { simp [hœÑ1], exact h_in‚ÇÅ i hx t ht s (by norm_num [hœÑ1]) },
  generalize hy : sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ i) (x i) t s = y,
  have h2y : y ‚àà range (sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ i) (x i) t), { rw [‚Üê hy], exact mem_range_self _},
  rw [sf_homotopy, loop.range_of_path] at h2y,
  replace h2y := range_strans_subset h2y,
  rcases h2y with ‚ü®s', rfl‚ü©|‚ü®s', rfl‚ü©,
  { exact h_in‚ÇÄ _ hx _ (unit_interval.mul_mem' œÅ_mem_I ht) _ hœÑ1 },
  { exact h_in‚ÇÅ _ hx _ (unit_interval.mul_mem' œÅ_mem_I ht) _ hœÑ0 }
end

lemma sf_homotopy_in (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U Œ©)
  (œÑ : ‚Ñù) ‚¶Éx : E‚¶Ñ (hx : x ‚àà U) {t : ‚Ñù} (ht : t ‚àà I) {s : ‚Ñù} :
  (x, sf_homotopy h‚ÇÄ.to_sf h‚ÇÅ.to_sf œÑ x t s) ‚àà Œ© :=
sf_homotopy_in' h‚ÇÄ.to_sf h‚ÇÅ.to_sf (Œª _, œÑ) (Œª _, x) () hx ht
  (Œª i hx t ht s _, h‚ÇÄ.val_in hx ht)
  (Œª i hx t ht s _, h‚ÇÅ.val_in hx ht)

lemma surrounding_family_in_sf_homotopy [finite_dimensional ‚Ñù E]
  (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U Œ©) (œÑ : ‚Ñù) :
  surrounding_family_in g b (sf_homotopy h‚ÇÄ.to_sf h‚ÇÅ.to_sf œÑ) U Œ© :=
‚ü®surrounding_family_sf_homotopy _, Œª x hx t ht s hs, sf_homotopy_in _ _ _ hx ht‚ü©

lemma satisfied_or_refund [finite_dimensional ‚Ñù E] {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F}
  (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U Œ©) :
  ‚àÉ Œ≥ : ‚Ñù ‚Üí E ‚Üí ‚Ñù ‚Üí loop F,
    (‚àÄ œÑ, surrounding_family_in g b (Œ≥ œÑ) U Œ©) ‚àß
    Œ≥ 0 = Œ≥‚ÇÄ ‚àß
    Œ≥ 1 = Œ≥‚ÇÅ ‚àß
    continuous ‚ÜøŒ≥ :=
‚ü®sf_homotopy h‚ÇÄ.to_sf h‚ÇÅ.to_sf, surrounding_family_in_sf_homotopy h‚ÇÄ h‚ÇÅ, sf_homotopy_zero,
  sf_homotopy_one, continuous_sf_homotopy‚ü©

end satisfied_or_refund

section extends_loops

variables [finite_dimensional ‚Ñù E] {U‚ÇÄ U‚ÇÅ K‚ÇÄ K‚ÇÅ : set E} (hU‚ÇÄ : is_open U‚ÇÄ)
  (hU‚ÇÅ : is_open U‚ÇÅ) (hK‚ÇÄ : is_compact K‚ÇÄ) (hK‚ÇÅ : is_compact K‚ÇÅ) (hKU‚ÇÄ : K‚ÇÄ ‚äÜ U‚ÇÄ) (hKU‚ÇÅ : K‚ÇÅ ‚äÜ U‚ÇÅ)
  {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F}
  (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U‚ÇÄ Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U‚ÇÅ Œ©)

include hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ

lemma extends_loops : ‚àÉ (U ‚àà nhds_set (K‚ÇÄ ‚à™ K‚ÇÅ)) (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F),
    surrounding_family_in g b Œ≥ U Œ© ‚àß
    ‚àÄ·∂† x in nhds_set K‚ÇÄ, Œ≥ x = Œ≥‚ÇÄ x :=
begin
  obtain ‚ü®V‚ÇÄ, hV‚ÇÄ, hKV‚ÇÄ, hVU‚ÇÄ, hcV‚ÇÄ‚ü© := exists_open_between_and_is_compact_closure hK‚ÇÄ hU‚ÇÄ hKU‚ÇÄ,
  let L‚ÇÅ := K‚ÇÅ \ U‚ÇÄ,
  have hL‚ÇÅ : is_compact L‚ÇÅ := hK‚ÇÅ.diff hU‚ÇÄ,
  have hV‚ÇÄL‚ÇÅ : disjoint (closure V‚ÇÄ) L‚ÇÅ := disjoint_diff.mono hVU‚ÇÄ subset.rfl,
  obtain ‚ü®V‚ÇÅ, hV‚ÇÅ, hLV‚ÇÅ, h2V‚ÇÅ, hcV‚ÇÅ‚ü© :=
  exists_open_between_and_is_compact_closure hL‚ÇÅ
    (hcV‚ÇÄ.is_closed.is_open_compl.inter hU‚ÇÅ)
    (subset_inter (disjoint_iff_subset_compl_left.mp hV‚ÇÄL‚ÇÅ) $ (diff_subset _ _).trans hKU‚ÇÅ),
  rw [subset_inter_iff, ‚Üê disjoint_iff_subset_compl_left] at h2V‚ÇÅ,
  rcases h2V‚ÇÅ with ‚ü®hV‚ÇÄ‚ÇÅ, hVU‚ÇÅ‚ü©,
  refine ‚ü®V‚ÇÄ ‚à™ (U‚ÇÅ ‚à© U‚ÇÄ) ‚à™ V‚ÇÅ, ((hV‚ÇÄ.union $ hU‚ÇÅ.inter hU‚ÇÄ).union hV‚ÇÅ).mem_nhds_set.mpr _, _‚ü©,
  { refine union_subset (hKV‚ÇÄ.trans $ (subset_union_left _ _).trans $ subset_union_left _ _) _,
    rw [‚Üê inter_union_diff K‚ÇÅ], exact
      union_subset_union ((inter_subset_inter_left _ hKU‚ÇÅ).trans $ subset_union_right _ _) hLV‚ÇÅ },
  obtain ‚ü®œÅ, h0œÅ, h1œÅ, hœÅ‚ü© :=
    exists_continuous_zero_one_of_closed hcV‚ÇÄ.is_closed hcV‚ÇÅ.is_closed hV‚ÇÄ‚ÇÅ,
  let h‚ÇÄ' : surrounding_family_in g b Œ≥‚ÇÄ (U‚ÇÅ ‚à© U‚ÇÄ) Œ© := h‚ÇÄ.mono (inter_subset_right _ _),
  let h‚ÇÅ' : surrounding_family_in g b Œ≥‚ÇÅ (U‚ÇÅ ‚à© U‚ÇÄ) Œ© := h‚ÇÅ.mono (inter_subset_left _ _),
  let Œ≥ := sf_homotopy h‚ÇÄ'.to_sf h‚ÇÅ'.to_sf,
  have hŒ≥ : ‚àÄ œÑ, surrounding_family_in g b (Œ≥ œÑ) (U‚ÇÅ ‚à© U‚ÇÄ) Œ© :=
    surrounding_family_in_sf_homotopy _ _,
  refine ‚ü®Œª x t, Œ≥ (œÅ x) x t, _, _‚ü©,
  { refine ‚ü®‚ü®Œª x, (hŒ≥ $ œÅ x).base x, Œª x, (hŒ≥ $ œÅ x).t‚ÇÄ x, _, _‚ü©, _‚ü©,
    { rintro x ((hx|hx)|hx),
      { simp_rw [Œ≥, h0œÅ (subset_closure hx), pi.zero_apply, sf_homotopy_zero,
          h‚ÇÄ.surrounds x (hVU‚ÇÄ $ subset_closure hx)] },
      { simp_rw [Œ≥, (hŒ≥ $ œÅ x).surrounds x hx] },
      { simp_rw [Œ≥, h1œÅ (subset_closure hx), pi.one_apply, sf_homotopy_one,
          h‚ÇÅ.surrounds x (hVU‚ÇÅ $ subset_closure hx)] } },
    { exact continuous.sf_homotopy (œÅ.continuous.comp continuous_fst) continuous_fst
        continuous_snd.fst continuous_snd.snd },
    { intros x hx t ht s _, refine sf_homotopy_in' _ _ _ id _ hx ht _ _,
      { intros x hx t ht s hœÅx, refine h‚ÇÄ.val_in _ ht, rcases hx with (hx|‚ü®-,hx‚ü©)|hx,
        { exact (subset_closure.trans hVU‚ÇÄ) hx },
        { exact hx },
        { exact (hœÅx $ h1œÅ $ subset_closure hx).elim } },
      { intros x hx t ht s hœÅx, refine h‚ÇÅ.val_in _ ht, rcases hx with (hx|‚ü®hx,-‚ü©)|hx,
        { exact (hœÅx $ h0œÅ $ subset_closure hx).elim },
        { exact hx },
        { exact (subset_closure.trans hVU‚ÇÅ) hx } } } },
  { refine eventually.mono (hV‚ÇÄ.mem_nhds_set.mpr hKV‚ÇÄ) (Œª x (hx : x ‚àà V‚ÇÄ), _),
    simp_rw [Œ≥, h0œÅ (subset_closure hx), pi.zero_apply, sf_homotopy_zero] },
end

/-! We now extract all components of this theorem, which makes them easier to use in the recursion
  in `exists_surrounding_loops` -/

/-- An arbitrary witness of `extends_loops`. -/
def extended_domain : set E :=
interior $ classical.some $ extends_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ

/-- An arbitrary witness of `extends_loops`. -/
def extended_loops : E ‚Üí ‚Ñù ‚Üí loop F :=
classical.some $ classical.some_spec $ classical.some_spec $
  extends_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ

/-- The (interior of the) set where `extended_loops` didn't change -/
def extended_invariant : set E :=
interior { x | extended_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ x = Œ≥‚ÇÄ x }

variables {hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ}

lemma is_open_extended_domain : is_open (extended_domain hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ) :=
is_open_interior

lemma subset_extended_domain : K‚ÇÄ ‚à™ K‚ÇÅ ‚äÜ extended_domain hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ :=
subset_interior_iff_mem_nhds_set.mpr $ classical.some $ classical.some_spec $
  extends_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ

lemma extended_domain_mem_nhds_set :
  extended_domain hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ ‚àà nhds_set (K‚ÇÄ ‚à™ K‚ÇÅ) :=
is_open_extended_domain.mem_nhds_set.mpr subset_extended_domain

lemma surrounding_family_extended_loops :
   surrounding_family_in g b (extended_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ)
    (extended_domain hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ) Œ© :=
(classical.some_spec $ classical.some_spec $ classical.some_spec $
  extends_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ).1.mono interior_subset

lemma extended_loops_eventually_eq_left : ‚àÄ·∂† x in nhds_set K‚ÇÄ,
  extended_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ x = Œ≥‚ÇÄ x :=
(classical.some_spec $ classical.some_spec $ classical.some_spec $
  extends_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ).2

lemma is_open_extended_invariant : is_open (extended_invariant hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ) :=
is_open_interior

lemma subset_extended_invariant : K‚ÇÄ ‚äÜ extended_invariant hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ :=
subset_interior_iff_mem_nhds_set.mpr extended_loops_eventually_eq_left

lemma extended_invariant_mem_nhds_set :
  extended_invariant hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ ‚àà nhds_set K‚ÇÄ :=
is_open_extended_invariant.mem_nhds_set.mpr subset_extended_invariant

lemma extended_loops_eq_left {x : E} (hx : x ‚àà extended_invariant hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ) :
  extended_loops hU‚ÇÄ hU‚ÇÅ hK‚ÇÄ hK‚ÇÅ hKU‚ÇÄ hKU‚ÇÅ h‚ÇÄ h‚ÇÅ x = Œ≥‚ÇÄ x :=
(interior_subset hx : _)


end extends_loops

instance normed_space.noncompact_space : noncompact_space E := sorry
section surrounding_loops
/-
variables [finite_dimensional ‚Ñù E]
  {V: set E}
  {Œ≥‚ÇÄ: E ‚Üí ‚Ñù ‚Üí loop F}
  {U‚ÇÄ V‚ÇÄ: set E}
  {Œ≥: Œ† (x : E), x ‚àà U ‚Üí E ‚Üí ‚Ñù ‚Üí loop F}
  {W: Œ† (x : E), x ‚àà U ‚Üí set E}
  {L: Œ† (x : E), x ‚àà U \ closure V‚ÇÄ ‚Üí set E}
  {f: ‚Ñï ‚Üí E}

variables
  (hK: is_compact K)
  (hŒ≥‚ÇÄ: surrounding_family_in g b Œ≥‚ÇÄ V Œ©)
  (hU‚ÇÄ: is_open U‚ÇÄ)
  (hKU‚ÇÄ: K ‚äÜ U‚ÇÄ)
  (hU‚ÇÄV: U‚ÇÄ ‚äÜ V)
  (hKV‚ÇÄ: K ‚äÜ V‚ÇÄ)
  (hW: ‚àÄ (x : E) (hx : x ‚àà U), is_open (W x hx))
  (hŒ≥: ‚àÄ (x : E) (hx : x ‚àà U), surrounding_family_in g b (Œ≥ x hx) (W x hx) Œ©)
  (hLW: ‚àÄ (x : E) (hx : x ‚àà U \ closure V‚ÇÄ), L x hx ‚äÜ W x hx.left \ K)
  (hL: ‚àÄ (x : E) (hx : x ‚àà U \ closure V‚ÇÄ), is_compact (L x hx))
  (hf: range f ‚äÜ U \ V‚ÇÄ)


set_option eqn_compiler.zeta true
/-- The recursion data in `exists_surrounding_loops`. -/
noncomputable def surrounding_loops_data :
  ‚Ñï ‚Üí Œ£' (L' U' : set E) (Œ≥' : E ‚Üí ‚Ñù ‚Üí loop F), is_compact L' ‚àß is_open U' ‚àß L' ‚äÜ U' ‚àß
    surrounding_family_in g b Œ≥' U' Œ©
| 0     := ‚ü®K, U‚ÇÄ, Œ≥‚ÇÄ, hK, hU‚ÇÄ, hKU‚ÇÄ, hŒ≥‚ÇÄ.mono hU‚ÇÄV‚ü©
| (n+1) :=
  let Wf : ‚Ñï ‚Üí set E := Œª n, W (f n) (range_subset_iff.mp hf n).left,
    Lf : ‚Ñï ‚Üí set E := Œª n, L (f n) (diff_subset_diff_right hKV‚ÇÄ $ range_subset_iff.mp hf n),
    ‚ü®K‚Çô, U‚Çô, Œ≥‚Çô, hK‚Çô, hU‚Çô, hKU‚Çô, hŒ≥‚Çô‚ü© := surrounding_loops_data n,
    Unew := extended_domain hU‚Çô ((hW _ _ : is_open (Wf n)).sdiff hK.is_closed) hK‚Çô
        (hL _ _ : is_compact (Lf n)) hKU‚Çô (hLW _ _) hŒ≥‚Çô ((hŒ≥ _ _).mono $ diff_subset _ _) in
      ‚ü®K‚Çô ‚à™ Lf n, Unew, _, hK‚Çô.union (hL _ _), is_open_extended_domain, subset_extended_domain,
        surrounding_family_extended_loops‚ü©

/-- The sequence of loops in `exists_surrounding_loops`. -/
noncomputable def surrounding_loops_seq (n : ‚Ñï) : E ‚Üí ‚Ñù ‚Üí loop F :=
(surrounding_loops_data hK hŒ≥‚ÇÄ hU‚ÇÄ hKU‚ÇÄ hU‚ÇÄV hKV‚ÇÄ hW hŒ≥ hLW hL hf n).2.2.1

lemma surrounding_loops_seq_succ (n : ‚Ñï) : E ‚Üí ‚Ñù ‚Üí loop F :=
(surrounding_loops_data hK hŒ≥‚ÇÄ hU‚ÇÄ hKU‚ÇÄ hU‚ÇÄV hKV‚ÇÄ hW hŒ≥ hLW hL hf n).2.2.1

lemma surrounding_loops_seq_succ_left (n : ‚Ñï) {x : E} (hx : sorry) :
  surrounding_loops_seq hK hŒ≥‚ÇÄ hU‚ÇÄ hKU‚ÇÄ hU‚ÇÄV hKV‚ÇÄ hW hŒ≥ hLW hL hf (n+1) x =
  surrounding_loops_seq hK hŒ≥‚ÇÄ hU‚ÇÄ hKU‚ÇÄ hU‚ÇÄV hKV‚ÇÄ hW hŒ≥ hLW hL hf n x :=
begin
  sorry
end
-/

-- useful / better reformulation of existing lemma (unused in mathlib)
lemma continuous_subtype_is_closed_cover' {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]
  {Œπ : Sort*} {f : Œ± ‚Üí Œ≤} (c : Œπ ‚Üí set Œ±)
  (h_lf : locally_finite c)
  (h_is_closed : ‚àÄ i, is_closed (c i))
  (h_cover : (‚ãÉ i, c i) = univ)
  (f_cont  : ‚àÄ i, continuous (Œª(x : c i), f x)) :
  continuous f :=
continuous_subtype_is_closed_cover (Œª i x, x ‚àà c i) h_lf h_is_closed
  (by simpa [eq_univ_iff_forall] using h_cover) f_cont

-- needed at the end
#check @exists_Union_eq_closure_subset

open metric encodable
lemma exists_surrounding_loops [finite_dimensional ‚Ñù E] [finite_dimensional ‚Ñù F]
  (hU : is_open U) (hK : is_compact K) (hKU : K ‚äÜ U)
  (hŒ©_op : is_open (Œ© ‚à© fst ‚Åª¬π' U))
  (hŒ©_conn : ‚àÄ x ‚àà U, is_connected (prod.mk x ‚Åª¬π' Œ©))
  (hg : ‚àÄ x ‚àà U, continuous_at g x) (hb : continuous b) (hb_in : ‚àÄ x ‚àà U, (x, b x) ‚àà Œ©)
  (hgK : ‚àÄ·∂† x in nhds_set K, g x = b x)
  (hconv : ‚àÄ x ‚àà U, g x ‚àà convex_hull ‚Ñù (prod.mk x ‚Åª¬π' Œ©))
  {Œ≥‚ÇÄ :  E ‚Üí ‚Ñù ‚Üí loop F}
  (hŒ≥‚ÇÄ_surr : ‚àÉ V ‚àà nhds_set K, surrounding_family_in g b Œ≥‚ÇÄ V Œ©) :
  ‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, (surrounding_family_in g b Œ≥ U Œ©) ‚àß
                        (‚àÄ·∂† x in nhds_set K, ‚àÄ (t ‚àà I), Œ≥ x t = Œ≥‚ÇÄ x t)  :=
begin
  /-
  Translation
  Notes | Formalization
  ------+--------------
  Œ≥     | Œ≥‚ÇÄ
  U‚ÇÄ'   | V‚ÇÄ
  U·µ¢    | (decode‚ÇÇ s n).map W = Wf i -- however, some values may be "none"
  K·µ¢    | (decode‚ÇÇ s n).map (closure ‚àò v) = Lf i -- however, some values may be "none"
  successive stages of Œ≥' | Œ≥' = Œ¥.2.2.1

  Other sets:
  W‚ÇÅ x: a set around x where we can locally find a `Œ≥`
  W‚ÇÇ x := (W‚ÇÅ x \ closure V‚ÇÄ) ‚à© ball x 1: make the set bounded and not intersecting `V‚ÇÄ`
  `s` a countable collection of `x`'s such that `{ W‚ÇÇ x | x ‚àà s }` covers `U`
  We also ensure that V‚ÇÄ is a subset of U, but that is probably not needed.

  Note: getting the U·µ¢ and K·µ¢ correctly is tricky. Current idea:
  * get W‚ÇÇ x as a above, and get a compact subneighborhood `K x`
  * Find an increasing sequence of compact sets `L i` in `U` covering `U`, such that
    `L i ‚äÜ interior(L (i + 1))` and `L 0 = L (-1) = ‚àÖ`.
  * Get a finite set of the `K x` covering `L (i + 1) \ interior (L i)`, and restrict the
    corresponding `W‚ÇÇ x` to `L (i + 2) \ interior (L (i - 1))`.
  * Now the collection of all these `K x` will cover all of `U` and be countable and locally finite.
  -/
  rcases hŒ≥‚ÇÄ_surr with ‚ü®V, hV, hŒ≥‚ÇÄ‚ü©,
  rw [mem_nhds_set] at hV, rcases hV with ‚ü®U‚ÇÄ, hU‚ÇÄ, hKU‚ÇÄ, hU‚ÇÄV‚ü©,
  obtain ‚ü®V‚ÇÄ, hV‚ÇÄ, hKV‚ÇÄ, hV‚ÇÄUU‚ÇÄ, hcV‚ÇÄ‚ü© :=
    exists_open_between_and_is_compact_closure hK (hU‚ÇÄ.inter hU) (subset_inter hKU‚ÇÄ hKU),
  obtain ‚ü®hV‚ÇÄU‚ÇÄ : V‚ÇÄ ‚äÜ U‚ÇÄ, hV‚ÇÄU : V‚ÇÄ ‚äÜ U‚ü© := subset_inter_iff.mp (subset_closure.trans hV‚ÇÄUU‚ÇÄ),
  have hUV‚ÇÄ : is_open (U \ closure V‚ÇÄ) := hU.sdiff is_closed_closure,
  choose Œ≥ W‚ÇÅ hW‚ÇÅ hxW‚ÇÅ hŒ≥ using Œª x : U \ closure V‚ÇÄ,
    local_loops_open ‚ü®U, hU.mem_nhds x.prop.left, hŒ©_op‚ü©
    (hŒ©_conn x x.prop.left) (hg x x.prop.left) hb (hb_in x x.prop.left) (hconv x x.prop.left),
  let W‚ÇÇ := Œª x : U \ closure V‚ÇÄ, (W‚ÇÅ x \ closure V‚ÇÄ) ‚à© ball x 1,
  have hW‚ÇÇ : ‚àÄ x, is_open (W‚ÇÇ x) := Œª x, ((hW‚ÇÅ x).sdiff is_closed_closure).inter is_open_ball,
  have hUW‚ÇÇ : U \ closure V‚ÇÄ ‚äÜ ‚ãÉ x, W‚ÇÇ x :=
    Œª x hx, mem_Union.mpr ‚ü®‚ü®x, hx‚ü©, ‚ü®‚ü®hxW‚ÇÅ _, hx.right‚ü©, mem_ball_self zero_lt_one‚ü©‚ü©,
  obtain ‚ü®s, hs, hsW‚ÇÇ‚ü© := is_open_Union_countable W‚ÇÇ hW‚ÇÇ,
  rw [‚Üê hsW‚ÇÇ] at hUW‚ÇÇ, clear hsW‚ÇÇ,
  obtain ‚ü®W, hW, hUW, hlW, hWU, hWW‚ÇÇ‚ü© :=
    precise_refinement_set' hUV‚ÇÄ (Œª x : s, W‚ÇÇ x) (Œª x, hW‚ÇÇ x)
    (Œª x hx, by simp_rw [Union_coe_set, hUW‚ÇÇ hx]),
  obtain ‚ü®v, hUv, hv, hvW‚ü© := exists_Union_eq_closure_subset_of_is_open hUV‚ÇÄ (Œª x : s, hW x)
    (Œª x, point_finite_of_locally_finite_coe_preimage hlW hWU) hUW,
  have : ‚àÄ i, is_compact (closure (v i)) := sorry, -- only compact in U!
  -- rcases eq_empty_or_nonempty (U \ V‚ÇÄ) with h|hnUK,
  -- { simp_rw [diff_eq_empty] at h,
  --   exact ‚ü®Œ≥‚ÇÄ, hŒ≥‚ÇÄ.mono $ h.trans $ hV‚ÇÄU‚ÇÄ.trans hU‚ÇÄV, eventually_of_forall $ Œª x t ht, rfl‚ü© },
  -- obtain ‚ü®f, hf, hUf‚ü© := topological_space.cover_nat_nhds_within' (Œª x (hx : x ‚àà U \ V‚ÇÄ),
  --   mem_nhds_within_of_mem_nhds (hxL x $ diff_subset_diff_right hKV‚ÇÄ hx)) hnUK,
  haveI : encodable s := hs.to_encodable,
  let Wf : ‚Ñï ‚Üí option (set E) := Œª n, (decode‚ÇÇ s n).map W,
  let Lf : ‚Ñï ‚Üí option (set E) := Œª n, (decode‚ÇÇ s n).map (closure ‚àò v),
  -- let Œ¥ : ‚Ñï ‚Üí Œ£' (L' U' : set E) (Œ≥' : E ‚Üí ‚Ñù ‚Üí loop F), is_compact L' ‚àß is_open U' ‚àß L' ‚äÜ U' ‚àß
  --   surrounding_family_in g b Œ≥' U' Œ© :=
  -- surrounding_loops_data hK hŒ≥‚ÇÄ hU‚ÇÄ hKU‚ÇÄ hU‚ÇÄV hKV‚ÇÄ hW hŒ≥ hLW hL hf,
  sorry
end

end surrounding_loops
-- #print axioms satisfied_or_refund
-- #print axioms extends_loops
-- #lint
