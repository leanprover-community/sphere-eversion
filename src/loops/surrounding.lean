import loops.basic
import tactic.fin_cases
import topology.metric_space.emetric_paracompact
import topology.shrinking_lemma
import to_mathlib.partition

import to_mathlib.order.filter.eventually_constant

/-!
# Surrounding families of loops
-/

open set function finite_dimensional int prod function path filter topological_space
open_locale classical topological_space unit_interval big_operators

namespace is_path_connected
-- we redo `exists_path_through_family` to use `def`s

variables {X : Type*} [topological_space X] {F : set X}

/-- An arbitrary path joining `x` and `y` in `F`. -/
noncomputable def some_path (hF : is_path_connected F) {x y : X} (hx : x ‚àà F) (hy : y ‚àà F) :
  path x y :=
(hF.joined_in x hx y hy).some_path

lemma some_path_mem (hF : is_path_connected F) {x y : X} (hx : x ‚àà F) (hy : y ‚àà F)
  (t : I) : hF.some_path hx hy t ‚àà F :=
joined_in.some_path_mem _ t

lemma range_some_path_subset (hF : is_path_connected F) {x y : X} (hx : x ‚àà F) (hy : y ‚àà F) :
  range (hF.some_path hx hy) ‚äÜ F :=
by { rintro _ ‚ü®t, rfl‚ü©, apply some_path_mem }

/-- A path through `p 0`, ..., `p n`. Usually this is used with `n := m`. -/
noncomputable def path_through (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) : ‚àÄ n : ‚Ñï, path (p 0) (p n)
| 0     := path.refl (p 0)
| (n+1) := (path_through n).trans $ hF.some_path (hp _) (hp _)

attribute [simp] path.trans_range
lemma range_path_through_subset (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) : ‚àÄ {n : ‚Ñï}, range (hF.path_through hp n) ‚äÜ F
| 0     := by simp [path_through, hp]
| (n+1) := by simp [path_through, hp, range_some_path_subset, @range_path_through_subset n]

lemma mem_range_path_through' (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) {i n : ‚Ñï} (h : i ‚â§ n) : p i ‚àà range (hF.path_through hp n) :=
begin
  induction h with n hn ih,
  { exact ‚ü®1, by simp‚ü© },
  { simp only [path_through, path.trans_range, mem_union, ih, true_or] }
end

lemma mem_range_path_through (hF : is_path_connected F) {m : ‚Ñï} {p : fin (m+1) ‚Üí X}
  (hp : ‚àÄ i, p i ‚àà F) {i : fin (m+1)} : p i ‚àà range (hF.path_through hp m) :=
by { convert hF.mem_range_path_through' hp (nat.le_of_lt_succ i.2), simp }

end is_path_connected

noncomputable theory

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          {F : Type*} [normed_group F] [normed_space ‚Ñù F]

local notation `d` := finrank ‚Ñù F
local notation `smooth_on` := cont_diff_on ‚Ñù ‚ä§

/-
FIXME: the definition below gets a prime because it clashes with a manifold definition
in mathlib which is in the root namespace.
-/

/-- `f` is smooth at `x` if `f` is smooth on some neighborhood of `x`. -/
def smooth_at' (f : E ‚Üí F) (x : E) : Prop := ‚àÉ s ‚àà ùìù x, smooth_on f s

lemma smooth_at'.continuous_at {f : E ‚Üí F} {x : E} (h : smooth_at' f x) : continuous_at f x :=
by { obtain ‚ü®s, hs, h‚ü© := h, exact h.continuous_on.continuous_at hs }

section surrounding_points

local notation `Œπ` := fin (d + 1)

-- def:surrounds_points
/-- `p` is a collection of points surrounding `f` with weights `w` (that are positive and sum to 1)
if the weighted average of the points `p` is `f` and the points `p` form an affine basis of the
space. -/
structure surrounding_pts (f : F) (p : Œπ ‚Üí F) (w : Œπ ‚Üí ‚Ñù) : Prop :=
(indep : affine_independent ‚Ñù p)
(w_pos : ‚àÄ i, 0 < w i)
(w_sum : ‚àë i, w i = 1)
(avg : ‚àë i, w i ‚Ä¢ p i = f)

lemma surrounding_pts.tot [finite_dimensional ‚Ñù F]
  {f : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù} (h : surrounding_pts f p w) :
  affine_span ‚Ñù (range p) = ‚ä§ :=
h.indep.affine_span_eq_top_iff_card_eq_finrank_add_one.mpr (fintype.card_fin _)

lemma surrounding_pts.mem_affine_bases [finite_dimensional ‚Ñù F]
  {f : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù} (h : surrounding_pts f p w) :
  p ‚àà affine_bases Œπ ‚Ñù F :=
‚ü®h.indep, h.tot‚ü©

lemma surrounding_pts.coord_eq_w [finite_dimensional ‚Ñù F]
  {f : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù} (h : surrounding_pts f p w) :
  (‚ü®p, h.indep, h.tot‚ü© : affine_basis Œπ ‚Ñù F).coords f = w :=
begin
  let b : affine_basis Œπ ‚Ñù F := ‚ü®p, h.indep, h.tot‚ü©,
  change b.coords f = w,
  ext i,
  rw [‚Üê h.avg, ‚Üê finset.univ.affine_combination_eq_linear_combination _ w h.w_sum, affine_basis.coords_apply],
  exact affine_basis.coord_apply_combination_of_mem _ (finset.mem_univ i) h.w_sum,
end

/-- `f` is surrounded by a set `s` if there is an affine basis `p` in `s` with weighted average `f`.
-/
def surrounded (f : F) (s : set F) : Prop :=
‚àÉ p w, surrounding_pts f p w ‚àß ‚àÄ i, p i ‚àà s

lemma surrounded_iff_mem_interior_convex_hull_aff_basis [finite_dimensional ‚Ñù F]
  {f : F} {s : set F} :
  surrounded f s ‚Üî ‚àÉ (b : set F)
                     (h‚ÇÄ : b ‚äÜ s)
                     (h‚ÇÅ : affine_independent ‚Ñù (coe : b ‚Üí F))
                     (h‚ÇÇ : affine_span ‚Ñù b = ‚ä§),
                     f ‚àà interior (convex_hull ‚Ñù b) :=
begin
  split,
  { rintros ‚ü®p, w, ‚ü®‚ü®indep, w_pos, w_sum, rfl‚ü©, h_mem‚ü©‚ü©,
    have h_tot : affine_span ‚Ñù (range p) = ‚ä§ :=
      indep.affine_span_eq_top_iff_card_eq_finrank_add_one.mpr (fintype.card_fin _),
    refine ‚ü®range p, range_subset_iff.mpr h_mem, indep.range, h_tot, _‚ü©,
    let basis : affine_basis Œπ ‚Ñù F := ‚ü®p, indep, h_tot‚ü©,
    rw interior_convex_hull_aff_basis basis,
    intros i,
    rw [‚Üê finset.affine_combination_eq_linear_combination _ _ _ w_sum,
      basis.coord_apply_combination_of_mem (finset.mem_univ i) w_sum],
    exact w_pos i, },
  { rintros ‚ü®b, h‚ÇÄ, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©,
    haveI : fintype b := (finite_of_fin_dim_affine_independent ‚Ñù h‚ÇÅ).fintype,
    have hb : fintype.card b = d + 1,
    { rw [‚Üê h‚ÇÅ.affine_span_eq_top_iff_card_eq_finrank_add_one, subtype.range_coe_subtype,
        set_of_mem_eq, h‚ÇÇ], },
    let p := (coe : _ ‚Üí F) ‚àò (fintype.equiv_fin_of_card_eq hb).symm,
    have hp : b = range p,
    { ext x,
      exact ‚ü®by { intros h, use fintype.equiv_fin_of_card_eq hb ‚ü®x, h‚ü©, simp [p], },
             by { rintros ‚ü®y, rfl‚ü©, apply subtype.coe_prop, }‚ü©, },
    rw hp at h‚ÇÄ h‚ÇÇ h‚ÇÉ,
    replace h‚ÇÅ : affine_independent ‚Ñù p :=
      h‚ÇÅ.comp_embedding (fintype.equiv_fin_of_card_eq hb).symm.to_embedding,
    let basis : affine_basis Œπ ‚Ñù F := ‚ü®_, h‚ÇÅ, h‚ÇÇ‚ü©,
    rw [interior_convex_hull_aff_basis basis, mem_set_of_eq] at h‚ÇÉ,
    refine ‚ü®p, Œª i, basis.coord i f, ‚ü®h‚ÇÅ, h‚ÇÉ, _, _‚ü©, Œª i, h‚ÇÄ (mem_range_self i)‚ü©,
    { exact basis.sum_coord_apply_eq_one f, },
    { rw [‚Üê finset.univ.affine_combination_eq_linear_combination p _
        (basis.sum_coord_apply_eq_one f),
        basis.affine_combination_coord_eq_self] } }
end

--- lem:int_cvx
lemma surrounded_of_convex_hull [finite_dimensional ‚Ñù F]
  {f : F} {s : set F} (hs : is_open s) (hsf : f ‚àà convex_hull ‚Ñù s) :
  surrounded f s :=
begin
  rw surrounded_iff_mem_interior_convex_hull_aff_basis,
  obtain ‚ü®t, hts, hai, hf‚ü© :=
    (by simpa only [exists_prop, mem_Union] using convex_hull_eq_union.subst hsf :
    ‚àÉ (t : finset F), (t : set F) ‚äÜ s ‚àß affine_independent ‚Ñù (coe : t ‚Üí F) ‚àß
      f ‚àà convex_hull ‚Ñù (t : set F)),
  have htne : (t : set F).nonempty := (@convex_hull_nonempty_iff ‚Ñù _ _ _ _ _).mp ‚ü®f, hf‚ü©,
  obtain ‚ü®b, hb‚ÇÅ, hb‚ÇÇ, hb‚ÇÉ, hb‚ÇÑ‚ü© :=
    exists_subset_affine_independent_span_eq_top_of_open hs hts htne hai,
  have hb‚ÇÄ : b.finite, { exact finite_of_fin_dim_affine_independent ‚Ñù hb‚ÇÉ, },
  obtain ‚ü®c, hc‚ü© := interior_convex_hull_nonempty_iff_aff_span_eq_top.mpr hb‚ÇÑ,
  rw ‚Üê hs.interior_eq at hb‚ÇÇ,
  obtain ‚ü®Œµ, hŒµ, hcs‚ü© :=
    (eventually_homothety_image_subset_of_finite_subset_interior ‚Ñù c hb‚ÇÄ hb‚ÇÇ).exists_gt,
  have hbŒµ := convex.subset_interior_image_homothety_of_one_lt (convex_convex_hull ‚Ñù _) hc Œµ hŒµ,
  rw affine_map.image_convex_hull at hbŒµ,
  let t : units ‚Ñù := units.mk0 Œµ (by linarith),
  refine ‚ü®affine_map.homothety c (t : ‚Ñù) '' b, hcs, _, _, hbŒµ (convex_hull_mono hb‚ÇÅ hf)‚ü©,
  { rwa (affine_equiv.homothety_units_mul_hom c t).affine_independent_set_of_eq_iff, },
  { exact (affine_equiv.homothety_units_mul_hom c t).span_eq_top_iff.mp hb‚ÇÑ, },
end

-- lem:smooth_barycentric_coord
lemma smooth_surrounding [finite_dimensional ‚Ñù F] {x : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù}
  (h : surrounding_pts x p w) :
  ‚àÉ W : F ‚Üí (Œπ ‚Üí F) ‚Üí (Œπ ‚Üí ‚Ñù),
  ‚àÄ·∂† (yq : F √ó (Œπ ‚Üí F)) in ùìù (x, p), smooth_at' (uncurry W) yq ‚àß
                             (‚àÄ i, 0 < W yq.1 yq.2 i) ‚àß
                             ‚àë i, W yq.1 yq.2 i = 1 ‚àß
                             ‚àë i, W yq.1 yq.2 i ‚Ä¢ yq.2 i = yq.1 :=
begin
  classical,
  use eval_barycentric_coords Œπ ‚Ñù F,
  let V : set (Œπ ‚Üí ‚Ñù) := set.pi set.univ (Œª i, Ioi (0 : ‚Ñù)),
  let W' : F √ó (Œπ ‚Üí F) ‚Üí (Œπ ‚Üí ‚Ñù) := uncurry (eval_barycentric_coords Œπ ‚Ñù F),
  let A : set (F √ó (Œπ ‚Üí F)) := univ √óÀ¢ affine_bases Œπ ‚Ñù F,
  let U : set (F √ó (Œπ ‚Üí F)) := A ‚à© (W' ‚Åª¬π' V),
  have hŒπ : fintype.card Œπ = d + 1 := fintype.card_fin _,
  have hp : p ‚àà affine_bases Œπ ‚Ñù F := h.mem_affine_bases,
  have hV : is_open V := is_open_set_pi finite_univ (Œª _ _, is_open_Ioi),
  have hW' : continuous_on W' A := (smooth_barycentric Œπ ‚Ñù F hŒπ).continuous_on,
  have hxp : W' (x, p) ‚àà V, { simp [W', hp, h.coord_eq_w, h.w_pos], },
  have hA : is_open A,
  { simp only [A, affine_bases_findim Œπ ‚Ñù F hŒπ],
    exact is_open_univ.prod (is_open_affine_independent ‚Ñù F), },
  have hU‚ÇÅ : U ‚äÜ A := set.inter_subset_left _ _,
  have hU‚ÇÇ : is_open U := hW'.preimage_open_of_open hA hV,
  have hU‚ÇÉ : U ‚àà ùìù (x, p) :=
    mem_nhds_iff.mpr ‚ü®U, le_refl U, hU‚ÇÇ, set.mem_inter (by simp [hp]) (mem_preimage.mpr hxp)‚ü©,
  apply eventually_of_mem hU‚ÇÉ,
  rintros ‚ü®y, q‚ü© hyq,
  have hq : q ‚àà affine_bases Œπ ‚Ñù F, { simpa using hU‚ÇÅ hyq, },
  have hyq' : (y, q) ‚àà W' ‚Åª¬π' V := (set.inter_subset_right _ _) hyq,
  refine ‚ü®‚ü®U, mem_nhds_iff.mpr ‚ü®U, le_refl U, hU‚ÇÇ, hyq‚ü©, (smooth_barycentric Œπ ‚Ñù F hŒπ).mono hU‚ÇÅ‚ü©, _, _, _‚ü©,
  { simpa using hyq', },
  { simp [hq], },
  { simp [hq, affine_basis.linear_combination_coord_eq_self _ y], },
end

lemma smooth_surrounding_pts [finite_dimensional ‚Ñù F] {x : F} {p : Œπ ‚Üí F} {w : Œπ ‚Üí ‚Ñù}
  (h : surrounding_pts x p w) :
  ‚àÉ W : F ‚Üí (Œπ ‚Üí F) ‚Üí (Œπ ‚Üí ‚Ñù),
  ‚àÄ·∂† (yq : F √ó (Œπ ‚Üí F)) in ùìù (x, p), smooth_at' (uncurry W) yq ‚àß
    surrounding_pts yq.1 yq.2 (W yq.1 yq.2) :=
begin
  refine exists_imp_exists (Œª W hW, _) (smooth_surrounding h),
  rw [nhds_prod_eq] at hW ‚ä¢,
  have := (is_open.eventually_mem (is_open_affine_independent ‚Ñù F) h.indep).prod_inr (ùìù x),
  filter_upwards [hW, this], rintro ‚ü®y, q‚ü© ‚ü®hW, h2W, h3W, hq‚ü© h2q,
  exact ‚ü®hW, h2q, h2W, h3W, hq‚ü©
end

lemma surrounding_pts_eval_barycentric_coords_iff
  (q : F) (v : Œπ ‚Üí F) [decidable_pred (‚àà affine_bases Œπ ‚Ñù F)] :
  surrounding_pts q v (eval_barycentric_coords Œπ ‚Ñù F q v) ‚Üî
  ‚àÄ i, 0 < eval_barycentric_coords Œπ ‚Ñù F q v i :=
begin
  refine ‚ü®Œª h, h.w_pos, Œª h, _‚ü©,
  have hv : v ‚àà affine_bases Œπ ‚Ñù F,
  { by_contra contra,
    simpa [eval_barycentric_coords_apply_of_not_mem_bases Œπ ‚Ñù F q contra] using h 0, },
  have hv' : ‚àë i, eval_barycentric_coords Œπ ‚Ñù F q v i = 1,
  { simp [eval_barycentric_coords_apply_of_mem_bases Œπ ‚Ñù F q hv], },
  refine ‚ü®hv.1, h, hv', _‚ü©,
  simp_rw [‚Üê finset.univ.affine_combination_eq_linear_combination v _ hv',
    eval_barycentric_coords_apply_of_mem_bases Œπ ‚Ñù F q hv],
  convert affine_basis.affine_combination_coord_eq_self _ q,
  refl,
end

end surrounding_points

section surrounding_points_limits

variables {X Y : Type*} [finite_dimensional ‚Ñù F]

local notation `Œπ` := fin (finite_dimensional.finrank ‚Ñù F + 1)

lemma eventually_surrounding_pts_of_tendsto_of_tendsto {l : filter X} {m : filter Y}
  {v : Œπ ‚Üí F} {q : F} {p : Œπ ‚Üí X ‚Üí F} {f : Y ‚Üí F}
  (hq : ‚àÉ w, surrounding_pts q v w)
  (hp : ‚àÄ i, tendsto (p i) l (ùìù (v i)))
  (hf : tendsto f m (ùìù q)) :
  ‚àÄ·∂† (z : X √ó Y) in l.prod m, ‚àÉ w, surrounding_pts (f z.2) (Œª i, p i z.1) w :=
begin
  classical,
  obtain ‚ü®w, hw‚ü© := hq,
  let V : set (Œπ ‚Üí ‚Ñù) := set.pi set.univ (Œª i, Ioi (0 : ‚Ñù)),
  let W' : F √ó (Œπ ‚Üí F) ‚Üí (Œπ ‚Üí ‚Ñù) := uncurry (eval_barycentric_coords Œπ ‚Ñù F),
  let A : set (F √ó (Œπ ‚Üí F)) := (univ : set F) √óÀ¢ affine_bases Œπ ‚Ñù F,
  let S : set (F √ó (Œπ ‚Üí F)) := W' ‚Åª¬π' V,
  have hŒπ : fintype.card Œπ = finite_dimensional.finrank ‚Ñù F + 1 := fintype.card_fin _,
  have hq' : v ‚àà affine_bases Œπ ‚Ñù F := hw.mem_affine_bases,
  have hqv : (q, v) ‚àà A, { simp [hq'], },
  have hxp : W' (q, v) ‚àà V, { simp [W', hq', hw.coord_eq_w, hw.w_pos], },
  have hV' : V ‚àà ùìù (W' (q, v)) := (is_open_set_pi finite_univ (Œª _ _, is_open_Ioi)).mem_nhds hxp,
  have hA : is_open A,
  { simp only [A, affine_bases_findim Œπ ‚Ñù F hŒπ],
    exact is_open_univ.prod (is_open_affine_independent ‚Ñù F), },
  have hW' : continuous_at W' (q, v) := (smooth_barycentric Œπ ‚Ñù F hŒπ).continuous_on.continuous_at
    (mem_nhds_iff.mpr ‚ü®A, subset.rfl, hA, hqv‚ü©),
  have hS : S ‚àà ùìù (q, v) := hW'.preimage_mem_nhds hV',
  obtain ‚ü®n‚ÇÅ, hn‚ÇÅ, n‚ÇÇ, hn‚ÇÇ, hS'‚ü© := mem_nhds_prod_iff.mp hS,
  have hn‚ÇÅ' := tendsto_def.mp hf _ hn‚ÇÅ,
  have hn‚ÇÇ' := tendsto_def.mp (tendsto_pi_nhds.mpr hp) _ hn‚ÇÇ,
  have come_on : ((swap p)‚Åª¬π' n‚ÇÇ) √óÀ¢ (f‚Åª¬π' n‚ÇÅ) ‚àà l.prod m :=
    mem_prod_iff.mpr ‚ü®_, hn‚ÇÇ', _, hn‚ÇÅ', subset.rfl‚ü©,
  refine eventually_of_mem come_on _,
  rintros ‚ü®y‚ÇÇ, y‚ÇÅ‚ü© ‚ü®hy‚ÇÇ : swap p y‚ÇÇ ‚àà n‚ÇÇ, hy‚ÇÅ : f y‚ÇÅ ‚àà n‚ÇÅ‚ü©,
  refine ‚ü®W' (f y‚ÇÅ, swap p y‚ÇÇ), (surrounding_pts_eval_barycentric_coords_iff
    (f y‚ÇÅ) (swap p y‚ÇÇ)).mpr (Œª i, _)‚ü©,
  change W' (f y‚ÇÅ, swap p y‚ÇÇ) i ‚àà Ioi (0 : ‚Ñù),
  suffices : (f y‚ÇÅ, swap p y‚ÇÇ) ‚àà S,
  { rw [set.mem_preimage] at this, exact set.mem_pi.mp this i (mem_univ _), },
  apply hS',
  simp [hy‚ÇÅ, hy‚ÇÇ],
end

lemma eventually_surrounding_pts_of_tendsto_of_tendsto'
  {v : Œπ ‚Üí F} {q : F} {p : Œπ ‚Üí X ‚Üí F} {l : filter X} {f : X ‚Üí F}
  (hq : ‚àÉ w, surrounding_pts q v w)
  (hp : ‚àÄ i, tendsto (p i) l (ùìù (v i)))
  (hf : tendsto f l (ùìù q)) :
  ‚àÄ·∂† y in l, ‚àÉ w, surrounding_pts (f y) (Œª i, p i y) w :=
begin
  have := eventually_surrounding_pts_of_tendsto_of_tendsto hq hp hf,
  simp_rw [eventually_iff_exists_mem, mem_prod_iff] at this,
  obtain ‚ü®nnn, ‚ü®n‚ÇÅ, hn‚ÇÅ, n‚ÇÇ, hn‚ÇÇ, hh‚ü©, h‚ü© := this,
  rw eventually_iff_exists_mem,
  exact ‚ü®n‚ÇÅ ‚à© n‚ÇÇ, inter_mem hn‚ÇÅ hn‚ÇÇ, Œª y hy, h (y, y) (by { apply hh, simpa using hy, })‚ü©,
end

end surrounding_points_limits

namespace loop

variables {Œ≥ Œ≥' : loop F} {x y : F} {t : ‚Ñù}

/-- A loop `Œ≥` surrounds a point `x` if `x` is surrounded by values of `Œ≥`. -/
def surrounds (Œ≥ : loop F) (x : F) : Prop :=
‚àÉ t w : fin (d + 1) ‚Üí ‚Ñù, surrounding_pts x (Œ≥ ‚àò t) w

lemma surrounds_iff_range_subset_range :
  Œ≥.surrounds x ‚Üî ‚àÉ (p : fin (d + 1) ‚Üí F) (w : fin (d + 1) ‚Üí ‚Ñù),
  surrounding_pts x p w ‚àß range p ‚äÜ range Œ≥ :=
begin
  split,
  { exact Œª ‚ü®t, w, h‚ü©, ‚ü®(Œ≥ ‚àò t), w, h, range_comp_subset_range _ _‚ü© },
  { rintros ‚ü®p, w, h‚ÇÄ, h‚ÇÅ‚ü©,
    rw range_subset_iff at h‚ÇÅ,
    choose t ht using h‚ÇÅ,
    have hpt : Œ≥ ‚àò t = p := funext ht,
    exact ‚ü®t, w, hpt.symm ‚ñ∏ h‚ÇÄ‚ü© }
end

lemma affine_equiv_surrounds_iff (e : F ‚âÉ·µÉ[‚Ñù] F) :
  Œ≥.surrounds x ‚Üî (Œ≥.transform e).surrounds (e x) :=
begin
  suffices : ‚àÄ (Œ≥ : loop F) x (e : F ‚âÉ·µÉ[‚Ñù] F), Œ≥.surrounds x ‚Üí (Œ≥.transform e).surrounds (e x),
  { refine ‚ü®this Œ≥ x e, Œª h, _‚ü©,
    specialize this (Œ≥.transform e) (e x) e.symm h,
    rw affine_equiv.symm_apply_apply at this,
    convert this,
    ext,
    simp, },
  rintros Œ≥ x e ‚ü®t, w, indep, w_pos, w_sum, rfl‚ü©,
  refine ‚ü®t, w, ‚ü®e.affine_independent_iff.mpr indep, w_pos, w_sum, _‚ü©‚ü©,
  simp only [‚Üê finset.affine_combination_eq_linear_combination _ _ _ w_sum],
  erw finset.map_affine_combination _ (Œ≥ ‚àò t) _ w_sum (e : F ‚Üí·µÉ[‚Ñù] F),
  congr,
end

lemma vadd_surrounds : Œ≥.surrounds x ‚Üî (y +·µ• Œ≥).surrounds (y + x) :=
begin
  rw add_comm,
  convert affine_equiv_surrounds_iff (affine_equiv.vadd_const ‚Ñù y),
  ext u,
  simp [add_comm y],
end

lemma surrounds.vadd (h : Œ≥.surrounds x) : (y +·µ• Œ≥).surrounds (y + x) :=
vadd_surrounds.mp h

lemma surrounds.vadd0 (h : Œ≥.surrounds 0) : (y +·µ• Œ≥).surrounds y :=
by { convert h.vadd, rw [add_zero] }

lemma surrounds.smul0 (h : Œ≥.surrounds 0) (ht : t ‚â† 0) : (t ‚Ä¢ Œ≥).surrounds 0 :=
begin
  rw [affine_equiv_surrounds_iff (affine_equiv.homothety_units_mul_hom (0 : F) (units.mk0 t ht)‚Åª¬π),
    affine_equiv.coe_homothety_units_mul_hom_apply, affine_map.homothety_apply_same],
  convert h,
  ext u,
  simp [affine_map.homothety_apply, smul_smul, inv_mul_cancel ht],
end

lemma surrounds.mono (h : Œ≥.surrounds x) (h2 : range Œ≥ ‚äÜ range Œ≥') : Œ≥'.surrounds x :=
begin
  revert h, simp_rw [loop.surrounds_iff_range_subset_range],
  refine exists_imp_exists (Œª t, _),
  refine exists_imp_exists (Œª w, _),
  exact and.imp_right (Œª h3, subset.trans h3 h2),
end

protected lemma surrounds.reparam (h : Œ≥.surrounds x) {œÜ : equivariant_map}
  (hœÜ : continuous œÜ) : (Œ≥.reparam œÜ).surrounds x :=
begin
  refine h.mono _,
  convert subset_of_eq (range_comp Œ≥ œÜ).symm,
  rw [(œÜ.surjective hœÜ).range_eq, image_univ]
end


/-- This is only a stepping stone potentially useful for `surrounding_family.surrounds_of_close`,
  but not needed by itself. -/
lemma surrounds.eventually_surrounds [finite_dimensional ‚Ñù F] (h : Œ≥.surrounds x) :
  ‚àÉ Œµ > 0, ‚àÄ (Œ≥' : loop F) (y : F), (‚àÄ z, dist (Œ≥' z) (Œ≥ z) < Œµ) ‚Üí dist y x < Œµ ‚Üí Œ≥'.surrounds y :=
begin
  obtain ‚ü®t, w, h‚ü© := h,
  obtain ‚ü®W, hW‚ü© := smooth_surrounding_pts h,
  obtain ‚ü®Œµ, hŒµ, h‚ü© := metric.eventually_nhds_iff.mp hW,
  refine ‚ü®Œµ, hŒµ, Œª Œ≥' y hŒ≥' hy, ‚ü®t, W y (Œ≥' ‚àò t), _‚ü©‚ü©,
  refine (@h ‚ü®y, Œ≥' ‚àò t‚ü© _).2,
  simp_rw [prod.dist_eq, max_lt_iff, dist_pi_lt_iff hŒµ],
  exact ‚ü®hy, Œª b, hŒ≥' (t b)‚ü©
end


end loop

section surrounding_loop

variables {O : set F} {f b : F} {p : fin (d + 1) ‚Üí F}
  (O_conn : is_path_connected O)
  (hp : ‚àÄ i, p i ‚àà O)
  (hb : b ‚àà O)

/-- witness of `surrounding_loop_of_convex_hull` -/
def surrounding_loop : ‚Ñù ‚Üí loop F :=
loop.round_trip_family $ (O_conn.some_path hb (hp 0)).trans $ O_conn.path_through hp d

variables {O_conn hp hb}

/-- TODO: continuity note -/
lemma continuous_surrounding_loop : continuous ‚Üø(surrounding_loop O_conn hp hb) :=
loop.round_trip_family_continuous

@[simp] lemma surrounding_loop_zero_right (t : ‚Ñù) : surrounding_loop O_conn hp hb t 0 = b :=
loop.round_trip_family_based_at t

@[simp] lemma surrounding_loop_zero_left (s : ‚Ñù) : surrounding_loop O_conn hp hb 0 s = b :=
by { simp only [surrounding_loop, loop.round_trip_family_zero], refl }

lemma surrounding_loop_mem (t s : ‚Ñù) : surrounding_loop O_conn hp hb t s ‚àà O :=
begin
  revert s,
  rw ‚Üê range_subset_iff,
  simp only [surrounding_loop, loop.round_trip_family, path.trans_range, loop.round_trip_range,
    cast_coe],
  refine subset.trans (truncate_range _) _,
  simp only [trans_range, union_subset_iff, O_conn.range_some_path_subset,
    O_conn.range_path_through_subset, true_and]
end

lemma surrounding_loop_surrounds {w : fin (d + 1) ‚Üí ‚Ñù} (h : surrounding_pts f p w) :
  (surrounding_loop O_conn hp hb 1).surrounds f :=
begin
  rw loop.surrounds_iff_range_subset_range,
  refine ‚ü®p, w, h, _‚ü©,
  simp only [surrounding_loop, loop.round_trip_family_one, loop.round_trip_range, trans_range,
    range_subset_iff, mem_union, O_conn.mem_range_path_through, or_true, forall_true_iff]
end

lemma surrounding_loop_proj_I (t : ‚Ñù) :
  surrounding_loop O_conn hp hb (proj_I t) = surrounding_loop O_conn hp hb t :=
loop.round_trip_eq $ Œª s, by simp_rw [path.cast_coe, truncate_proj_I_right]

-- unused
lemma surrounding_loop_of_le_zero (s : ‚Ñù) {t : ‚Ñù} (ht : t ‚â§ 0) :
  surrounding_loop O_conn hp hb t s = b :=
by rw [‚Üê surrounding_loop_proj_I, proj_I_eq_zero.mpr ht, surrounding_loop_zero_left]

-- unused
lemma surrounding_loop_of_ge_one (s : ‚Ñù) {t : ‚Ñù} (ht : 1 ‚â§ t) :
  surrounding_loop O_conn hp hb t s = surrounding_loop O_conn hp hb 1 s :=
by rw [‚Üê surrounding_loop_proj_I t, proj_I_eq_one.mpr ht]

lemma surrounding_loop_of_convex_hull [finite_dimensional ‚Ñù F] {f b : F} {O : set F}
  (O_op : is_open O) (O_conn : is_connected O)
  (hsf : f ‚àà convex_hull ‚Ñù O) (hb : b ‚àà O) :
  ‚àÉ Œ≥ : ‚Ñù ‚Üí loop F, continuous ‚ÜøŒ≥ ‚àß
                    (‚àÄ t, Œ≥ t 0 = b) ‚àß
                    (‚àÄ s, Œ≥ 0 s = b) ‚àß
                    (‚àÄ s t, Œ≥ (proj_I t) s = Œ≥ t s) ‚àß
                    (‚àÄ t s, Œ≥ t s ‚àà O) ‚àß
                    (Œ≥ 1).surrounds f :=
begin
  rcases surrounded_of_convex_hull O_op hsf with ‚ü®p, w, h, hp‚ü©,
  rw ‚Üê O_op.is_connected_iff_is_path_connected at O_conn,
  rcases (O_conn.exists_path_through_family p hp) with ‚ü®Œ©‚ÇÄ, hŒ©‚ÇÄ‚ü©,
  rcases O_conn.joined_in b hb (p 0) (hp 0) with ‚ü®Œ©‚ÇÅ, hŒ©‚ÇÅ‚ü©,
  exact ‚ü®surrounding_loop O_conn hp hb, continuous_surrounding_loop, surrounding_loop_zero_right,
    surrounding_loop_zero_left, Œª s t, by rw surrounding_loop_proj_I,
    surrounding_loop_mem, surrounding_loop_surrounds h‚ü©
end

end surrounding_loop

/-- `Œ≥` forms a family of loops surrounding `g` with base `b`.
In contrast to the notes we assume that `base` and `t‚ÇÄ` hold universally. -/
@[protect_proj]
structure surrounding_family (g b : E ‚Üí F) (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U : set E) : Prop :=
(base : ‚àÄ (x : E) (t : ‚Ñù), Œ≥ x t 0 = b x)
(t‚ÇÄ : ‚àÄ (x : E) (s : ‚Ñù), Œ≥ x 0 s = b x)
(proj_I : ‚àÄ (x : E) (t : ‚Ñù) (s : ‚Ñù), Œ≥ x (proj_I t) s = Œ≥ x t s)
(surrounds : ‚àÄ x ‚àà U, (Œ≥ x 1).surrounds $ g x)
(cont : continuous ‚ÜøŒ≥)

/-- `Œ≥` forms a family of loops surrounding `g` with base `b` in `Œ©`. -/
structure surrounding_family_in (g b : E ‚Üí F) (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U : set E) (Œ© : set $ E √ó F)
  extends surrounding_family g b Œ≥ U : Prop :=
(val_in' : ‚àÄ (x ‚àà U) (t ‚àà I) (s ‚àà I), (x, Œ≥ x t s) ‚àà Œ©)

namespace surrounding_family

variables {g b : E ‚Üí F} {Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F} {U : set E}

protected lemma one (h : surrounding_family g b Œ≥ U) (x : E) (t : ‚Ñù) : Œ≥ x t 1 = b x :=
by rw [loop.one, h.base]

protected lemma t_le_zero (h : surrounding_family g b Œ≥ U) (x : E) (s : ‚Ñù) {t : ‚Ñù} (ht : t ‚â§ 0) :
  Œ≥ x t s = Œ≥ x 0 s :=
by rw [‚Üê h.proj_I, proj_I_eq_zero.mpr ht]

protected lemma t_le_zero_eq_b (h : surrounding_family g b Œ≥ U) (x : E) (s : ‚Ñù) {t : ‚Ñù}
  (ht : t ‚â§ 0) : Œ≥ x t s = b x :=
by rw [h.t_le_zero x s ht, h.t‚ÇÄ]

protected lemma t_ge_one (h : surrounding_family g b Œ≥ U) (x : E) (s : ‚Ñù) {t : ‚Ñù} (ht : 1 ‚â§ t) :
  Œ≥ x t s = Œ≥ x 1 s :=
by rw [‚Üê h.proj_I, proj_I_eq_one.mpr ht]

protected lemma continuous_b (h : surrounding_family g b Œ≥ U) : continuous b :=
(h.cont.comp‚ÇÇ continuous_id continuous_zero).congr (Œª x, h.base x 0)

protected lemma change_set (h : surrounding_family g b Œ≥ U) {V : set E}
  (hV : ‚àÄ x ‚àà V \ U, (Œ≥ x 1).surrounds $ g x) :
  surrounding_family g b Œ≥ V :=
begin
  refine ‚ü®h.base, h.t‚ÇÄ, h.proj_I, Œª x hx, _, h.cont‚ü©,
  by_cases h2x : x ‚àà U, exact h.surrounds x h2x, exact hV x ‚ü®hx, h2x‚ü©
end

protected lemma mono (h : surrounding_family g b Œ≥ U) {V : set E} (hVU : V ‚äÜ U) :
  surrounding_family g b Œ≥ V :=
‚ü®h.base, h.t‚ÇÄ, h.proj_I, Œª x hx, h.surrounds x (hVU hx), h.cont‚ü©

/-
-- The version below depends on `exists_cont_diff_of_convex_of_is_open` which is not yet proven
-- and we don't need it anyway.
protected lemma surrounds_of_close [finite_dimensional ‚Ñù E] [finite_dimensional ‚Ñù F]
  (hg : continuous g)
  (hU : is_open U)
  (h : surrounding_family g b Œ≥ U) :
  ‚àÉ Œµ : E ‚Üí ‚Ñù, (‚àÄ x ‚àà U, 0 < Œµ x) ‚àß continuous_on Œµ U ‚àß
  ‚àÄ (x ‚àà U) (Œ≥' : loop F), (‚àÄ z, dist (Œ≥' z) (Œ≥ x 1 z) < Œµ x) ‚Üí Œ≥'.surrounds (g x) :=
begin
  let P : E ‚Üí ‚Ñù ‚Üí Prop := Œª x t, 0 < t ‚àß
    ‚àÄ (Œ≥' : loop F), (‚àÄ z, dist (Œ≥' z) (Œ≥ x 1 z) < t) ‚Üí Œ≥'.surrounds (g x),
  have hP : ‚àÄ x ‚àà U, convex ‚Ñù {t | P x t} :=
  begin
    intros x hx,
    rw [convex_iff_ord_connected],
    constructor,
    rintro Œµ‚ÇÅ hŒµ‚ÇÅ Œµ‚ÇÇ hŒµ‚ÇÇ Œµ‚ÇÉ ‚ü®hŒµ‚ÇÅ‚ÇÉ, hŒµ‚ÇÉ‚ÇÇ‚ü©,
    refine ‚ü®hŒµ‚ÇÅ.1.trans_le hŒµ‚ÇÅ‚ÇÉ, Œª Œ≥ hŒ≥, hŒµ‚ÇÇ.2 Œ≥ $ Œª z, (hŒ≥ z).trans_le hŒµ‚ÇÉ‚ÇÇ‚ü©
  end,
  obtain ‚ü®Œµ, hŒµ, hPŒµ‚ü© := exists_cont_diff_of_convex_of_is_open hU hP _,
  { refine ‚ü®Œµ, Œª x hx, (hPŒµ x hx).1, cont_diff_on_zero.mp hŒµ, Œª x hx, (hPŒµ x hx).2‚ü© },
  intros x hx,
  obtain ‚ü®Œµ, hŒµ, h2‚ü© := (h.surrounds x hx).eventually_surrounds,
  have h3 : {y : E | dist (g y) (g x) < Œµ} ‚àà ùìù x :=
    (metric.is_open_ball.preimage hg).mem_nhds
    (by simp_rw [mem_preimage, metric.mem_ball, dist_self, hŒµ.lt]),
  have h4 : {y : E | ‚àÄ z, dist (Œ≥ y 1 z) (Œ≥ x 1 z) < Œµ / 2} ‚àà ùìù x,
  { refine is_open.mem_nhds _ (Œª z, by simp_rw [dist_self, half_pos hŒµ]),
    have hc : continuous ‚Üø(Œª y s, dist (Œ≥ y 1 s) (Œ≥ x 1 s)) :=
    (h.cont.comp‚ÇÉ continuous_fst continuous_const continuous_snd).dist
      (h.cont.comp‚ÇÉ continuous_const continuous_const continuous_snd),
    have : is_open {y : E | Sup ((Œª z, dist (Œ≥ y 1 z) (Œ≥ x 1 z)) '' I) < Œµ / 2},
    { refine is_open_lt (is_compact_Icc.continuous_Sup hc) continuous_const },
    have hc : ‚àÄ y, continuous (Œª s, dist (Œ≥ y 1 s) (Œ≥ x 1 s)) :=
    Œª y, hc.comp‚ÇÇ continuous_const continuous_id,
    simp_rw [is_compact_Icc.Sup_lt_iff_of_continuous
      (nonempty_Icc.mpr zero_le_one) (hc _).continuous_on] at this,
    convert this,
    ext y,
    refine ‚ü®Œª h z hz, h z, Œª h z, _‚ü©,
    rw [‚Üê (Œ≥ y 1).fract_eq, ‚Üê (Œ≥ x 1).fract_eq],
    exact h _ (unit_interval.fract_mem _) },
  refine ‚ü®_, inter_mem h4 h3, Œª _, Œµ / 2, cont_diff_on_const,
    Œª y hy, ‚ü®half_pos hŒµ, Œª Œ≥' hŒ≥', h2 _ _ (Œª z, _) hy.2‚ü©‚ü©,
  refine (dist_triangle _ _ _).trans_lt
    ((add_lt_add (hŒ≥' z) (hy.1 z)).trans_le (add_halves Œµ).le)
end -/

protected lemma surrounds_of_close_univ [finite_dimensional ‚Ñù E] [finite_dimensional ‚Ñù F]
  (hg : continuous g)
  (h : surrounding_family g b Œ≥ univ) :
  ‚àÉ Œµ : E ‚Üí ‚Ñù, (‚àÄ x, 0 < Œµ x) ‚àß continuous Œµ ‚àß
  ‚àÄ x (Œ≥' : loop F), (‚àÄ z, dist (Œ≥' z) (Œ≥ x 1 z) < Œµ x) ‚Üí Œ≥'.surrounds (g x) :=
begin
  let P : E ‚Üí ‚Ñù ‚Üí Prop := Œª x t, 0 < t ‚àß
    ‚àÄ (Œ≥' : loop F), (‚àÄ z, dist (Œ≥' z) (Œ≥ x 1 z) < t) ‚Üí Œ≥'.surrounds (g x),
  have hP : ‚àÄ x, convex ‚Ñù {t | P x t} :=
  begin
    intros x,
    rw [convex_iff_ord_connected],
    constructor,
    rintro Œµ‚ÇÅ hŒµ‚ÇÅ Œµ‚ÇÇ hŒµ‚ÇÇ Œµ‚ÇÉ ‚ü®hŒµ‚ÇÅ‚ÇÉ, hŒµ‚ÇÉ‚ÇÇ‚ü©,
    refine ‚ü®hŒµ‚ÇÅ.1.trans_le hŒµ‚ÇÅ‚ÇÉ, Œª Œ≥ hŒ≥, hŒµ‚ÇÇ.2 Œ≥ $ Œª z, (hŒ≥ z).trans_le hŒµ‚ÇÉ‚ÇÇ‚ü©
  end,
  obtain ‚ü®Œµ, hŒµ, hPŒµ‚ü© := exists_cont_diff_of_convex hP _,
  { refine ‚ü®Œµ, Œª x, (hPŒµ x).1, cont_diff_zero.mp hŒµ, Œª x, (hPŒµ x).2‚ü© },
  intros x,
  obtain ‚ü®Œµ, hŒµ, h2‚ü© := (h.surrounds x (mem_univ _)).eventually_surrounds,
  have h3 : {y : E | dist (g y) (g x) < Œµ} ‚àà ùìù x :=
    (metric.is_open_ball.preimage hg).mem_nhds
    (by simp_rw [mem_preimage, metric.mem_ball, dist_self, hŒµ.lt]),
  have h4 : {y : E | ‚àÄ z, dist (Œ≥ y 1 z) (Œ≥ x 1 z) < Œµ / 2} ‚àà ùìù x,
  { refine is_open.mem_nhds _ (Œª z, by simp_rw [dist_self, half_pos hŒµ]),
    have hc : continuous ‚Üø(Œª y s, dist (Œ≥ y 1 s) (Œ≥ x 1 s)) :=
    (h.cont.comp‚ÇÉ continuous_fst continuous_const continuous_snd).dist
      (h.cont.comp‚ÇÉ continuous_const continuous_const continuous_snd),
    have : is_open {y : E | Sup ((Œª z, dist (Œ≥ y 1 z) (Œ≥ x 1 z)) '' I) < Œµ / 2},
    { refine is_open_lt (is_compact_Icc.continuous_Sup hc) continuous_const },
    have hc : ‚àÄ y, continuous (Œª s, dist (Œ≥ y 1 s) (Œ≥ x 1 s)) :=
    Œª y, hc.comp‚ÇÇ continuous_const continuous_id,
    simp_rw [is_compact_Icc.Sup_lt_iff_of_continuous
      (nonempty_Icc.mpr zero_le_one) (hc _).continuous_on] at this,
    convert this,
    ext y,
    refine ‚ü®Œª h z hz, h z, Œª h z, _‚ü©,
    rw [‚Üê (Œ≥ y 1).fract_eq, ‚Üê (Œ≥ x 1).fract_eq],
    exact h _ (unit_interval.fract_mem _) },
  refine ‚ü®_, inter_mem h4 h3, Œª _, Œµ / 2, cont_diff_on_const,
    Œª y hy, ‚ü®half_pos hŒµ, Œª Œ≥' hŒ≥', h2 _ _ (Œª z, _) hy.2‚ü©‚ü©,
  refine (dist_triangle _ _ _).trans_lt
    ((add_lt_add (hŒ≥' z) (hy.1 z)).trans_le (add_halves Œµ).le)
end
/- proof using `surrounds_of_close` -/
-- begin
--   obtain ‚ü®Œµ, hŒµ, hcŒµ, hŒ≥Œµ‚ü© := h.surrounds_of_close hg is_open_univ,
--   exact ‚ü®Œµ, Œª x, hŒµ x (mem_univ _), continuous_iff_continuous_on_univ.mpr hcŒµ,
--     Œª x, hŒ≥Œµ x (mem_univ _)‚ü©
-- end

/-- A surrounding family induces a family of paths from `b x` to `b x`.
We defined the concatenation we need on `path`, so we need to turn a surrounding
family into the family of paths. -/
@[simps]
protected def path (h : surrounding_family g b Œ≥ U) (x : E) (t : ‚Ñù) :
  path (b x) (b x) :=
{ to_fun := Œª s, Œ≥ x t s,
  continuous_to_fun :=
    (h.cont.comp‚ÇÉ continuous_const continuous_const continuous_id).comp continuous_subtype_coe,
  source' := h.base x t,
  target' := h.one x t }

lemma continuous_path {X : Type*} [topological_space X] (h : surrounding_family g b Œ≥ U)
  {t : X ‚Üí ‚Ñù} {f : X ‚Üí E} {s : X ‚Üí I} (hf : continuous f) (ht : continuous t)
  (hs : continuous s) : continuous (Œª x, h.path (f x) (t x) (s x)) :=
h.cont.comp‚ÇÉ hf ht hs.subtype_coe

@[simp]
lemma path_extend_fract (h : surrounding_family g b Œ≥ U) (t s : ‚Ñù) (x : E) :
  (h.path x t).extend (fract s) = Œ≥ x t s :=
by { rw [extend_extends _ (unit_interval.fract_mem s), ‚Üê loop.fract_eq], refl }

@[simp]
lemma range_path (h : surrounding_family g b Œ≥ U) (x : E) (t : ‚Ñù) :
  range (h.path x t) = range (Œ≥ x t) :=
by simp only [path.coe_mk, surrounding_family.path, range_comp _ coe, subtype.range_coe,
    loop.range_eq_image]

@[simp]
lemma path_t‚ÇÄ (h : surrounding_family g b Œ≥ U) (x : E) : h.path x 0 = refl (b x) :=
by { ext t, exact h.t‚ÇÄ x t }

@[simp] lemma path_proj_I (h : surrounding_family g b Œ≥ U) (t : ‚Ñù) (x : E) :
  h.path x (proj_I t) = h.path x t :=
by { ext s, exact h.proj_I x t s }

end surrounding_family

variables {g b : E ‚Üí F} {U K C : set E} {Œ© : set (E √ó F)}

namespace surrounding_family_in

variables {Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F}

/-- Abbreviation for `to_surrounding_family` -/
lemma to_sf (h : surrounding_family_in g b Œ≥ U Œ©) : surrounding_family g b Œ≥ U :=
h.to_surrounding_family

lemma val_in (h : surrounding_family_in g b Œ≥ U Œ©) {x : E} (hx : x ‚àà U) {t : ‚Ñù} {s : ‚Ñù} :
  (x, Œ≥ x t s) ‚àà Œ© :=
by { rw [‚Üê loop.fract_eq, ‚Üê h.proj_I],
  exact h.val_in' x hx (proj_I t) proj_I_mem_Icc (fract s) (unit_interval.fract_mem s) }

protected lemma mono (h : surrounding_family_in g b Œ≥ U Œ©) {V : set E} (hVU : V ‚äÜ U) :
  surrounding_family_in g b Œ≥ V Œ© :=
‚ü®h.to_sf.mono hVU, Œª x hx, h.val_in' x (hVU hx)‚ü©

/-- Continuously reparameterize a `surrounding_family_in` so that it is constant near
  `s ‚àà {0,1}` and `t ‚àà {0,1}` -/
protected lemma reparam (h : surrounding_family_in g b Œ≥ U Œ©) :
  surrounding_family_in g b (Œª x t, (Œ≥ x (linear_reparam t)).reparam linear_reparam) U Œ© :=
begin
  refine ‚ü®‚ü®_, _, _, _, _‚ü©, _‚ü©,
  { intros x t, simp_rw [loop.reparam_apply, linear_reparam_zero, h.base] },
  { intros x s, simp_rw [loop.reparam_apply, linear_reparam_zero, h.t‚ÇÄ] },
  { intros x t s, simp_rw [loop.reparam_apply, linear_reparam_proj_I, h.proj_I] },
  { intros x hx, simp_rw [linear_reparam_one],
    exact (h.surrounds x hx).reparam continuous_linear_reparam },
  { exact h.cont.comp‚ÇÉ continuous_fst continuous_linear_reparam.fst'.snd'
      continuous_linear_reparam.snd'.snd' },
  { intros x hx t ht s hs, exact h.val_in hx },
end

end surrounding_family_in

section local_loops
variables {x‚ÇÄ : E} (hŒ©_conn : is_path_connected (prod.mk x‚ÇÄ ‚Åª¬π' Œ©))
  (hb_in : (x‚ÇÄ, b x‚ÇÄ) ‚àà Œ©)
  {p : fin (d + 1) ‚Üí F}
  (hp : ‚àÄ i, p i ‚àà prod.mk x‚ÇÄ ‚Åª¬π' Œ©)

/-- The witness of `local_loops`. -/
def local_loops_def (x : E) (t : ‚Ñù) : loop F :=
b x - b x‚ÇÄ +·µ• surrounding_loop hŒ©_conn hp hb_in t

/--
Note: The conditions in this lemma are currently a bit weaker than the ones mentioned in the
blueprint.
TODO: use `local_loops_def`
-/
lemma local_loops [finite_dimensional ‚Ñù F]
  {x‚ÇÄ : E}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© fst ‚Åª¬π' U))
  (hg : continuous_at g x‚ÇÄ) (hb : continuous b)
  (hconv : g x‚ÇÄ ‚àà convex_hull ‚Ñù (connected_comp_in (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) $ b x‚ÇÄ)) :
  ‚àÉ (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U ‚àà ùìù x‚ÇÄ), surrounding_family_in g b Œ≥ U Œ© :=
begin
  have hbx‚ÇÄ : continuous_at b x‚ÇÄ := hb.continuous_at,
  have hŒ©_op_x‚ÇÄ : is_open (connected_comp_in (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) $ b x‚ÇÄ) :=
    (is_open_slice_of_is_open_over hŒ©_op).connected_comp_in,
  have b_in : b x‚ÇÄ ‚àà prod.mk x‚ÇÄ ‚Åª¬π' Œ© :=
    connected_comp_in_nonempty_iff.mp (convex_hull_nonempty_iff.mp ‚ü®g x‚ÇÄ, hconv‚ü©),
  have hŒ©_conn : is_connected (connected_comp_in (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) $ b x‚ÇÄ) :=
  is_connected_connected_comp_in.mpr b_in,
  have hb_in : b x‚ÇÄ ‚àà (connected_comp_in (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) $ b x‚ÇÄ) :=
    mem_connected_comp_in_self b_in,
  rcases surrounding_loop_of_convex_hull hŒ©_op_x‚ÇÄ hŒ©_conn hconv hb_in with
    ‚ü®Œ≥, h1Œ≥, h2Œ≥, h3Œ≥, h4Œ≥, h5Œ≥, h6Œ≥‚ü©,
  have h5Œ≥ : ‚àÄ (t s : ‚Ñù), Œ≥ t s ‚àà mk x‚ÇÄ ‚Åª¬π' Œ© := Œª t s, connected_comp_in_subset _ _ (h5Œ≥ t s),
  let Œ¥ : E ‚Üí ‚Ñù ‚Üí loop F := Œª x t, b x - b x‚ÇÄ +·µ• Œ≥ t,
  have hŒ¥ : continuous ‚ÜøŒ¥,
  { dsimp only [Œ¥, has_uncurry.uncurry, loop.vadd_apply],
    refine (hb.fst'.sub continuous_const).add h1Œ≥.snd' },
  have hŒ¥x‚ÇÄ : ‚àÄ t s, Œ¥ x‚ÇÄ t s = Œ≥ t s,
  { intros t s, simp only [zero_add, loop.vadd_apply, sub_self] },
  have hŒ¥s0 : ‚àÄ x t, Œ¥ x t 0 = b x,
  { intros x t, simp only [h2Œ≥, loop.vadd_apply, sub_add_cancel] },
  have hŒ¥t0 : ‚àÄ x s, Œ¥ x 0 s = b x,
  { intros x s, simp [h3Œ≥, sub_add_cancel] },
  have hŒ¥t1 : ‚àÄ x t s, Œ¥ x (proj_I t) s = Œ¥ x t s,
  { intros x t s, simp [h4Œ≥] },
  have hŒ¥Œ© : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ (t ‚àà I) (s ‚àà I), (x, Œ¥ x t s) ‚àà Œ©,
  { rcases hŒ©_op with ‚ü®U, hUx‚ÇÄ, hU‚ü©,
    -- todo: this is nicer with `is_compact.eventually_forall_of_forall_eventually` twice, but then
    -- we need the continuity of `Œ¥` with the arguments reassociated differently.
    have : ‚àÄ·∂† (x : E) in ùìù x‚ÇÄ, ‚àÄ (ts : ‚Ñù √ó ‚Ñù), ts ‚àà I √óÀ¢ I ‚Üí (x, Œ¥ x ts.1 ts.2) ‚àà Œ©,
    { refine is_compact.eventually_forall_mem (is_compact_Icc.prod is_compact_Icc)
        (continuous_fst.prod_mk hŒ¥) _,
      rintro ‚ü®t, s‚ü© ‚ü®ht, hs‚ü©,
      rw [hŒ¥x‚ÇÄ],
      show Œ© ‚àà ùìù (x‚ÇÄ, Œ≥ t s),
      exact mem_nhds_iff.mpr
        ‚ü®_, inter_subset_left _ _, hU, ‚ü®h5Œ≥ t s, show x‚ÇÄ ‚àà U, from mem_of_mem_nhds hUx‚ÇÄ‚ü©‚ü© },
    refine this.mono _, intros x h t ht s hs, exact h (t, s) ‚ü®ht, hs‚ü© },
  have hŒ¥surr : ‚àÄ·∂† x in ùìù x‚ÇÄ, (Œ¥ x 1).surrounds (g x),
  { rcases h6Œ≥ with ‚ü®p, w, h‚ü©,
    obtain ‚ü®W, hW‚ü© := smooth_surrounding_pts h,
    let c : E ‚Üí F √ó (fin (d+1) ‚Üí F) := Œª x, (g x, Œ¥ x 1 ‚àò p),
    have hc : continuous_at c x‚ÇÄ := hg.prod
      (((continuous_at_pi.2 (Œª _, hbx‚ÇÄ)).sub continuous_at_const).add continuous_at_const),
    have hcx‚ÇÄ : c x‚ÇÄ = (g x‚ÇÄ, Œ≥ 1 ‚àò p),
    { simp only [c, hŒ¥x‚ÇÄ, function.comp, prod.mk.inj_iff, eq_self_iff_true, and_self] },
    rw [‚Üê hcx‚ÇÄ] at hW,
    filter_upwards [hc.eventually hW], rintro x ‚ü®hW, hx‚ü©,
    exact ‚ü®_, _, hx‚ü© },
  exact ‚ü®Œ¥, _, hŒ¥Œ©.and hŒ¥surr, ‚ü®‚ü®hŒ¥s0, hŒ¥t0, hŒ¥t1, Œª x, and.right, hŒ¥‚ü©, Œª x, and.left‚ü©‚ü©
end

/-- A tiny reformulation of `local_loops` where the existing `U` is open. -/
lemma local_loops_open [finite_dimensional ‚Ñù F]
  {x‚ÇÄ : E}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© fst ‚Åª¬π' U))
  (hg : continuous_at g x‚ÇÄ) (hb : continuous b)
  (hconv : g x‚ÇÄ ‚àà convex_hull ‚Ñù (connected_comp_in (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) $ b x‚ÇÄ)) :
  ‚àÉ (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U : set E), is_open U ‚àß x‚ÇÄ ‚àà U ‚àß surrounding_family_in g b Œ≥ U Œ© :=
begin
  obtain ‚ü®Œ≥, U, hU, hŒ≥‚ü© := local_loops hŒ©_op hg hb hconv,
  obtain ‚ü®V, hVU, hV, hx‚ÇÄV‚ü© := mem_nhds_iff.mp hU,
  exact ‚ü®Œ≥, V, hV, hx‚ÇÄV, hŒ≥.mono hVU‚ü©
end

end local_loops

/-- Function used in `satisfied_or_refund`. Rename. -/
def œÅ (t : ‚Ñù) : ‚Ñù := proj_I $ 2 * (1 - t)

lemma continuous_œÅ : continuous œÅ :=
continuous_proj_I.comp $ continuous_const.mul $ continuous_const.sub continuous_id

@[simp] lemma œÅ_eq_one {x : ‚Ñù} : œÅ x = 1 ‚Üî x ‚â§ 1 / 2 :=
by { rw [œÅ, proj_I_eq_one], split; intros; linarith }

@[simp] lemma œÅ_eq_one_of_le {x : ‚Ñù} (h : x ‚â§ 1 / 2) : œÅ x = 1 :=
œÅ_eq_one.mpr h

@[simp] lemma œÅ_eq_one_of_nonpos {x : ‚Ñù} (h : x ‚â§ 0) : œÅ x = 1 :=
œÅ_eq_one_of_le $ h.trans $ by norm_num

@[simp] lemma œÅ_eq_zero {x : ‚Ñù} : œÅ x = 0 ‚Üî 1 ‚â§ x :=
by { rw [œÅ, proj_I_eq_zero], split; intros; linarith }

@[simp] lemma œÅ_eq_zero_of_le {x : ‚Ñù} (h : 1 ‚â§ x) : œÅ x = 0 :=
œÅ_eq_zero.mpr h

lemma œÅ_zero : œÅ 0 = 1 := by simp
lemma œÅ_half : œÅ 2‚Åª¬π = 1 := by simp
lemma œÅ_one : œÅ 1 = 0 := by simp
lemma œÅ_mem_I {x : ‚Ñù} : œÅ x ‚àà I := proj_I_mem_Icc
lemma œÅ_nonneg (x : ‚Ñù) : 0 ‚â§ œÅ x := œÅ_mem_I.1

section satisfied_or_refund

variables {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F}
variables (h‚ÇÄ : surrounding_family g b Œ≥‚ÇÄ U) (h‚ÇÅ : surrounding_family g b Œ≥‚ÇÅ U)

/-- The homotopy of surrounding families of loops used in lemma `satisfied_or_refund`.
  Having this as a separate definition is useful, because the construction actually gives some
  more information about the homotopy than the theorem `satisfied_or_refund` gives. -/
def sf_homotopy (œÑ : ‚Ñù) (x : E) (t : ‚Ñù) :=
loop.of_path $ (h‚ÇÄ.path x $ œÅ œÑ * proj_I t).strans (h‚ÇÅ.path x $ œÅ (1 - œÑ) * proj_I t) $
  proj_Icc 0 1 zero_le_one (1 - œÑ)

variables {h‚ÇÄ h‚ÇÅ}

@[simp] lemma sf_homotopy_zero : sf_homotopy h‚ÇÄ h‚ÇÅ 0 = Œ≥‚ÇÄ :=
begin
  ext x t s,
  simp only [sf_homotopy, one_mul, œÅ_eq_one_of_nonpos, surrounding_family.path_extend_fract,
    sub_zero, loop.of_path_apply, unit_interval.mk_one, proj_Icc_right, path.strans_one, h‚ÇÄ.proj_I]
end

@[simp] lemma sf_homotopy_one : sf_homotopy h‚ÇÄ h‚ÇÅ 1 = Œ≥‚ÇÅ :=
begin
  ext x t s,
  simp only [sf_homotopy, path.strans_zero, unit_interval.mk_zero, one_mul, œÅ_eq_one_of_nonpos,
    surrounding_family.path_extend_fract, proj_Icc_left, loop.of_path_apply, sub_self,
    h‚ÇÅ.proj_I]
end

lemma _root_.continuous.sf_homotopy {X : Type*} [uniform_space X]
  [separated_space X] [locally_compact_space X]
  {œÑ t s : X ‚Üí ‚Ñù} {f : X ‚Üí E} (hœÑ : continuous œÑ) (hf : continuous f) (ht : continuous t)
  (hs : continuous s) : continuous (Œª x, sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ x) (f x) (t x) (s x)) :=
begin
  refine continuous.of_path _ _ _ _ hs,
  refine continuous.path_strans _ _ _ _ _ continuous_snd,
  { refine h‚ÇÄ.continuous_path hf.fst'.fst' _ continuous_snd,
    exact (continuous_œÅ.comp hœÑ.fst'.fst').mul (continuous_proj_I.comp ht.fst'.fst') },
  { refine h‚ÇÅ.continuous_path hf.fst'.fst' _ continuous_snd,
    refine (continuous_œÅ.comp _).mul (continuous_proj_I.comp ht.fst'.fst'),
    exact continuous_const.sub hœÑ.fst'.fst' },
  { intros x s hs, simp only [proj_Icc_eq_zero, sub_nonpos] at hs,
    simp only [hs, h‚ÇÄ.t‚ÇÄ, zero_mul, surrounding_family.path_apply, œÅ_eq_zero_of_le] },
  { intros x s hs, simp only [proj_Icc_eq_one] at hs,
    simp only [hs, h‚ÇÅ.t‚ÇÄ, zero_mul, surrounding_family.path_apply, œÅ_eq_zero_of_le] },
  { refine continuous_proj_Icc.comp (continuous_const.sub hœÑ.fst') }
end

/-- In this lemmas and the lemmas below we add `finite_dimensional ‚Ñù E` so that we can conclude
 `locally_compact_space E`. -/
lemma continuous_sf_homotopy [finite_dimensional ‚Ñù E] : continuous ‚Üø(sf_homotopy h‚ÇÄ h‚ÇÅ) :=
continuous.sf_homotopy continuous_fst continuous_snd.fst continuous_snd.snd.fst
  continuous_snd.snd.snd

lemma surrounding_family_sf_homotopy [finite_dimensional ‚Ñù E] (œÑ : ‚Ñù) :
  surrounding_family g b (sf_homotopy h‚ÇÄ h‚ÇÅ œÑ) U :=
begin
  constructor,
  { intros x t, simp only [sf_homotopy, unit_interval.mk_zero, zero_le_one, extend_extends,
      path.source, loop.of_path_apply, left_mem_Icc, fract_zero] },
  { intros x s,
    -- have h2t : œÅ œÑ * t ‚â§ 0 := mul_nonpos_of_nonneg_of_nonpos (œÅ_nonneg œÑ) ht,
    -- have h3t : œÅ (1 - œÑ) * t ‚â§ 0 := mul_nonpos_of_nonneg_of_nonpos (œÅ_nonneg _) ht,
    -- have h4t : t ‚â§ 1 := ht.trans zero_le_one,
    simp only [sf_homotopy, path.refl_strans_refl, path.refl_extend, loop.of_path_apply,
      proj_I_zero, mul_zero, surrounding_family.path_t‚ÇÄ] },
  { intros x t s, simp only [sf_homotopy, proj_I_proj_I] },
  -- { intros x t s ht, simp only [sf_homotopy, min_eq_left ht, min_self] },
  { intros x hx, cases le_total œÑ (1 / 2) with h h,
    { have : œÑ < 1 := h.trans_lt (by norm_num),
      refine (h‚ÇÄ.surrounds x hx).mono _,
      simp only [mul_one, loop.range_of_path, sf_homotopy, proj_I_one],
      refine subset.trans (by simp only [surrounding_family.range_path, œÅ_eq_one_of_le, h])
        (subset_range_strans_left $ by simp [this]) },
    { have : 0 < œÑ := lt_of_lt_of_le (by norm_num) h,
      have h : 1 - œÑ ‚â§ 1 / 2, { rw [sub_le], convert h, norm_num },
      refine (h‚ÇÅ.surrounds x hx).mono _,
      simp only [mul_one, loop.range_of_path, sf_homotopy, proj_I_one],
      refine subset.trans (by simp only [surrounding_family.range_path, œÅ_eq_one_of_le, h])
        (subset_range_strans_right $ by simp [this]) } },
  { exact continuous_const.sf_homotopy continuous_fst continuous_snd.fst continuous_snd.snd }
end

/-- A more precise version of `sf_homotopy_in`. -/
lemma sf_homotopy_in' {Œπ} (h‚ÇÄ : surrounding_family g b Œ≥‚ÇÄ U) (h‚ÇÅ : surrounding_family g b Œ≥‚ÇÅ U)
  (œÑ : Œπ ‚Üí ‚Ñù) (x : Œπ ‚Üí E) (i : Œπ) {V : set E} (hx : x i ‚àà V) {t : ‚Ñù} (ht : t ‚àà I) {s : ‚Ñù}
  (h_in‚ÇÄ : ‚àÄ i (hx : x i ‚àà V) (t ‚àà I) (s : ‚Ñù), œÑ i ‚â† 1 ‚Üí (x i, Œ≥‚ÇÄ (x i) t s) ‚àà Œ©)
  (h_in‚ÇÅ : ‚àÄ i (hx : x i ‚àà V) (t ‚àà I) (s : ‚Ñù), œÑ i ‚â† 0 ‚Üí (x i, Œ≥‚ÇÅ (x i) t s) ‚àà Œ©) :
  (x i, sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ i) (x i) t s) ‚àà Œ© :=
begin
  by_cases hœÑ0 : œÑ i = 0, { simp [hœÑ0], exact h_in‚ÇÄ i hx t ht s (by norm_num [hœÑ0]) },
  by_cases hœÑ1 : œÑ i = 1, { simp [hœÑ1], exact h_in‚ÇÅ i hx t ht s (by norm_num [hœÑ1]) },
  generalize hy : sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ i) (x i) t s = y,
  have h2y : y ‚àà range (sf_homotopy h‚ÇÄ h‚ÇÅ (œÑ i) (x i) t), { rw [‚Üê hy], exact mem_range_self _},
  rw [sf_homotopy, loop.range_of_path, proj_I_eq_self.mpr ht] at h2y,
  replace h2y := range_strans_subset h2y,
  rcases h2y with ‚ü®s', rfl‚ü©|‚ü®s', rfl‚ü©,
  { exact h_in‚ÇÄ _ hx _ (unit_interval.mul_mem œÅ_mem_I ht) _ hœÑ1 },
  { exact h_in‚ÇÅ _ hx _ (unit_interval.mul_mem œÅ_mem_I ht) _ hœÑ0 }
end

lemma sf_homotopy_in (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U Œ©)
  (œÑ : ‚Ñù) ‚¶Éx : E‚¶Ñ (hx : x ‚àà U) {t : ‚Ñù} (ht : t ‚àà I) {s : ‚Ñù} :
  (x, sf_homotopy h‚ÇÄ.to_sf h‚ÇÅ.to_sf œÑ x t s) ‚àà Œ© :=
sf_homotopy_in' h‚ÇÄ.to_sf h‚ÇÅ.to_sf (Œª _, œÑ) (Œª _, x) () hx ht
  (Œª i hx t ht s _, h‚ÇÄ.val_in hx)
  (Œª i hx t ht s _, h‚ÇÅ.val_in hx)

lemma surrounding_family_in_sf_homotopy [finite_dimensional ‚Ñù E]
  (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U Œ©) (œÑ : ‚Ñù) :
  surrounding_family_in g b (sf_homotopy h‚ÇÄ.to_sf h‚ÇÅ.to_sf œÑ) U Œ© :=
‚ü®surrounding_family_sf_homotopy _, Œª x hx t ht s hs, sf_homotopy_in _ _ _ hx ht‚ü©

lemma satisfied_or_refund [finite_dimensional ‚Ñù E] {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F}
  (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U Œ©) :
  ‚àÉ Œ≥ : ‚Ñù ‚Üí E ‚Üí ‚Ñù ‚Üí loop F,
    (‚àÄ œÑ, surrounding_family_in g b (Œ≥ œÑ) U Œ©) ‚àß
    Œ≥ 0 = Œ≥‚ÇÄ ‚àß
    Œ≥ 1 = Œ≥‚ÇÅ ‚àß
    continuous ‚ÜøŒ≥ :=
‚ü®sf_homotopy h‚ÇÄ.to_sf h‚ÇÅ.to_sf, surrounding_family_in_sf_homotopy h‚ÇÄ h‚ÇÅ, sf_homotopy_zero,
  sf_homotopy_one, continuous_sf_homotopy‚ü©

end satisfied_or_refund

section extend_loops

variables [finite_dimensional ‚Ñù E]

/-- Loop data consists of a compact subset of a surrounding family on an open set `U`, with a
  specified compact subset `K`. -/
@[nolint has_inhabited_instance]
structure loop_data (g b : E ‚Üí F) (Œ© : set (E √ó F)) :=
(K U : set E)
(Œ≥ :  E ‚Üí ‚Ñù ‚Üí loop F)
(hK : is_compact K)
(hU : is_open U)
(hKU : K ‚äÜ U)
(hŒ≥ : surrounding_family_in g b Œ≥ U Œ©)

/-
Note: we also want add the condition that `Œ≥ = Œ≥‚ÇÄ` outside a neighborhood of `U‚ÇÅ·∂ú`.
This makes it easier to find the limit of a sequence of these constructions.
Todo: we might need that `Œ≥ = Œ≥‚ÇÄ` on a neighborhood of `(U‚ÇÄ ‚à™ U‚ÇÅ)·∂ú` to ensure that
`(U‚ÇÄ ‚à™ U‚ÇÅ)·∂ú ‚äÜ extended_invariant ...`
-/
lemma extend_loops {U‚ÇÄ U‚ÇÅ K‚ÇÄ K‚ÇÅ : set E} (hU‚ÇÄ : is_open U‚ÇÄ) (hU‚ÇÅ : is_open U‚ÇÅ)
  (hK‚ÇÄ : is_compact K‚ÇÄ) (hK‚ÇÅ : is_compact K‚ÇÅ) (hKU‚ÇÄ : K‚ÇÄ ‚äÜ U‚ÇÄ) (hKU‚ÇÅ : K‚ÇÅ ‚äÜ U‚ÇÅ)
  {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F}
  (h‚ÇÄ : surrounding_family_in g b Œ≥‚ÇÄ U‚ÇÄ Œ©) (h‚ÇÅ : surrounding_family_in g b Œ≥‚ÇÅ U‚ÇÅ Œ©) :
  ‚àÉ (U ‚àà ùìùÀ¢ (K‚ÇÄ ‚à™ K‚ÇÅ)) (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F),
    surrounding_family_in g b Œ≥ U Œ© ‚àß
    (‚àÄ·∂† x in ùìùÀ¢ K‚ÇÄ, Œ≥ x = Œ≥‚ÇÄ x) ‚àß
    (‚àÄ·∂† x in ùìùÀ¢ U‚ÇÅ·∂ú, Œ≥ x = Œ≥‚ÇÄ x) :=
begin
  obtain ‚ü®V‚ÇÄ, hV‚ÇÄ, hKV‚ÇÄ, hVU‚ÇÄ, hcV‚ÇÄ‚ü© := exists_open_between_and_is_compact_closure hK‚ÇÄ hU‚ÇÄ hKU‚ÇÄ,
  let L‚ÇÅ := K‚ÇÅ \ U‚ÇÄ,
  have hL‚ÇÅ : is_compact L‚ÇÅ := hK‚ÇÅ.diff hU‚ÇÄ,
  have hV‚ÇÄL‚ÇÅ : disjoint (closure V‚ÇÄ) L‚ÇÅ := disjoint_diff.mono hVU‚ÇÄ subset.rfl,
  obtain ‚ü®V‚ÇÇ, hV‚ÇÇ, hLV‚ÇÇ, h2V‚ÇÇ, hcV‚ÇÇ‚ü© :=
  exists_open_between_and_is_compact_closure hL‚ÇÅ
    (hcV‚ÇÄ.is_closed.is_open_compl.inter hU‚ÇÅ)
    (subset_inter (disjoint_iff_subset_compl_left.mp hV‚ÇÄL‚ÇÅ) $ (diff_subset _ _).trans hKU‚ÇÅ),
  obtain ‚ü®V‚ÇÅ, hV‚ÇÅ, hLV‚ÇÅ, hV‚ÇÅ‚ÇÇ, hcV‚ÇÅ‚ü© :=
    exists_open_between_and_is_compact_closure hL‚ÇÅ hV‚ÇÇ hLV‚ÇÇ,
  rw [subset_inter_iff, ‚Üê disjoint_iff_subset_compl_left] at h2V‚ÇÇ,
  rcases h2V‚ÇÇ with ‚ü®hV‚ÇÄ‚ÇÇ, hV‚ÇÇU‚ÇÅ‚ü©,
  have hVU‚ÇÅ : V‚ÇÅ ‚äÜ U‚ÇÅ := subset_closure.trans (hV‚ÇÅ‚ÇÇ.trans $ subset_closure.trans hV‚ÇÇU‚ÇÅ),
  have hdisj : disjoint (closure V‚ÇÄ ‚à™ V‚ÇÇ·∂ú) (closure V‚ÇÅ),
  { refine disjoint.union_left (hV‚ÇÄ‚ÇÇ.mono_right (hV‚ÇÅ‚ÇÇ.trans subset_closure)) _,
    rw [disjoint_iff_subset_compl_left, compl_compl], exact hV‚ÇÅ‚ÇÇ },
  refine ‚ü®V‚ÇÄ ‚à™ (U‚ÇÅ ‚à© U‚ÇÄ) ‚à™ V‚ÇÅ, ((hV‚ÇÄ.union $ hU‚ÇÅ.inter hU‚ÇÄ).union hV‚ÇÅ).mem_nhds_set.mpr _, _‚ü©,
  { refine union_subset (hKV‚ÇÄ.trans $ (subset_union_left _ _).trans $ subset_union_left _ _) _,
    rw [‚Üê inter_union_diff K‚ÇÅ], exact
      union_subset_union ((inter_subset_inter_left _ hKU‚ÇÅ).trans $ subset_union_right _ _) hLV‚ÇÅ },
  obtain ‚ü®œÅ, h0œÅ, h1œÅ, hœÅ‚ü© := exists_continuous_zero_one_of_closed
    (is_closed_closure.union hV‚ÇÇ.is_closed_compl) is_closed_closure hdisj,
  let h‚ÇÄ' : surrounding_family_in g b Œ≥‚ÇÄ (U‚ÇÅ ‚à© U‚ÇÄ) Œ© := h‚ÇÄ.mono (inter_subset_right _ _),
  let h‚ÇÅ' : surrounding_family_in g b Œ≥‚ÇÅ (U‚ÇÅ ‚à© U‚ÇÄ) Œ© := h‚ÇÅ.mono (inter_subset_left _ _),
  let Œ≥ := sf_homotopy h‚ÇÄ'.to_sf h‚ÇÅ'.to_sf,
  have hŒ≥ : ‚àÄ œÑ, surrounding_family_in g b (Œ≥ œÑ) (U‚ÇÅ ‚à© U‚ÇÄ) Œ© :=
    surrounding_family_in_sf_homotopy _ _,
  have heq1 : ‚àÄ x ‚àà closure V‚ÇÄ ‚à™ V‚ÇÇ·∂ú, Œ≥ (œÅ x) x = Œ≥‚ÇÄ x,
  { intros x hx, simp_rw [Œ≥, h0œÅ hx, pi.zero_apply, sf_homotopy_zero] },
  have heq2 : ‚àÄ x ‚àà V‚ÇÄ, Œ≥ (œÅ x) x = Œ≥‚ÇÄ x :=
  Œª x hx, heq1 x (subset_closure.trans (subset_union_left _ _) hx),
  refine ‚ü®Œª x t, Œ≥ (œÅ x) x t, _, _, _‚ü©,
  { refine ‚ü®‚ü®Œª x, (hŒ≥ $ œÅ x).base x, Œª x, (hŒ≥ $ œÅ x).t‚ÇÄ x,
      Œª x, (hŒ≥ $ œÅ x).proj_I x, _, _‚ü©, _‚ü©,
    { rintro x ((hx|hx)|hx),
      { simp_rw [heq2 x hx, h‚ÇÄ.surrounds x (hVU‚ÇÄ $ subset_closure hx)] },
      { simp_rw [Œ≥, (hŒ≥ $ œÅ x).surrounds x hx] },
      { simp_rw [Œ≥, h1œÅ (subset_closure hx), pi.one_apply, sf_homotopy_one,
          h‚ÇÅ.surrounds x (hVU‚ÇÅ hx)] } },
    { exact continuous.sf_homotopy œÅ.continuous.fst' continuous_fst
        continuous_snd.fst continuous_snd.snd },
    { intros x hx t ht s _, refine sf_homotopy_in' _ _ _ id _ hx ht _ _,
      { intros x hx t ht s hœÅx, refine h‚ÇÄ.val_in _, rcases hx with (hx|‚ü®-,hx‚ü©)|hx,
        { exact (subset_closure.trans hVU‚ÇÄ) hx },
        { exact hx },
        { exact (hœÅx $ h1œÅ $ subset_closure hx).elim } },
      { intros x hx t ht s hœÅx, refine h‚ÇÅ.val_in _, rcases hx with (hx|‚ü®hx,-‚ü©)|hx,
        { exact (hœÅx $ h0œÅ $ subset_closure.trans (subset_union_left _ _) hx).elim },
        { exact hx },
        { exact hVU‚ÇÅ hx } } } },
  { exact eventually_of_mem (hV‚ÇÄ.mem_nhds_set.mpr hKV‚ÇÄ) heq2 },
  { refine eventually_of_mem
      (is_closed_closure.is_open_compl.mem_nhds_set.mpr $ compl_subset_compl.mpr hV‚ÇÇU‚ÇÅ)
      (Œª x hx, heq1 x $ mem_union_right _ $ compl_subset_compl.mpr subset_closure hx) },
end

/-! We now extract all components of this theorem, which makes them easier to use in the recursion
  in `exists_surrounding_loops` -/

/-- The domain of an arbitrary witness of `extend_loops`. -/
def extended_domain (l‚ÇÄ l‚ÇÅ : loop_data g b Œ©) : set E :=
interior $ classical.some $ extend_loops l‚ÇÄ.hU l‚ÇÅ.hU l‚ÇÄ.hK l‚ÇÅ.hK l‚ÇÄ.hKU l‚ÇÅ.hKU l‚ÇÄ.hŒ≥ l‚ÇÅ.hŒ≥

/-- An arbitrary witness of `extend_loops` with domain specified by `extended_domain`. -/
def extended_loops (l‚ÇÄ l‚ÇÅ : loop_data g b Œ©) : E ‚Üí ‚Ñù ‚Üí loop F :=
classical.some $ classical.some_spec $ classical.some_spec $
  extend_loops l‚ÇÄ.hU l‚ÇÅ.hU l‚ÇÄ.hK l‚ÇÅ.hK l‚ÇÄ.hKU l‚ÇÅ.hKU l‚ÇÄ.hŒ≥ l‚ÇÅ.hŒ≥

/-- The (interior of the) set where `extended_loops` didn't change -/
def extended_invariant (l‚ÇÄ l‚ÇÅ : loop_data g b Œ©) : set E :=
interior { x | extended_loops l‚ÇÄ l‚ÇÅ x = l‚ÇÄ.Œ≥ x }

variables {l‚ÇÄ l‚ÇÅ : loop_data g b Œ©}

lemma is_open_extended_domain  : is_open (extended_domain l‚ÇÄ l‚ÇÅ) :=
is_open_interior

lemma subset_extended_domain : l‚ÇÄ.K ‚à™ l‚ÇÅ.K ‚äÜ extended_domain l‚ÇÄ l‚ÇÅ :=
subset_interior_iff_mem_nhds_set.mpr $ classical.some $ classical.some_spec $
  extend_loops l‚ÇÄ.hU l‚ÇÅ.hU l‚ÇÄ.hK l‚ÇÅ.hK l‚ÇÄ.hKU l‚ÇÅ.hKU l‚ÇÄ.hŒ≥ l‚ÇÅ.hŒ≥

lemma extended_domain_mem_nhds_set :
  extended_domain l‚ÇÄ l‚ÇÅ ‚àà ùìùÀ¢ (l‚ÇÄ.K ‚à™ l‚ÇÅ.K) :=
is_open_extended_domain.mem_nhds_set.mpr subset_extended_domain

lemma surrounding_family_extended_loops :
   surrounding_family_in g b (extended_loops l‚ÇÄ l‚ÇÅ) (extended_domain l‚ÇÄ l‚ÇÅ) Œ© :=
(classical.some_spec $ classical.some_spec $ classical.some_spec $
  extend_loops l‚ÇÄ.hU l‚ÇÅ.hU l‚ÇÄ.hK l‚ÇÅ.hK l‚ÇÄ.hKU l‚ÇÅ.hKU l‚ÇÄ.hŒ≥ l‚ÇÅ.hŒ≥).1.mono interior_subset

lemma is_open_extended_invariant : is_open (extended_invariant l‚ÇÄ l‚ÇÅ) :=
is_open_interior

lemma subset_extended_invariant : l‚ÇÄ.K ‚äÜ extended_invariant l‚ÇÄ l‚ÇÅ :=
subset_interior_iff_mem_nhds_set.mpr
  (classical.some_spec $ classical.some_spec $ classical.some_spec $
    extend_loops l‚ÇÄ.hU l‚ÇÅ.hU l‚ÇÄ.hK l‚ÇÅ.hK l‚ÇÄ.hKU l‚ÇÅ.hKU l‚ÇÄ.hŒ≥ l‚ÇÅ.hŒ≥).2.1

lemma compl_subset_extended_invariant : l‚ÇÅ.U·∂ú ‚äÜ extended_invariant l‚ÇÄ l‚ÇÅ :=
subset_interior_iff_mem_nhds_set.mpr
  (classical.some_spec $ classical.some_spec $ classical.some_spec $
    extend_loops l‚ÇÄ.hU l‚ÇÅ.hU l‚ÇÄ.hK l‚ÇÅ.hK l‚ÇÄ.hKU l‚ÇÅ.hKU l‚ÇÄ.hŒ≥ l‚ÇÅ.hŒ≥).2.2

lemma extended_invariant_mem_nhds_set :
  extended_invariant l‚ÇÄ l‚ÇÅ ‚àà ùìùÀ¢ l‚ÇÄ.K :=
is_open_extended_invariant.mem_nhds_set.mpr subset_extended_invariant

lemma extended_loops_eq_left {x : E} (hx : x ‚àà extended_invariant l‚ÇÄ l‚ÇÅ) :
  extended_loops l‚ÇÄ l‚ÇÅ x = l‚ÇÄ.Œ≥ x :=
(interior_subset hx : _)

/-- `l‚ÇÄ.extend l‚ÇÅ` extends the `loop_data` `l‚ÇÄ` using `l‚ÇÅ`, making sure that the extended version
  is the same as `l‚ÇÄ` on a neighborhood of `l‚ÇÄ.K`. -/
def loop_data.extend (l‚ÇÄ l‚ÇÅ : loop_data g b Œ©) : loop_data g b Œ© :=
‚ü®l‚ÇÄ.K ‚à™ l‚ÇÅ.K, extended_domain l‚ÇÄ l‚ÇÅ, extended_loops l‚ÇÄ l‚ÇÅ, l‚ÇÄ.hK.union (l‚ÇÅ.hK),
  is_open_extended_domain, subset_extended_domain, surrounding_family_extended_loops‚ü©

end extend_loops

section surrounding_loops
variables [finite_dimensional ‚Ñù E]

/-- Given a initial `loop_data` and a sequence of them, repeatedly extend `l‚ÇÄ` using `l`. -/
@[simp] noncomputable def loop_data_seq (l‚ÇÄ : loop_data g b Œ©) (l : ‚Ñï ‚Üí loop_data g b Œ©) :
  ‚Ñï ‚Üí loop_data g b Œ©
| 0     := l‚ÇÄ
| (n+1) := (loop_data_seq n).extend $ l n

variables {l‚ÇÄ : loop_data g b Œ©} {l : ‚Ñï ‚Üí loop_data g b Œ©} {n : ‚Ñï} {x y : E}

lemma loop_data_seq_succ_Œ≥ :
  (loop_data_seq l‚ÇÄ l (n + 1)).Œ≥ = extended_loops (loop_data_seq l‚ÇÄ l n) (l n) :=
by rw [loop_data_seq, loop_data.extend]

lemma loop_data_seq_K_mono : monotone (Œª n, (loop_data_seq l‚ÇÄ l n).K) :=
by { refine monotone_nat_of_le_succ _, intro n, rw [loop_data_seq], apply subset_union_left, }

lemma subset_loop_data_seq_K0 (n : ‚Ñï) : l‚ÇÄ.K ‚äÜ (loop_data_seq l‚ÇÄ l n).K :=
loop_data_seq_K_mono (zero_le n)

lemma subset_loop_data_seq_K : (l n).K ‚äÜ (loop_data_seq l‚ÇÄ l (n+1)).K :=
subset_union_right _ _

lemma union_subset_loop_data_seq_K : l‚ÇÄ.K ‚à™ (‚ãÉ n, (l n).K) ‚äÜ ‚ãÉ n, (loop_data_seq l‚ÇÄ l n).K :=
let K := Œª n, (loop_data_seq l‚ÇÄ l n).K in
union_subset (subset_Union K 0) $ Union_subset $
  Œª n, subset_loop_data_seq_K.trans $ subset_Union K (n+1)

lemma eventually_mem_loop_data_seq_K (hx : x ‚àà l‚ÇÄ.K ‚à™ (‚ãÉ n, (l n).K)) :
  ‚àÄ·∂† n in at_top, x ‚àà (loop_data_seq l‚ÇÄ l n).K :=
begin
  rcases union_subset_loop_data_seq_K hx with ‚ü®_, ‚ü®n, rfl‚ü©, hx‚ü©,
  exact eventually_at_top.mpr ‚ü®n, Œª m hm, loop_data_seq_K_mono hm hx‚ü©
end

lemma loop_data_seq_locally_eventually_constant (l‚ÇÄ : loop_data g b Œ©)
  (hl : locally_finite (Œª n, (l n).U)) :
  locally_eventually_constant_on (Œª n, (loop_data_seq l‚ÇÄ l n).Œ≥) at_top univ :=
begin
  intros x hx,
  obtain ‚ü®O, hO, hWO‚ü© := hl x,
  simp_rw [eventually_constant_on, ‚Üê eventually_constant_at_top_nat],
  use [O, hO, hWO.to_finset.sup id + 1],
  intros m hm, ext1 ‚ü®y, hy‚ü©,
  simp_rw [set.restrict_apply, subtype.coe_mk, loop_data_seq],
  apply extended_loops_eq_left,
  refine compl_subset_extended_invariant _,
  intro h2y,
  apply hm.not_lt,
  rw [nat.lt_add_one_iff],
  refine finset.le_sup (_ : m ‚àà _),
  simp_rw [hWO.mem_to_finset, mem_set_of_eq],
  exact ‚ü®y, h2y, hy‚ü©
end

lemma loop_data_seq_eq0 (l‚ÇÄ : loop_data g b Œ©) (l : ‚Ñï ‚Üí loop_data g b Œ©) (n : ‚Ñï) :
  ‚àÄ·∂† x in ùìùÀ¢ l‚ÇÄ.K, (loop_data_seq l‚ÇÄ l n).Œ≥ x = l‚ÇÄ.Œ≥ x :=
begin
  have : ‚àÄ·∂† x in ùìùÀ¢ l‚ÇÄ.K, ‚àÄ m ‚àà Iio n,
    (loop_data_seq l‚ÇÄ l (m + 1)).Œ≥ x = (loop_data_seq l‚ÇÄ l m).Œ≥ x,
  { rw [eventually_all_finite (finite_Iio n)], rintro m (hm : m < n),
    have : extended_invariant (loop_data_seq l‚ÇÄ l m) (l m) ‚àà ùìùÀ¢ l‚ÇÄ.K,
    { refine is_open_extended_invariant.mem_nhds_set.mpr _,
      refine (loop_data_seq_K_mono (zero_le m)).trans subset_extended_invariant },
    refine eventually_of_mem this _,
    intros x hx, convert extended_loops_eq_left hx, rw [loop_data_seq_succ_Œ≥] },
  refine this.mono (Œª x hx, _), clear this,
  induction n with n ih,
  { refl, },
  { refine (hx _ $ lt_add_one n).trans (ih $ Œª m hm, hx m $ lt_trans hm $ lt_add_one n) }
end

/-- The eventual value of the sequence `Œª n, (loop_data_seq l‚ÇÄ l).Œ≥`. -/
def lim_loop (l‚ÇÄ : loop_data g b Œ©) (l : ‚Ñï ‚Üí loop_data g b Œ©) (x : E) : ‚Ñù ‚Üí loop F :=
eventual_value (Œª n, (loop_data_seq l‚ÇÄ l n).Œ≥ x) at_top

/-- This gives only the pointwise behavior of `lim_loop`, use the interface for
  `eventually_constant_on` for the local behavior. -/
lemma exists_lim_loop_eq (l‚ÇÄ : loop_data g b Œ©) (l : ‚Ñï ‚Üí loop_data g b Œ©)
  (hl : locally_finite (Œª n, (l n).U)) (x : E) :
  ‚àÉ N, lim_loop l‚ÇÄ l x = (loop_data_seq l‚ÇÄ l N).Œ≥ x :=
((loop_data_seq_locally_eventually_constant l‚ÇÄ hl).eventually_constant $ mem_univ x)
  .exists_eventual_value_eq

lemma lim_loop_eq0 (hl : locally_finite (Œª n, (l n).U))
  {K : set E} (hK : is_compact K) (h3K : K ‚äÜ l‚ÇÄ.K) :
  ‚àÄ·∂† x in ùìùÀ¢ K, lim_loop l‚ÇÄ l x = l‚ÇÄ.Œ≥ x :=
begin
  obtain ‚ü®O, hO, h‚ü© := (loop_data_seq_locally_eventually_constant l‚ÇÄ hl)
    .exists_nhds_set_of_is_compact hK (subset_univ K),
  obtain ‚ü®n, hn‚ü© := h.exists_eventual_value_eq,
  refine ((loop_data_seq_eq0 l‚ÇÄ l n).filter_mono $ monotone_nhds_set $ h3K).mp _,
  refine eventually_of_mem hO _,
  intros x hx h2x,
  simp_rw [lim_loop, hn x hx, h2x]
end

lemma lim_surrounding_family_in (l‚ÇÄ : loop_data g b Œ©) (hl : locally_finite (Œª n, (l n).U))
  (hU : U ‚äÜ l‚ÇÄ.K ‚à™ ‚ãÉ n, (l n).K) :
  surrounding_family_in g b (lim_loop l‚ÇÄ l) U Œ© :=
begin
  have := loop_data_seq_locally_eventually_constant l‚ÇÄ hl,
  refine ‚ü®‚ü®_, _, _, _, _‚ü©, _‚ü©,
  { intro x, obtain ‚ü®n, hn‚ü© := exists_lim_loop_eq l‚ÇÄ l hl x,
    simp_rw [hn], exact (loop_data_seq l‚ÇÄ l n).hŒ≥.base x },
  { intros x s, obtain ‚ü®n, hn‚ü© := exists_lim_loop_eq l‚ÇÄ l hl x,
    simp_rw [hn], exact (loop_data_seq l‚ÇÄ l n).hŒ≥.t‚ÇÄ x s },
  { intros x t s, obtain ‚ü®n, hn‚ü© := exists_lim_loop_eq l‚ÇÄ l hl x,
    simp_rw [hn], exact (loop_data_seq l‚ÇÄ l n).hŒ≥.proj_I x t s },
  { intros x hx,
    obtain ‚ü®n, h1n : (loop_data_seq l‚ÇÄ l n).Œ≥ x = lim_loop l‚ÇÄ l x,
      h2n : x ‚àà (loop_data_seq l‚ÇÄ l n).K‚ü© :=
      ((eventually_eq_eventual_value
        (this.eventually_constant $ mem_univ x)).and $ eventually_mem_loop_data_seq_K (hU hx)).exists,
    rw [‚Üê h1n], refine (loop_data_seq l‚ÇÄ l n).hŒ≥.surrounds x ((loop_data_seq l‚ÇÄ l n).hKU h2n) },
  { simp_rw [continuous_iff_continuous_at],
    rintro ‚ü®x, t, s‚ü©,
    obtain ‚ü®O, hO, hgO‚ü© := this x (mem_univ x),
    obtain ‚ü®n, hn‚ü© := (eventually_eq_eventual_value hgO).exists,
    dsimp at hn,
    simp only [function.funext_iff, eventual_value_apply hgO, restrict_apply, loop.ext_iff,
      set_coe.forall, subtype.coe_mk] at hn,
    refine (continuous_at_congr (eventually_of_mem (prod_is_open.mem_nhds hO univ_mem) _)).mp _,
    swap, { exact Œª (x : E √ó ‚Ñù √ó ‚Ñù) hx, hn x.1 (mem_prod.2 hx).1 x.2.1 x.2.2 },
    exact (loop_data_seq l‚ÇÄ l n).hŒ≥.cont.continuous_at },
  { intros x hx,
    obtain ‚ü®n, h1n : (loop_data_seq l‚ÇÄ l n).Œ≥ x = lim_loop l‚ÇÄ l x,
      h2n : x ‚àà (loop_data_seq l‚ÇÄ l n).K‚ü© :=
      ((eventually_eq_eventual_value
        (this.eventually_constant $ mem_univ x)).and $ eventually_mem_loop_data_seq_K (hU hx)).exists,
    rw [‚Üê h1n], refine (loop_data_seq l‚ÇÄ l n).hŒ≥.val_in' x ((loop_data_seq l‚ÇÄ l n).hKU h2n) },
end

lemma exists_surrounding_loops [finite_dimensional ‚Ñù F]
  (hK : is_compact K) (hC : is_closed C) (hU : is_open U) (hCU : C ‚äÜ U)
  (hŒ©_op : is_open (Œ© ‚à© fst ‚Åª¬π' U))
  (hg : ‚àÄ x ‚àà C, continuous_at g x) (hb : continuous b)
  (hconv : ‚àÄ x ‚àà C, g x ‚àà convex_hull ‚Ñù (connected_comp_in (prod.mk x ‚Åª¬π' Œ©) $ b x))
  {Œ≥‚ÇÄ :  E ‚Üí ‚Ñù ‚Üí loop F}
  (hŒ≥‚ÇÄ_surr : ‚àÉ V ‚àà ùìùÀ¢ K, surrounding_family_in g b Œ≥‚ÇÄ V Œ©) :
  ‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, surrounding_family_in g b Œ≥ C Œ© ‚àß ‚àÄ·∂† x in ùìùÀ¢ K, Œ≥ x = Œ≥‚ÇÄ x :=
begin
  /-
  Translation:
  Notes | Formalization
  ------+--------------
  Œ≥     | Œ≥‚ÇÄ
  U‚ÇÄ    | V
  U·µ¢    | W i
  K·µ¢    | L i
  cl(U) | C  -- C is the closure of U in the blueprint
  (-)   | U' -- an open neighborhood of C
  -/
  rcases hŒ≥‚ÇÄ_surr with ‚ü®V, hV, hŒ≥‚ÇÄ‚ü©,
  rw [mem_nhds_set_iff_exists] at hV, rcases hV with ‚ü®U‚ÇÄ, hU‚ÇÄ, hKU‚ÇÄ, hU‚ÇÄV‚ü©,
  let P := Œª N : set E, ‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, surrounding_family_in g b Œ≥ N Œ©,
  have hP : antitone P, { rintro s t hst ‚ü®Œ≥, hŒ≥‚ü©, exact ‚ü®Œ≥, hŒ≥.mono hst‚ü© },
  have h0P : P ‚àÖ := ‚ü®Œ≥‚ÇÄ, hŒ≥‚ÇÄ.mono (empty_subset _)‚ü©,
  have h2P : ‚àÄ x ‚àà C, ‚àÉ V ‚àà ùìù x, P V,
  { intros x hx,
    obtain ‚ü®Œ≥, W, hW, hxW, hŒ≥‚ü© :=
      local_loops_open ‚ü®U, hU.mem_nhds $ hCU hx, hŒ©_op‚ü© (hg x hx) hb (hconv x hx),
    refine ‚ü®W, hW.mem_nhds hxW, Œ≥, hŒ≥‚ü© },
  obtain ‚ü®L, W, hL, hW, hPW, hLW, hlW, hCL‚ü© :=
    exists_locally_finite_subcover_of_locally hC hP h0P h2P,
  choose Œ≥ hŒ≥ using hPW,
  let l‚ÇÄ : loop_data g b Œ© :=
  ‚ü®K, U‚ÇÄ, Œ≥‚ÇÄ, hK, hU‚ÇÄ, hKU‚ÇÄ, hŒ≥‚ÇÄ.mono hU‚ÇÄV‚ü©,
  let l : ‚Ñï ‚Üí loop_data g b Œ© := Œª n, ‚ü®L n, W n, Œ≥ n, hL n, hW n, hLW n, hŒ≥ n‚ü©,
  refine ‚ü®lim_loop l‚ÇÄ l, lim_surrounding_family_in l‚ÇÄ hlW (hCL.trans $ subset_union_right _ _),
    lim_loop_eq0 (hlW : _) hK subset.rfl‚ü©,
end

end surrounding_loops

-- #lint
-- #print axioms satisfied_or_refund
-- #print axioms extend_loops
-- #print axioms exists_surrounding_loops
