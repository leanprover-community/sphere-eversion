import geometry.manifold.smooth_manifold_with_corners

import to_mathlib.topology.local_homeomorph

namespace charted_space

section topological_space

open set

variables (H : Type*) (M : Type*) [topological_space H] [topological_space M] [charted_space H M]

@[simp] lemma Union_source_eq_univ : (‚ãÉ (x : M), (chart_at H x).source) = (univ : set M) :=
eq_univ_iff_forall.mpr (Œª x, mem_Union.mpr ‚ü®x, mem_chart_source H x‚ü©)

variables {M}

lemma is_open_iff (s : set M) :
  is_open s ‚Üî ‚àÄ (x : M), is_open $ chart_at H x '' ((chart_at H x).source ‚à© s) :=
begin
  refine ‚ü®Œª h x, (chart_at H x).image_open_of_open' h, Œª h, _‚ü©,
  rw [‚Üê s.inter_univ, ‚Üê Union_source_eq_univ H M, s.inter_Union],
  refine is_open_Union (Œª x, _),
  have : s ‚à© (chart_at H x).source ‚äÜ (chart_at H x).source := inter_subset_right _ _,
  rw [(chart_at H x).is_open_image_iff_of_subset_source this, inter_comm],
  exact h x,
end

end topological_space

section normed_add_comm_group

open_locale topological_space
open metric (hiding mem_nhds_iff ball) set

variables {E M H : Type*} [topological_space H] [topological_space M] [charted_space H M]
variables [normed_add_comm_group E] [normed_space ‚Ñù E]
variables (I : model_with_corners ‚Ñù E H)

def ball (x : M) (r : ‚Ñù) := (ext_chart_at I x).symm '' metric.ball (ext_chart_at I x x) r

lemma nhds_has_basis_balls_of_open_cov (x : M)
  {Œπ : Type*} {s : Œπ ‚Üí set M} (s_op : ‚àÄ j, is_open $ s j) (cov : (‚ãÉ j, s j) = univ) :
  (ùìù x).has_basis (Œª r, 0 < r ‚àß
                         metric.ball (ext_chart_at I x x) r ‚äÜ (ext_chart_at I x).target ‚àß
                         ‚àÉ j, charted_space.ball I x r ‚äÜ s j)
                   (charted_space.ball I x) :=
begin
  sorry,
/- Old proof: could assume `M` was charted over `E` and so use `chart_at` instead of `ext_chart_at`

  -- MASSIVE golfing opportunity!
  obtain ‚ü®j, hj‚ü© : ‚àÉ j, x ‚àà s j, by { simpa only [mem_Union, ‚Üê cov] using mem_univ x, },
  replace hj : s j ‚àà ùìù x := mem_nhds_iff.mpr ‚ü®s j, subset.rfl, s_op j, hj‚ü©,
  have hx : (chart_at E x).source ‚àà ùìù x := -- cf `ext_chart_at_source_mem_nhds`
    is_open.mem_nhds (chart_at E x).open_source (mem_chart_source E x),
  refine filter.has_basis_iff.mpr (Œª n, ‚ü®Œª hn, _, _‚ü©),
  { let m := s j ‚à© n ‚à© (chart_at E x).to_local_equiv.source,
    have hm : m ‚àà ùìù x := filter.inter_mem (filter.inter_mem hj hn) hx,
    replace hm : (chart_at E x) '' m ‚àà ùìù (chart_at E x x),
    { rw ‚Üê (chart_at E x).map_nhds_eq (mem_chart_source E x),
      exact filter.image_mem_map hm, },
    obtain ‚ü®r, hr‚ÇÄ, hr‚ÇÅ‚ü© :=
      (filter.has_basis_iff.mp (@nhds_basis_ball E _ (chart_at E x x)) _).mp hm,
    refine ‚ü®r, ‚ü®hr‚ÇÄ, hr‚ÇÅ.trans _, ‚ü®j, _‚ü©‚ü©, _‚ü©,
    { exact ((chart_at E x).maps_to.mono (inter_subset_right _ _) subset.rfl).image_subset },
    { suffices : m ‚äÜ s j,
      { refine subset.trans _ this,
        convert monotone_image hr‚ÇÅ,
        exact (local_equiv.symm_image_image_of_subset_source _
          (set.inter_subset_right _ _)).symm, },
      exact (set.inter_subset_left _ _).trans (set.inter_subset_left _ _), },
    { suffices : m ‚äÜ n,
      { refine subset.trans _ this,
        convert monotone_image hr‚ÇÅ,
        exact (local_equiv.symm_image_image_of_subset_source _
          (set.inter_subset_right _ _)).symm, },
      exact (set.inter_subset_left _ _).trans (set.inter_subset_right _ _), }, },
  { rintros ‚ü®r, ‚ü®hr‚ÇÄ, hr‚ÇÅ, -‚ü©, hr‚ÇÇ‚ü©,
    replace hr‚ÇÄ : metric.ball (chart_at E x x) r ‚àà ùìù (chart_at E x x) := ball_mem_nhds _ hr‚ÇÄ,
    rw [‚Üê (chart_at E x).map_nhds_eq (mem_chart_source E x), filter.mem_map] at hr‚ÇÄ,
    replace hr‚ÇÄ := filter.inter_mem hx hr‚ÇÄ,
    rw ‚Üê (chart_at E x).symm_image_eq_source_inter_preimage hr‚ÇÅ at hr‚ÇÄ,
    filter_upwards [hr‚ÇÄ] using hr‚ÇÇ, },
-/
end

end normed_add_comm_group

end charted_space
