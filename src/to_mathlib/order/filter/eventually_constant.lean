/-
Copyright (c) 2022 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
-- in mathlib, this should probably import
-- import order.filter.at_top_bot
-- and topology.separation should import this
-- import topology.basic
import topology.separation
/-!
# Eventually constant sequences

Related: `monotonic_sequence_limit_index`
-/

open_locale topological_space

namespace filter

variables {Œ± Œ≤ Œ≥ : Type*} {g : Œ± ‚Üí Œ≤} {f : filter Œ±} {x : Œ±} {y : Œ≤}

def eventually_constant (g : Œ± ‚Üí Œ≤) (f : filter Œ±) : Prop :=
‚àÉ y : Œ≤, ‚àÄ·∂† x in f, g x = y

lemma eventually_constant_iff_tendsto : eventually_constant g f ‚Üî ‚àÉ x : Œ≤, tendsto g f (pure x) :=
by simp_rw [eventually_constant, tendsto_pure]

lemma eventually_constant.nonempty (h : eventually_constant g f) : nonempty Œ≤ :=
nonempty_of_exists h

lemma eventually_constant_const (y‚ÇÄ : Œ≤) : eventually_constant (Œª x, y‚ÇÄ) f :=
‚ü®y‚ÇÄ, eventually_of_forall $ Œª x, rfl‚ü©

lemma eventually_constant_at_top [semilattice_sup Œ±] [nonempty Œ±] :
  (‚àÉ x, ‚àÄ y ‚â• x, g y = g x) ‚Üî eventually_constant g at_top :=
begin
  simp_rw [eventually_constant, eventually_at_top],
  split,
  { rintro ‚ü®x, hx‚ü©, refine ‚ü®g x, x, hx‚ü© },
  { rintro ‚ü®y, x, hx‚ü©, use x, simp_rw [hx x le_rfl], exact hx },
end

lemma eventually_constant_at_top_nat {g : ‚Ñï ‚Üí Œ±} :
  (‚àÉ n, ‚àÄ m ‚â• n, g (m + 1) = g m) ‚Üî eventually_constant g at_top :=
begin
  rw [‚Üê eventually_constant_at_top],
  apply exists_congr, intro n,
  split,
  { intros h m hm, induction hm with m hm ih, refl, rw [nat.succ_eq_add_one, h m hm, ih] },
  { intros h m hm, rw [h m hm, h (m + 1) hm.step] }
end

lemma eventually_constant.compose (h : eventually_constant g f) (g' : Œ≤ ‚Üí Œ≥) :
  eventually_constant (g' ‚àò g) f :=
by { cases h with y hy, exact ‚ü®g' y, hy.mono $ Œª x, congr_arg g'‚ü© }

lemma eventually_constant.apply {Œπ : Type*} {p : Œπ ‚Üí Type*} {g : Œ± ‚Üí ‚àÄ x, p x}
  (h : eventually_constant g f) (i : Œπ) : eventually_constant (Œª x, g x i) f :=
h.compose $ Œª p, p i

noncomputable def eventual_value [nonempty Œ≤] (g : Œ± ‚Üí Œ≤) (f : filter Œ±) : Œ≤ :=
classical.epsilon $ Œª x : Œ≤, ‚àÄ·∂† i in f, g i = x

lemma eventually_eq_eventual_value (h : eventually_constant g f) :
  ‚àÄ·∂† i in f, g i = @eventual_value _ _ h.nonempty g f :=
classical.epsilon_spec h

lemma eventual_value_unique [f.ne_bot] {y : Œ≤} (hy : ‚àÄ·∂† i in f, g i = y) :
  y = @eventual_value _ _ ‚ü®y‚ü© g f :=
by { obtain ‚ü®x, rfl, hx‚ü© := (hy.and $ eventually_eq_eventual_value ‚ü®y, hy‚ü©).exists, exact hx }

lemma eventually_constant.tendsto [nonempty Œ≤] (h : eventually_constant g f) :
  tendsto g f (pure (eventual_value g f)) :=
by { rw [tendsto_pure], exact eventually_eq_eventual_value h }

lemma eventual_value_compose [f.ne_bot] (h : eventually_constant g f) (g' : Œ≤ ‚Üí Œ≥) :
  @eventual_value _ _ (h.compose g').nonempty (g' ‚àò g) f =
  g' (@eventual_value _ _ h.nonempty g f) :=
(eventual_value_unique $ (eventually_eq_eventual_value h).mono $ Œª x, congr_arg g').symm

lemma eventual_value_apply {Œπ : Type*} {p : Œπ ‚Üí Type*} [f.ne_bot] {g : Œ± ‚Üí ‚àÄ x, p x}
  (h : eventually_constant g f) (i : Œπ) :
  @eventual_value _ _ h.nonempty g f i = @eventual_value _ _ (h.apply i).nonempty (Œª x, g x i) f :=
(eventual_value_compose h $ Œª p, p i).symm

lemma eventually_constant.tendsto_nhds [nonempty Œ≤] [topological_space Œ≤]
  (h : eventually_constant g f) : tendsto g f (ùìù (eventual_value g f)) :=
h.tendsto.mono_right $ pure_le_nhds _

lemma eventual_value_eq_lim [f.ne_bot] [nonempty Œ≤] [topological_space Œ≤] [t2_space Œ≤]
  (h : eventually_constant g f) : eventual_value g f = lim f g :=
h.tendsto_nhds.lim_eq.symm

end filter
open filter

variables {Œ± Œ≤ Œ≥ Œ¥ : Type*} [topological_space Œ≤] {g : Œ± ‚Üí Œ≤ ‚Üí Œ≥}
  {f : filter Œ±} {U : set Œ≤} {i : Œ±} {x : Œ≤}

section locally_eventually_constant


def locally_eventually_constant_on (g : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (f : filter Œ±) (U : set Œ≤) : Prop :=
‚àÄ x ‚àà U, ‚àÉ (O ‚àà ùìù x), eventually_constant (Œª n, (O : set Œ≤).restrict (g n)) f

-- def locally_eventually_constant_on (g : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (f : filter Œ±) (U : set Œ≤) (x : Œ≤) : Prop

lemma continuous_within_at.congr_nhds {Œ± Œ≤} [topological_space Œ±] [topological_space Œ≤]
  {f f‚ÇÅ : Œ± ‚Üí Œ≤} {s : set Œ±} {x : Œ±} (h : continuous_within_at f s x)
  (h‚ÇÅ : f‚ÇÅ =·∂†[ùìù x] f) : continuous_within_at f‚ÇÅ s x :=
h.congr_of_eventually_eq (nhds_within_le_nhds h‚ÇÅ) h‚ÇÅ.self_of_nhds

lemma locally_eventually_constant_on.continuous_within_at
  [topological_space Œ¥] [f.ne_bot] [nonempty Œ¥]
  (F : Œ≥ ‚Üí Œ¥)
  (hgf : locally_eventually_constant_on g f U) (hxU : x ‚àà U)
  (hg : ‚àÄ i, continuous_within_at (F ‚àò g i) U x) :
  continuous_within_at (Œª x, eventual_value (Œª i, F (g i x)) f) U x :=
begin
  obtain ‚ü®O, hO, hgO‚ü© := hgf x hxU,
  obtain ‚ü®i, hi‚ü© := (eventually_eq_eventual_value hgO).exists,
  simp_rw [function.funext_iff, eventual_value_apply hgO] at hi,
  refine (hg i).congr_nhds (eventually_of_mem hO $ Œª y hy, _),
  refine eq.trans _ (congr_arg F $ hi ‚ü®y, hy‚ü©).symm,
  apply eventual_value_compose,
end

end locally_eventually_constant

/-
A bunch of lemmas formulated for t2_space also hold for t1_space.
tendsto_const_nhds_iff'
eventual_value_eq_lim
nhds_eq_nhds_iff
nhds_le_nhds_iff
-/
