/-
Copyright (c) 2022 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
-- in mathlib, this should probably import
-- import order.filter.at_top_bot
-- and topology.separation should import this
-- import topology.basic

import data.nat.lattice
import topology.separation
import to_mathlib.topology.nhds_set
/-!
# Eventually constant sequences

Related: `monotonic_sequence_limit_index`
-/

open_locale topological_space
-- move
lemma continuous_within_at.congr_nhds {Œ± Œ≤} [topological_space Œ±] [topological_space Œ≤]
  {f f‚ÇÅ : Œ± ‚Üí Œ≤} {s : set Œ±} {x : Œ±} (h : continuous_within_at f s x)
  (h‚ÇÅ : f‚ÇÅ =·∂†[ùìù x] f) : continuous_within_at f‚ÇÅ s x :=
h.congr_of_eventually_eq (nhds_within_le_nhds h‚ÇÅ) h‚ÇÅ.self_of_nhds

namespace set
-- move
variables {Œ± Œ≤ Œ≥ : Type*} {s t : set Œ±} {f : s ‚Üí Œ≤} {g : t ‚Üí Œ≤} {x : Œ±}

@[simp]
lemma restrict_eq_iff {f : Œ± ‚Üí Œ≤} {g : s ‚Üí Œ≤} :
  restrict f s = g ‚Üî ‚àÄ x (hx : x ‚àà s), f x = g ‚ü®x, hx‚ü© :=
by simp_rw [function.funext_iff, set_coe.forall, restrict_apply, subtype.coe_mk]

@[simp]
lemma eq_restrict_iff {g : Œ± ‚Üí Œ≤} : f = restrict g s ‚Üî ‚àÄ x (hx : x ‚àà s), f ‚ü®x, hx‚ü© = g x :=
by simp_rw [@eq_comm _ f, restrict_eq_iff, eq_comm]

@[simp]
lemma restrict_eq_restrict_iff {f g : Œ± ‚Üí Œ≤} : restrict f s = restrict g s ‚Üî ‚àÄ x ‚àà s, f x = g x :=
by simp_rw [restrict_eq_iff, restrict_apply, subtype.coe_mk]

/-- The union `f ‚à™ g` of two functions `f : s ‚Üí Œ≤` and `g : t ‚Üí Œ≤`.
  On the intersection `s ‚à© t`, the function `f ‚à™ g` corresponds to `f`. -/
def union_elim [decidable_pred (‚àà s)] (f : s ‚Üí Œ≤) (g : t ‚Üí Œ≤) (x : s ‚à™ t) : Œ≤ :=
if h : (x : Œ±) ‚àà s then f ‚ü®x, h‚ü© else g ‚ü®x, x.prop.resolve_left h‚ü©

lemma union_elim_eq_left [decidable_pred (‚àà s)] (hx : x ‚àà s) :
  union_elim f g ‚ü®x, mem_union_left _ hx‚ü© = f ‚ü®x, hx‚ü© :=
dif_pos hx

lemma union_elim_eq_right [decidable_pred (‚àà s)] (h1x : x ‚àà s ‚à™ t) (h2x : x ‚àâ s) :
  union_elim f g ‚ü®x, h1x‚ü© = g ‚ü®x, h1x.resolve_left h2x‚ü© :=
dif_neg h2x

lemma union_elim_eq_right_of_eq [decidable_pred (‚àà s)] (hxt : x ‚àà t)
  (hfg : ‚àÄ x (hxs : x ‚àà s) (hxt : x ‚àà t), f ‚ü®x, hxs‚ü© = g ‚ü®x, hxt‚ü©) :
  union_elim f g ‚ü®x, mem_union_right _ hxt‚ü© = g ‚ü®x, hxt‚ü© :=
if hxs : x ‚àà s then (union_elim_eq_left hxs).trans (hfg x hxs hxt) else union_elim_eq_right _ hxs

lemma union_elim_restrict [decidable_pred (‚àà s)] (f : Œ± ‚Üí Œ≤) :
  union_elim (restrict f s) (restrict f t) = restrict f (s ‚à™ t) :=
begin
  ext ‚ü®x, hx‚ü©,
  cases (mem_union _ _ _).mp hx; simp [union_elim_eq_left, union_elim_eq_right_of_eq, h]
end

end set

open_locale classical
open set

namespace filter

variables {Œ± Œ≤ Œ≥ : Type*} {g : Œ± ‚Üí Œ≤} {f : filter Œ±} {x : Œ±} {y : Œ≤}

def eventually_constant (g : Œ± ‚Üí Œ≤) (f : filter Œ±) : Prop :=
‚àÉ y : Œ≤, ‚àÄ·∂† x in f, g x = y

lemma eventually_constant_iff_tendsto : eventually_constant g f ‚Üî ‚àÉ x : Œ≤, tendsto g f (pure x) :=
by simp_rw [eventually_constant, tendsto_pure]

lemma eventually_constant.nonempty (h : eventually_constant g f) : nonempty Œ≤ :=
nonempty_of_exists h

lemma eventually_constant_const (y‚ÇÄ : Œ≤) : eventually_constant (Œª x, y‚ÇÄ) f :=
‚ü®y‚ÇÄ, eventually_of_forall $ Œª x, rfl‚ü©

lemma eventually_constant_of_unique [unique Œ≤] : eventually_constant g f :=
‚ü®default, eventually_of_forall $ Œª x, unique.uniq _ _‚ü©

lemma eventually_constant_at_top [semilattice_sup Œ±] [nonempty Œ±] :
  (‚àÉ i, ‚àÄ j ‚â• i, g j = g i) ‚Üî eventually_constant g at_top :=
begin
  simp_rw [eventually_constant, eventually_at_top],
  split,
  { rintro ‚ü®i, hi‚ü©, refine ‚ü®g i, i, hi‚ü© },
  { rintro ‚ü®y, i, hi‚ü©, use i, simp_rw [hi i le_rfl], exact hi },
end

lemma eventually_constant_at_top_nat {g : ‚Ñï ‚Üí Œ±} :
  (‚àÉ n, ‚àÄ m ‚â• n, g (m + 1) = g m) ‚Üî eventually_constant g at_top :=
begin
  rw [‚Üê eventually_constant_at_top],
  apply exists_congr, intro n,
  split,
  { intros h m hm, induction hm with m hm ih, refl, rw [nat.succ_eq_add_one, h m hm, ih] },
  { intros h m hm, rw [h m hm, h (m + 1) hm.step] }
end

lemma eventually_constant.compose (h : eventually_constant g f) (g' : Œ≤ ‚Üí Œ≥) :
  eventually_constant (g' ‚àò g) f :=
by { cases h with y hy, exact ‚ü®g' y, hy.mono $ Œª x, congr_arg g'‚ü© }

lemma eventually_constant.apply {Œπ : Type*} {p : Œπ ‚Üí Type*} {g : Œ± ‚Üí ‚àÄ x, p x}
  (h : eventually_constant g f) (i : Œπ) : eventually_constant (Œª x, g x i) f :=
h.compose $ Œª p, p i

noncomputable def eventual_value [nonempty Œ≤] (g : Œ± ‚Üí Œ≤) (f : filter Œ±) : Œ≤ :=
classical.epsilon $ Œª x : Œ≤, ‚àÄ·∂† i in f, g i = x

lemma eventually_eq_eventual_value (h : eventually_constant g f) :
  ‚àÄ·∂† i in f, g i = @eventual_value _ _ h.nonempty g f :=
classical.epsilon_spec h

lemma eventual_value_unique [f.ne_bot] {y : Œ≤} (hy : ‚àÄ·∂† i in f, g i = y) :
  y = @eventual_value _ _ ‚ü®y‚ü© g f :=
by { obtain ‚ü®x, rfl, hx‚ü© := (hy.and $ eventually_eq_eventual_value ‚ü®y, hy‚ü©).exists, exact hx }

/-- This lemma is sometimes useful if the elaborator uses the nonempty instance in
  `eventual_value_unique` to find the implicit argument `y`. -/
lemma eventual_value_unique' [f.ne_bot] {hŒ≤ : nonempty Œ≤} {y : Œ≤} (hy : ‚àÄ·∂† i in f, g i = y) :
  eventual_value g f = y  :=
(eventual_value_unique hy).symm

lemma eventual_value_eq_fn {g : ‚Ñï ‚Üí Œ≤} {hŒ≤ : nonempty Œ≤} {n : ‚Ñï} (h : ‚àÄ m, n ‚â§ m ‚Üí g m = g n) :
  eventual_value g at_top = g n :=
eventual_value_unique' $ eventually_of_mem (mem_at_top _) h

lemma eventually_constant.exists_eventual_value_eq [f.ne_bot] (h : eventually_constant g f) :
  ‚àÉ x, @eventual_value _ _ h.nonempty g f = g x :=
begin
  obtain ‚ü®y, hy‚ü© := h,
  obtain ‚ü®x, rfl‚ü© := hy.exists,
  exact ‚ü®x, (eventual_value_unique hy).symm‚ü©
end

lemma eventually_constant.tendsto [nonempty Œ≤] (h : eventually_constant g f) :
  tendsto g f (pure (eventual_value g f)) :=
by { rw [tendsto_pure], exact eventually_eq_eventual_value h }

lemma eventual_value_compose [f.ne_bot] (h : eventually_constant g f) (g' : Œ≤ ‚Üí Œ≥) :
  @eventual_value _ _ (h.compose g').nonempty (g' ‚àò g) f =
  g' (@eventual_value _ _ h.nonempty g f) :=
(eventual_value_unique $ (eventually_eq_eventual_value h).mono $ Œª x, congr_arg g').symm

lemma eventual_value_apply {Œπ : Type*} {p : Œπ ‚Üí Type*} [f.ne_bot] {g : Œ± ‚Üí ‚àÄ x, p x}
  (h : eventually_constant g f) (i : Œπ) :
  @eventual_value _ _ h.nonempty g f i = @eventual_value _ _ (h.apply i).nonempty (Œª x, g x i) f :=
(eventual_value_compose h $ Œª p, p i).symm

lemma eventually_constant.tendsto_nhds [nonempty Œ≤] [topological_space Œ≤]
  (h : eventually_constant g f) : tendsto g f (ùìù (eventual_value g f)) :=
h.tendsto.mono_right $ pure_le_nhds _

lemma eventual_value_eq_lim [f.ne_bot] [nonempty Œ≤] [topological_space Œ≤] [t2_space Œ≤]
  (h : eventually_constant g f) : eventual_value g f = lim f g :=
h.tendsto_nhds.lim_eq.symm

-- the following can be generalized a lot using `eventually_constant.exists_eventual_value_eq`.
-- /-- The index from where a function `g : ‚Ñï ‚Üí Œ±` is eventually constant. Equals `0` if `g` is not
--   eventually constant. -/
-- noncomputable def eventual_index (g : ‚Ñï ‚Üí Œ±) : ‚Ñï :=
-- Inf {n : ‚Ñï | ‚àÄ m, n ‚â§ m ‚Üí g m = g n}

-- lemma eventually_constant.eq_eventual_index {g : ‚Ñï ‚Üí Œ±} (hg : eventually_constant g at_top) {n : ‚Ñï}
--   (hn : eventual_index g ‚â§ n) : g n = g (eventual_index g) :=
-- nat.Inf_mem (eventually_constant_at_top.mpr hg) n hn

-- lemma eventually_constant.fn_eventual_index {g : ‚Ñï ‚Üí Œ±} (hg : eventually_constant g at_top) :
--   g (eventual_index g) = @eventual_value _ _ ‚ü®g 0‚ü© g at_top :=
-- (eventual_value_eq_fn $ Œª n hn, (hg.eq_eventual_index hn : _)).symm

-- lemma eventually_constant.eq_eventual_value_of_eventual_index_le {g : ‚Ñï ‚Üí Œ±}
--   (hg : eventually_constant g at_top) {n : ‚Ñï}
--   (hn : eventual_index g ‚â§ n) : g n = @eventual_value _ _ ‚ü®g 0‚ü© g at_top :=
-- (hg.eq_eventual_index hn).trans hg.fn_eventual_index


-- lemma foo {g : Œ± ‚Üí Œ≤ ‚Üí Œ≥} {s : set Œ≤} (hg : eventually_constant (Œª n, s.restrict (g n)) f)
--   (hy : y ‚àà s) :
-- sorry := sorry

end filter
open filter

variables {Œ± Œ≤ Œ≥ Œ¥ : Type*} {g : Œ± ‚Üí Œ≤ ‚Üí Œ≥}
  {f : filter Œ±} {O U : set Œ≤} {i : Œ±} {x : Œ≤}

section eventually_constant_on

/--
  A sequence of functions `g` is eventually constant on `O` w.r.t. filter `f` if
  `g` restricted to `O` is eventually constant.
-/
def eventually_constant_on (g : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (f : filter Œ±) (O : set Œ≤) : Prop :=
eventually_constant (Œª n, O.restrict (g n)) f

lemma eventually_constant_on.eventually_constant (hg : eventually_constant_on g f O) (hx : x ‚àà O) :
  eventually_constant (Œª n, g n x) f :=
begin
  cases hg with y hg, exact ‚ü®y ‚ü®x, hx‚ü©, hg.mono $ Œª n hn, (function.funext_iff.mp hn ‚ü®x, hx‚ü© : _)‚ü©
end

lemma eventually_constant_on.nonempty (hg : eventually_constant_on g f O) (hx : x ‚àà O) :
  nonempty Œ≥ :=
(hg.eventually_constant hx).nonempty

lemma eventually_constant_on_at_top [semilattice_sup Œ±] [nonempty Œ±] :
  (‚àÉ x, ‚àÄ x' ‚â• x, ‚àÄ y ‚àà O, g x' y = g x y) ‚Üî eventually_constant_on g at_top O :=
by simp_rw [eventually_constant_on, ‚Üê eventually_constant_at_top, restrict_eq_restrict_iff]

lemma eventually_constant_on.exists_eventual_value_eq [f.ne_bot]
  (hg : eventually_constant_on g f O) :
  ‚àÉ i, ‚àÄ x (hx : x ‚àà O), @eventual_value _ _ (hg.nonempty hx) (Œª n, g n x) f = g i x :=
by simpa only [eq_restrict_iff, eventual_value_apply hg] using hg.exists_eventual_value_eq

-- lemma eventually_constant_on.exists_eventual_value_eq [f.ne_bot] (h : eventually_constant g f) :
--   ‚àÉ x, @eventual_value _ _ h.nonempty g f = g x :=
-- begin
--   obtain ‚ü®y, hy‚ü© := h,
--   obtain ‚ü®x, rfl‚ü© := hy.exists,
--   exact ‚ü®x, (eventual_value_unique hy).symm‚ü©
-- end

end eventually_constant_on

variables [topological_space Œ≤]

section locally_eventually_constant

/--
  A sequence of functions `g` is locally eventually constant on `U` w.r.t. filter `f` if
  every point in `U` has a neighborhood `O` such that `g` restricted to `O` is eventually constant.
-/
def locally_eventually_constant_on (g : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (f : filter Œ±) (U : set Œ≤) : Prop :=
‚àÄ x ‚àà U, ‚àÉ O ‚àà ùìù x, eventually_constant_on g f O

lemma locally_eventually_constant_on.eventually_constant
  (hgf : locally_eventually_constant_on g f U) (hx : x ‚àà U) :
  eventually_constant (Œª n, g n x) f :=
by { obtain ‚ü®O, hO, hg‚ü© := hgf x hx, exact hg.eventually_constant (mem_of_mem_nhds hO) }

lemma locally_eventually_constant_on.nonempty (hg : locally_eventually_constant_on g f U)
  (hx : x ‚àà U) : nonempty Œ≥ :=
(hg.eventually_constant hx).nonempty

lemma locally_eventually_constant_on.continuous_within_at
  [topological_space Œ¥] [f.ne_bot] [nonempty Œ¥]
  (F : Œ≥ ‚Üí Œ¥)
  (hgf : locally_eventually_constant_on g f U) (hxU : x ‚àà U)
  (hg : ‚àÄ i, continuous_within_at (F ‚àò g i) U x) :
  continuous_within_at (Œª x, eventual_value (Œª i, F (g i x)) f) U x :=
begin
  obtain ‚ü®O, hO, hgO‚ü© := hgf x hxU,
  obtain ‚ü®i, hi‚ü© := (eventually_eq_eventual_value hgO).exists,
  simp_rw [function.funext_iff, eventual_value_apply hgO] at hi,
  refine (hg i).congr_nhds (eventually_of_mem hO $ Œª y (hy : y ‚àà O), _),
  refine eq.trans _ (congr_arg F $ hi ‚ü®y, hy‚ü©).symm,
  apply eventual_value_compose,
end

lemma locally_eventually_constant_on.exists_nhds_set_of_is_compact
  (hgf : locally_eventually_constant_on g f U)
  {K : set Œ≤} (hK : is_compact K) (hKU : K ‚äÜ U) :
  ‚àÉ O ‚àà nhds_set K, eventually_constant_on g f O :=
begin
  refine is_compact.induction_on hK ‚ü®‚àÖ, mem_nhds_set_empty, eventually_constant_of_unique‚ü© _ _ _,
  { rintro s t hst ‚ü®O, hO, hgO‚ü©, refine ‚ü®O, _, hgO‚ü©, exact monotone_nhds_set hst hO },
  { rintro s t ‚ü®O, hO, y, hgO‚ü© ‚ü®O', hO', y', hgO'‚ü©,
    refine ‚ü®O ‚à™ O', union_mem_nhds_set hO hO', union_elim y y', _‚ü©,
    filter_upwards [hgO, hgO'], rintro x rfl rfl,
    rw union_elim_restrict },
  { intros x hx, rcases hgf x (hKU hx) with ‚ü®O, hO, hgO‚ü©,
    exact ‚ü®interior O, mem_nhds_within_of_mem_nhds $ interior_mem_nhds.mpr hO, O,
      mem_nhds_interior, hgO‚ü© }
end

/-- A neighborhood around `x` where `g` is locally constant. -/
def locally_eventually_constant_on.nhd (hgf : locally_eventually_constant_on g f U) (hx : x ‚àà U) :
  set Œ≤ :=
classical.some $ hgf x hx

lemma locally_eventually_constant_on.nhd_mem_nhds (hgf : locally_eventually_constant_on g f U)
  (hx : x ‚àà U) : hgf.nhd hx ‚àà ùìù x :=
classical.some $ classical.some_spec $ hgf x hx

lemma locally_eventually_constant_on.eventually_constant_nhd
  (hgf : locally_eventually_constant_on g f U) (hx : x ‚àà U) :
  eventually_constant_on g f (hgf.nhd hx) :=
classical.some_spec $ classical.some_spec $ hgf x hx

end locally_eventually_constant

/-
A bunch of lemmas formulated for t2_space also hold for t1_space.
tendsto_const_nhds_iff'
eventual_value_eq_lim
nhds_eq_nhds_iff
nhds_le_nhds_iff
-/
