import measure_theory.integral.interval_integral
import analysis.calculus.parametric_integral
import algebra.module.ulift

import to_mathlib.analysis.calculus
import to_mathlib.measure_theory.interval_integral
import to_mathlib.topology.metric_space
import to_mathlib.misc

open topological_space measure_theory filter first_countable_topology metric set function
open_locale topological_space filter nnreal big_operators interval

lemma ae_strongly_measurable_interval_oc_iff {Œ± Œ≤ : Type*} [measurable_space Œ±] [linear_order Œ±]
  [topological_space Œ≤] [metrizable_space Œ≤] {Œº : measure Œ±}
  {f : Œ± ‚Üí Œ≤} {a b : Œ±} :
  (ae_strongly_measurable f $ Œº.restrict $ Œô a b) ‚Üî
    (ae_strongly_measurable f $ Œº.restrict $ Ioc a b)
      ‚àß (ae_strongly_measurable f $ Œº.restrict $ Ioc b a) :=
by rw [interval_oc_eq_union, ae_strongly_measurable_union_iff]

section
variables {E : Type*} [normed_group E] [normed_space ‚Ñù E] [complete_space E]
  {H : Type*} [normed_group H] [normed_space ‚Ñù H]
  (ŒΩ : measure ‚Ñù)

/-- Interval version of `has_fderiv_at_of_dominated_of_fderiv_le` -/
lemma has_fderiv_at_of_dominated_of_fderiv_le'' {F : H ‚Üí ‚Ñù ‚Üí E} {F' : H ‚Üí ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {a b : ‚Ñù}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_strongly_measurable (F x) $ ŒΩ.restrict (Œô a b))
  (hF_int : interval_integrable (F x‚ÇÄ) ŒΩ a b)
  (hF'_meas : ae_strongly_measurable (F' x‚ÇÄ) $ ŒΩ.restrict (Œô a b))
  (h_bound : ‚àÄ·µê t ‚àÇŒΩ.restrict (Œô a b), ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound ŒΩ a b)
  (h_diff : ‚àÄ·µê t ‚àÇŒΩ.restrict (Œô a b), ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_fderiv_at (Œª x, F x t) (F' x t) x) :
  has_fderiv_at (Œª x, ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' x‚ÇÄ t ‚àÇŒΩ) x‚ÇÄ :=
begin
  erw ae_restrict_interval_oc_iff at h_diff h_bound,
  simp_rw [ae_strongly_measurable_interval_oc_iff, eventually_and] at hF_meas hF'_meas,
  exact (has_fderiv_at_integral_of_dominated_of_fderiv_le Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1 h_bound.1
         bound_integrable.1 h_diff.1).sub
        (has_fderiv_at_integral_of_dominated_of_fderiv_le Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2 h_bound.2
         bound_integrable.2 h_diff.2)
end

/-- Interval version of `has_fderiv_at_of_dominated_loc_of_lip` -/
lemma has_fderiv_at_of_dominated_loc_of_lip_interval {F : H ‚Üí ‚Ñù ‚Üí E} {F' : ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {a b : ‚Ñù}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_strongly_measurable (F x) $ ŒΩ.restrict (Œô a b))
  (hF_int : interval_integrable (F x‚ÇÄ) ŒΩ a b)
  (hF'_meas : ae_strongly_measurable F' $ ŒΩ.restrict (Œô a b))
  (h_lip : ‚àÄ·µê t ‚àÇ(ŒΩ.restrict (Œô a b)),
    lipschitz_on_with (real.nnabs $ bound t) (Œª x, F x t) (ball x‚ÇÄ Œµ))
  (bound_integrable : interval_integrable bound ŒΩ a b)
  (h_diff : ‚àÄ·µê t ‚àÇ(ŒΩ.restrict (Œô a b)), has_fderiv_at (Œª x, F x t) (F' t) x‚ÇÄ) :
  interval_integrable F' ŒΩ a b ‚àß
  has_fderiv_at (Œª x, ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' t ‚àÇŒΩ) x‚ÇÄ :=
begin
  simp_rw [ae_strongly_measurable_interval_oc_iff, eventually_and] at hF_meas hF'_meas,
  rw ae_interval_oc at h_lip h_diff,
  have H‚ÇÅ := has_fderiv_at_integral_of_dominated_loc_of_lip Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1
    h_lip.1 bound_integrable.1 h_diff.1,
  have H‚ÇÇ := has_fderiv_at_integral_of_dominated_loc_of_lip Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2
    h_lip.2 bound_integrable.2 h_diff.2,
  exact ‚ü®‚ü®H‚ÇÅ.1, H‚ÇÇ.1‚ü©, H‚ÇÅ.2.sub H‚ÇÇ.2‚ü©
end

end

section

open function

theorem continuous_parametric_integral_of_continuous
  {E : Type*} [normed_group E] [normed_space ‚Ñù E]
  [complete_space E]
  {Œ± : Type*} [topological_space Œ±] [measurable_space Œ±] [opens_measurable_space Œ±]
  [second_countable_topology_either Œ± E]
  {Œº : measure_theory.measure Œ±} [is_locally_finite_measure Œº]
  {X : Type*} [topological_space X] [first_countable_topology X] [locally_compact_space X]
  {F : X ‚Üí Œ± ‚Üí E} (hF : continuous (Œª p : X √ó Œ±, F p.1 p.2))
  {s : set Œ±} (hs : is_compact s) (hs' : measurable_set s):
  continuous (Œª x, ‚à´ a in s, F x a ‚àÇŒº) :=
begin
  rw continuous_iff_continuous_at,
  intros x‚ÇÄ,
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©,
  rcases (U_cpct.prod hs).bdd_above_norm hF with ‚ü®M, M_pos, hM‚ü©,
  apply continuous_at_of_dominated,
  { exact eventually_of_forall (Œª x, (hF.comp (continuous.prod.mk x)).ae_strongly_measurable) },
  { apply eventually.mono U_nhds (Œª x x_in, _),
    apply ae_restrict_of_forall_mem hs',
    intros t t_in,
    exact hM (x, t) (set.mk_mem_prod x_in t_in) },
  { exact hs.integrable_const _ _, },
  { apply ae_of_all,
    intros a,
    apply (hF.comp‚ÇÇ continuous_id continuous_const).continuous_at }
end

end


section

open measure_theory

variables {Œº : measure ‚Ñù}
          {X : Type*} [topological_space X] [first_countable_topology X]
          {E : Type*} [normed_group E] [normed_space ‚Ñù E] [complete_space E]

lemma continuous_at_parametric_primitive_of_dominated
  {F : X ‚Üí ‚Ñù ‚Üí E} (bound : ‚Ñù ‚Üí ‚Ñù) (a b : ‚Ñù) {a‚ÇÄ b‚ÇÄ : ‚Ñù} {x‚ÇÄ : X}
  (hF_meas : ‚àÄ x, ae_strongly_measurable (F x) (Œº.restrict $ Œô a b))
  (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•F x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound Œº a b)
  (h_cont : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), continuous_at (Œª x, F x t) x‚ÇÄ)
  (ha‚ÇÄ : a‚ÇÄ ‚àà Ioo a b) (hb‚ÇÄ : b‚ÇÄ ‚àà Ioo a b) (hŒºb‚ÇÄ : Œº {b‚ÇÄ} = 0) :
  continuous_at (Œª p : X √ó ‚Ñù, ‚à´ (t : ‚Ñù) in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº) (x‚ÇÄ, b‚ÇÄ) :=
begin
  have hsub : ‚àÄ {a‚ÇÄ b‚ÇÄ}, a‚ÇÄ ‚àà Ioo a b ‚Üí b‚ÇÄ ‚àà Ioo a b ‚Üí Œô a‚ÇÄ b‚ÇÄ ‚äÜ Œô a b, from
    Œª a‚ÇÄ b‚ÇÄ ha‚ÇÄ hb‚ÇÄ, (ord_connected_Ioo.interval_oc_subset ha‚ÇÄ hb‚ÇÄ).trans
      (Ioo_subset_Ioc_self.trans Ioc_subset_interval_oc_self),
  have Ioo_nhds : Ioo a b ‚àà ùìù b‚ÇÄ, from Ioo_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2,
  have Icc_nhds : Icc a b ‚àà ùìù b‚ÇÄ, from Icc_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2,
  have hx‚ÇÄ : ‚àÄ·µê (t : ‚Ñù) ‚àÇŒº.restrict (Œô a b), ‚à•F x‚ÇÄ t‚à• ‚â§ bound t := h_bound.self_of_nhds,
  have : ‚àÄ·∂† (p : X √ó ‚Ñù) in ùìù (x‚ÇÄ, b‚ÇÄ),
    ‚à´ s in a‚ÇÄ..p.2, F p.1 s ‚àÇŒº = ‚à´ s in a‚ÇÄ..b‚ÇÄ, F p.1 s ‚àÇŒº + ‚à´ s in b‚ÇÄ..p.2, F x‚ÇÄ s ‚àÇŒº +
                                 ‚à´ s in b‚ÇÄ..p.2, (F p.1 s - F x‚ÇÄ s) ‚àÇŒº,
  { rw nhds_prod_eq,
    refine (h_bound.prod_mk Ioo_nhds).mono _,
    rintros ‚ü®x, t‚ü© ‚ü®hx : ‚àÄ·µê (t : ‚Ñù) ‚àÇŒº.restrict (Œô a b), ‚à•F x t‚à• ‚â§ bound t, ht : t ‚àà Ioo a b‚ü©,
    dsimp {eta := ff},
    have hiF : ‚àÄ {x a‚ÇÄ b‚ÇÄ}, (‚àÄ·µê (t : ‚Ñù) ‚àÇŒº.restrict (Œô a b), ‚à•F x t‚à• ‚â§ bound t) ‚Üí
      a‚ÇÄ ‚àà Ioo a b ‚Üí b‚ÇÄ ‚àà Ioo a b ‚Üí interval_integrable (F x) Œº a‚ÇÄ b‚ÇÄ :=
    Œª x a‚ÇÄ b‚ÇÄ hx ha‚ÇÄ hb‚ÇÄ, interval_integrable_of_norm_le ((hF_meas x).mono_set $ hsub ha‚ÇÄ hb‚ÇÄ)
        (ae_restrict_of_ae_restrict_of_subset (hsub ha‚ÇÄ hb‚ÇÄ) hx)
        (bound_integrable.mono_set' $ hsub ha‚ÇÄ hb‚ÇÄ),
    rw [interval_integral.integral_sub, add_assoc, add_sub_cancel'_right,
        interval_integral.integral_add_adjacent_intervals],
    { exact hiF hx ha‚ÇÄ hb‚ÇÄ },
    { exact hiF hx hb‚ÇÄ ht },
    { exact hiF hx hb‚ÇÄ ht },
    { exact hiF hx‚ÇÄ hb‚ÇÄ ht } },
  rw continuous_at_congr this, clear this,
  refine (continuous_at.add _ _).add _,
  { exact (interval_integral.continuous_at_of_dominated_interval
            (eventually_of_forall $ Œª x, (hF_meas x).mono_set $ hsub ha‚ÇÄ hb‚ÇÄ)
            (h_bound.mono $ Œª  x, ae_mem_imp_of_ae_restrict_of_subset $ hsub ha‚ÇÄ hb‚ÇÄ)
            (bound_integrable.mono_set' $ hsub ha‚ÇÄ hb‚ÇÄ)
            (ae_mem_imp_of_ae_restrict_of_subset (hsub ha‚ÇÄ hb‚ÇÄ) h_cont)).fst' },
  { refine (_ : continuous_at (Œª t, ‚à´ s in b‚ÇÄ..t, F x‚ÇÄ s ‚àÇŒº) b‚ÇÄ).snd',
    apply continuous_within_at.continuous_at _ (Icc_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2),
    apply interval_integral.continuous_within_at_primitive hŒºb‚ÇÄ,
    rw [min_eq_right hb‚ÇÄ.1.le, max_eq_right hb‚ÇÄ.2.le],
    exact interval_integrable_of_norm_le (hF_meas x‚ÇÄ) hx‚ÇÄ bound_integrable },
  { suffices : tendsto (Œª (x : X √ó ‚Ñù), ‚à´ s in b‚ÇÄ..x.2, F x.1 s - F x‚ÇÄ s ‚àÇŒº) (ùìù (x‚ÇÄ, b‚ÇÄ)) (ùìù 0),
      by simpa [continuous_at],
    have : ‚àÄ·∂† p : X √ó ‚Ñù in ùìù (x‚ÇÄ, b‚ÇÄ),
      ‚à•‚à´ s in b‚ÇÄ..p.2, F p.1 s - F x‚ÇÄ s ‚àÇŒº‚à• ‚â§ |‚à´ s in b‚ÇÄ..p.2, 2 * bound s ‚àÇŒº|,
    { rw nhds_prod_eq,
      refine (h_bound.prod_mk Ioo_nhds).mono _,
      rintros ‚ü®x, t‚ü© ‚ü®hx : ‚àÄ·µê t ‚àÇŒº.restrict (Œô a b), ‚à•F x t‚à• ‚â§ bound t, ht : t ‚àà Ioo a b‚ü©,
      have H : ‚àÄ·µê (t : ‚Ñù) ‚àÇŒº.restrict (Œô b‚ÇÄ t), ‚à•F x t - F x‚ÇÄ t‚à• ‚â§ 2 * bound t,
      { apply (ae_restrict_of_ae_restrict_of_subset (hsub hb‚ÇÄ ht) (hx.and hx‚ÇÄ)).mono,
        rintros s ‚ü®hs‚ÇÅ, hs‚ÇÇ‚ü©,
        calc ‚à•F x s - F x‚ÇÄ s‚à• ‚â§ ‚à•F x s‚à• + ‚à•F x‚ÇÄ s‚à• : norm_sub_le _ _
          ... ‚â§ 2 * bound s : by linarith only [hs‚ÇÅ, hs‚ÇÇ] },
      exact interval_integral.norm_integral_le_of_norm_le H
        (((hF_meas x).mono_set $ hsub hb‚ÇÄ ht).sub ((hF_meas x‚ÇÄ).mono_set $ hsub hb‚ÇÄ ht))
        ((bound_integrable.mono_set' $ hsub hb‚ÇÄ ht).const_mul 2) },
    apply squeeze_zero_norm' this,
    have : tendsto (Œª t, ‚à´ s in b‚ÇÄ..t, 2 * bound s ‚àÇŒº) (ùìù b‚ÇÄ) (ùìù 0),
    { suffices : continuous_at (Œª t, ‚à´ s in b‚ÇÄ..t, 2 * bound s ‚àÇŒº) b‚ÇÄ,
      { convert this, simp },
      apply continuous_within_at.continuous_at _ Icc_nhds,
      apply interval_integral.continuous_within_at_primitive hŒºb‚ÇÄ,
      apply interval_integrable.const_mul,
      apply bound_integrable.mono_set',
      rw [min_eq_right hb‚ÇÄ.1.le, max_eq_right hb‚ÇÄ.2.le] },
    rw nhds_prod_eq,
    exact (continuous_abs.tendsto' _ _ abs_zero).comp (this.comp tendsto_snd) },
end
end

section
variables {Œº : measure ‚Ñù}
          [is_locally_finite_measure Œº] [has_no_atoms Œº]
          {X : Type*} [topological_space X] [first_countable_topology X]
          {E : Type*} [normed_group E] [normed_space ‚Ñù E] [complete_space E]

lemma continuous_parametric_primitive_of_continuous
  [locally_compact_space X]
  {F : X ‚Üí ‚Ñù ‚Üí E} {a‚ÇÄ : ‚Ñù}
  (hF : continuous (Œª p : X √ó ‚Ñù, F p.1 p.2)) :
  continuous (Œª p : X √ó ‚Ñù, ‚à´ t in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº) :=
begin
  rw continuous_iff_continuous_at,
  rintros ‚ü®x‚ÇÄ, b‚ÇÄ‚ü©,
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©,
  cases exists_lt (min a‚ÇÄ b‚ÇÄ) with a a_lt,
  cases exists_gt (max a‚ÇÄ b‚ÇÄ) with b lt_b,
  rw lt_min_iff at a_lt,
  rw max_lt_iff at lt_b,
  have a‚ÇÄ_in : a‚ÇÄ ‚àà Ioo a b := ‚ü®a_lt.1, lt_b.1‚ü©,
  have b‚ÇÄ_in : b‚ÇÄ ‚àà Ioo a b := ‚ü®a_lt.2, lt_b.2‚ü©,
  obtain ‚ü®M : ‚Ñù, M_pos : M > 0,
          hM : ‚àÄ (x : X √ó ‚Ñù), x ‚àà U √óÀ¢ Icc a b ‚Üí ‚à•(Œª (p : X √ó ‚Ñù), F p.fst p.snd) x‚à• ‚â§ M‚ü© :=
    (U_cpct.prod (is_compact_Icc : is_compact $ Icc a b)).bdd_above_norm hF,
  refine continuous_at_parametric_primitive_of_dominated (Œª t, M) a b _ _ _ _ a‚ÇÄ_in b‚ÇÄ_in
    (measure_singleton b‚ÇÄ),
  { exact Œª x, (hF.comp (continuous.prod.mk x)).ae_strongly_measurable },
  { apply eventually.mono U_nhds (Œª x (x_in : x ‚àà U), _),
    refine ae_restrict_of_forall_mem measurable_set_Ioc _,
    intros t t_in,
    refine hM (x, t) ‚ü®x_in, _‚ü©,
    rw interval_oc_of_le (a_lt.1.trans lt_b.1).le at t_in,
    exact mem_Icc_of_Ioc t_in },
  { apply interval_integrable_const },
  { apply ae_of_all,
    intros a,
    apply (hF.comp‚ÇÇ continuous_id continuous_const).continuous_at }
end

theorem continuous_parametric_interval_integral_of_continuous
  [locally_compact_space X] {a‚ÇÄ : ‚Ñù}
  {F : X ‚Üí ‚Ñù ‚Üí E} (hF : continuous (Œª p : X √ó ‚Ñù, F p.1 p.2))
  {s : X ‚Üí ‚Ñù} (hs : continuous s) :
  continuous (Œª x, ‚à´ t in a‚ÇÄ..s x, F x t ‚àÇŒº) :=
show continuous ((Œª p : X √ó ‚Ñù, ‚à´ t in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº) ‚àò (Œª x, (x, s x))),
from (continuous_parametric_primitive_of_continuous hF).comp‚ÇÇ continuous_id hs

theorem continuous_parametric_interval_integral_of_continuous'
  [locally_compact_space X]
  {F : X ‚Üí ‚Ñù ‚Üí E} (hF : continuous (Œª p : X √ó ‚Ñù, F p.1 p.2)) (a‚ÇÄ b‚ÇÄ : ‚Ñù) :
  continuous (Œª x, ‚à´ t in a‚ÇÄ..b‚ÇÄ, F x t ‚àÇŒº) :=
continuous_parametric_interval_integral_of_continuous hF continuous_const


end


section
variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          [complete_space E]
          {H : Type*} [normed_group H] [normed_space ‚Ñù H]

/-!
We could weaken `finite_dimensional ‚Ñù H` with `second_countable (H ‚ÜíL[‚Ñù] E)` if needed,
but that is less convenient to work with.
-/

open real continuous_linear_map asymptotics

/--
This statement is a new version using the continuity note in mathlib.
See commit `39e3f3f` for an older version
Maybe todo: let `a` depend on `x`.
-/
lemma has_fderiv_at_parametric_primitive_of_lip' (F : H ‚Üí ‚Ñù ‚Üí E) (F' : ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)) {x‚ÇÄ : H}
  {G' : H ‚ÜíL[‚Ñù] E}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {s : H ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  {a a‚ÇÄ b‚ÇÄ : ‚Ñù}
  {s' : H ‚ÜíL[‚Ñù] ‚Ñù}
  (ha :  a ‚àà Ioo a‚ÇÄ b‚ÇÄ)
  (hsx‚ÇÄ : s x‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ)
  (hF_meas : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ae_strongly_measurable (F x) (volume.restrict (Ioo a‚ÇÄ b‚ÇÄ)))
  (hF_int : integrable_on (F x‚ÇÄ) (Ioo a‚ÇÄ b‚ÇÄ))
  (hF_cont : continuous_at (F x‚ÇÄ) (s x‚ÇÄ))
  (hF'_meas : ae_strongly_measurable F' (volume.restrict $ Œô a (s x‚ÇÄ)))
  (h_lipsch : ‚àÄ·µê t ‚àÇ(volume.restrict $ Ioo a‚ÇÄ b‚ÇÄ),
    lipschitz_on_with (nnabs $ bound t) (Œª x, F x t) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable_on bound (Ioo a‚ÇÄ b‚ÇÄ))
  (bound_cont : continuous_at bound (s x‚ÇÄ))
  (bound_nonneg : ‚àÄ t, 0 ‚â§ bound t) -- this is not really needed, but much more convenient
  (h_diff : ‚àÄ·µê a ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)), has_fderiv_at (Œª x, F x a) (F' a) x‚ÇÄ)
  (s_diff : has_fderiv_at s s' x‚ÇÄ)
  (hG' : (‚à´ t in a..s x‚ÇÄ, F' t) + (to_span_singleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s' = G') :
  interval_integrable F' volume a (s x‚ÇÄ) ‚àß
  has_fderiv_at (Œª x : H, ‚à´ t in a..s x, F x t) G' x‚ÇÄ :=
begin
  subst hG',
  let œÜ : H ‚Üí ‚Ñù ‚Üí E := Œª x t, ‚à´ s in a..t, F x s,
  let œà : H ‚ÜíL[‚Ñù] E := ‚à´ t in a..s x‚ÇÄ, F' t,
  have Ioo_nhds : Ioo a‚ÇÄ b‚ÇÄ ‚àà ùìù (s x‚ÇÄ) := Ioo_mem_nhds hsx‚ÇÄ.1 hsx‚ÇÄ.2,
  have bound_int : ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí interval_integrable bound volume s u,
  { intros s u hs hu,
    exact (bound_integrable.mono_set $ ord_connected_Ioo.interval_subset hs hu).interval_integrable },
  have mem_nhds : ball x‚ÇÄ Œµ ‚à© (s ‚Åª¬π' Ioo a‚ÇÄ b‚ÇÄ) ‚àà ùìù x‚ÇÄ :=
  filter.inter_mem (ball_mem_nhds x‚ÇÄ Œµ_pos) (s_diff.continuous_at.preimage_mem_nhds Ioo_nhds),
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have hF_meas_ball : ‚àÄ {x}, x ‚àà ball x‚ÇÄ Œµ ‚Üí ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
    ae_strongly_measurable (F x) (volume.restrict $ Œô s u),
  { intros x hx s u hs hu,
    exact (hF_meas x hx).mono_set (ord_connected_Ioo.interval_oc_subset hs hu) },
  have hF_int_ball : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
    interval_integrable (F x) volume s u,
  { intros x hx s u hs hu,
    have : integrable_on (F x) (Ioo a‚ÇÄ b‚ÇÄ),
    { apply integrable_of_norm_sub_le (hF_meas x hx) hF_int (bound_integrable.mul_const (‚à•x - x‚ÇÄ‚à•)),
      apply h_lipsch.mono,
      intros t ht,
      rw norm_sub_rev,
      rw lipschitz_on_with_iff_norm_sub_le at ht,
      simpa [bound_nonneg t] using ht x hx x‚ÇÄ x‚ÇÄ_in },
    exact (this.mono_set $ ord_connected_Ioo.interval_subset hs hu).interval_integrable },
  split,
  { apply interval_integrable_of_norm_le hF'_meas _ (bound_int ha hsx‚ÇÄ),
    replace h_lipsch : ‚àÄ·µê t ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)),
      lipschitz_on_with (nnabs (bound t)) (Œª (x : H), F x t) (ball x‚ÇÄ Œµ),
      from ae_restrict_of_ae_restrict_of_subset
        (ord_connected_Ioo.interval_oc_subset ha hsx‚ÇÄ) h_lipsch,
    filter_upwards [h_lipsch, h_diff],
    intros t ht_lip ht_diff,
    rw show bound t = nnabs (bound t), by simp [bound_nonneg t],
    exact ht_diff.le_of_lip (ball_mem_nhds x‚ÇÄ Œµ_pos) ht_lip },
  { have D‚ÇÅ : has_fderiv_at (Œª x, œÜ x (s x‚ÇÄ)) (‚à´ t in a..s x‚ÇÄ, F' t) x‚ÇÄ,
    { replace hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_strongly_measurable (F x) (volume.restrict (Œô a (s x‚ÇÄ))),
        from eventually.mono (ball_mem_nhds x‚ÇÄ Œµ_pos) (Œª x hx, hF_meas_ball hx ha hsx‚ÇÄ),
      replace hF_int : interval_integrable (F x‚ÇÄ) volume a (s x‚ÇÄ), from hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ,
      exact (has_fderiv_at_of_dominated_loc_of_lip_interval _ Œµ_pos hF_meas hF_int hF'_meas
        (ae_restrict_of_ae_restrict_of_subset (ord_connected_Ioo.interval_oc_subset ha hsx‚ÇÄ) h_lipsch)
        (bound_int ha hsx‚ÇÄ) h_diff).2 },
    have D‚ÇÇ : has_fderiv_at (Œª x, œÜ x‚ÇÄ (s x)) ((to_span_singleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s') x‚ÇÄ,
    { refine has_fderiv_at.comp _ _ s_diff,
      rw [has_fderiv_at_iff_has_deriv_at, to_span_singleton_apply, one_smul],
      exact interval_integral.integral_has_deriv_at_right (hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ)
        ‚ü®Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, (hF_meas x‚ÇÄ x‚ÇÄ_in)‚ü© hF_cont },
    have D‚ÇÉ : has_fderiv_at (Œª x, ‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) 0 x‚ÇÄ,
    { apply is_O.has_fderiv_at _ one_lt_two,
      have O‚ÇÅ : is_O (Œª x, ‚à´ s in s x‚ÇÄ..s x, bound s) (Œª x, ‚à•x - x‚ÇÄ‚à•) (ùìù x‚ÇÄ),
      { have : is_O (Œª x, s x - s x‚ÇÄ) (Œª x, ‚à•x - x‚ÇÄ‚à•) (ùìù x‚ÇÄ) := s_diff.is_O_sub.norm_right,
        refine is_O.trans _ this,
        show is_O ((Œª t, ‚à´ s in s x‚ÇÄ..t, bound s) ‚àò s) ((Œª t, t - s x‚ÇÄ) ‚àò s) (ùìù x‚ÇÄ),
        refine is_O.comp_tendsto _ s_diff.continuous_at,
        have M : strongly_measurable_at_filter bound (ùìù (s x‚ÇÄ)) volume,
        { use [Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, bound_integrable.1] },
        apply is_O.congr' _ eventually_eq.rfl
          (interval_integral.integral_has_deriv_at_right (bound_int ha hsx‚ÇÄ) M bound_cont).is_O,
        apply eventually.mono Ioo_nhds,
        rintros t ht,
        dsimp only {eta := false},
        rw interval_integral.integral_interval_sub_left (bound_int ha ht) (bound_int ha hsx‚ÇÄ) },
      have O‚ÇÇ : is_O (Œª x, ‚à•x - x‚ÇÄ‚à•) (Œª x, ‚à•x - x‚ÇÄ‚à•) (ùìù x‚ÇÄ), from is_O_refl _ _,
      have O‚ÇÉ : is_O (Œª x, ‚à´ (t : ‚Ñù) in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t)
             (Œª x, (‚à´ t' in s x‚ÇÄ..s x, bound t') * ‚à•x - x‚ÇÄ‚à•)
             (ùìù x‚ÇÄ),
      { have bdd : ‚àÄ·∂† x in ùìù x‚ÇÄ,
          ‚à•‚à´ s in s x‚ÇÄ..s x, F x s - F x‚ÇÄ s‚à• ‚â§ |‚à´ s in s x‚ÇÄ..s x, bound s |* ‚à•x - x‚ÇÄ‚à•,
        { apply eventually.mono mem_nhds,
          rintros x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©,
          rw [‚Üê abs_of_nonneg (norm_nonneg $ x - x‚ÇÄ), ‚Üê abs_mul, ‚Üê interval_integral.mul_const],
          apply interval_integral.norm_integral_le_of_norm_le _ ((hF_meas_ball hx hsx‚ÇÄ hsx).sub
            (hF_meas_ball x‚ÇÄ_in hsx‚ÇÄ hsx))
            ((bound_int hsx‚ÇÄ hsx).mul_const _),
          apply ae_restrict_of_ae_restrict_of_subset (ord_connected_Ioo.interval_oc_subset hsx‚ÇÄ hsx),
          apply h_lipsch.mono,
          intros t ht,
          rw lipschitz_on_with_iff_norm_sub_le at ht,
          simp only [coe_nnabs] at ht,
          rw ‚Üê abs_of_nonneg (bound_nonneg t),
          exact ht x hx x‚ÇÄ (mem_ball_self Œµ_pos) },
        rw ‚Üê is_O_norm_right,
        simp only [norm_eq_abs, abs_mul, abs_norm_eq_norm],
        exact bdd.is_O' },
      simp_rw pow_two,
      exact O‚ÇÉ.trans (O‚ÇÅ.mul O‚ÇÇ) },
    have : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚à´ t in a..s x, F x t =
      œÜ x (s x‚ÇÄ) + œÜ x‚ÇÄ (s x) + (‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) - œÜ x‚ÇÄ (s x‚ÇÄ),
    { apply eventually.mono mem_nhds,
      rintros x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©,
      have int‚ÇÅ : interval_integrable (F x‚ÇÄ) volume a (s x‚ÇÄ) := hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ,
      have int‚ÇÇ : interval_integrable (F x‚ÇÄ) volume (s x‚ÇÄ) (s x) := hF_int_ball x‚ÇÄ x‚ÇÄ_in hsx‚ÇÄ hsx,
      have int‚ÇÉ : interval_integrable (F x) volume a (s x‚ÇÄ) := hF_int_ball x hx ha hsx‚ÇÄ,
      have int‚ÇÑ : interval_integrable (F x) volume (s x‚ÇÄ) (s x) := hF_int_ball x hx hsx‚ÇÄ hsx,
      dsimp [œÜ] {eta := ff},
      rw [interval_integral.integral_sub int‚ÇÑ int‚ÇÇ, add_sub,
          add_right_comm, sub_sub, interval_integral.integral_add_adjacent_intervals int‚ÇÉ int‚ÇÑ],
      conv_rhs { congr, skip, rw add_comm },
      rw interval_integral.integral_add_adjacent_intervals int‚ÇÅ int‚ÇÇ,
      abel },
    apply has_fderiv_at.congr_of_eventually_eq _ this,
    simpa using ((D‚ÇÅ.add D‚ÇÇ).add D‚ÇÉ).sub (has_fderiv_at_const (œÜ x‚ÇÄ (s x‚ÇÄ)) x‚ÇÄ) }
end



local notation `D` := fderiv ‚Ñù
local notation u ` ‚¨ù `:70 œÜ :=  continuous_linear_map.comp (continuous_linear_map.to_span_singleton ‚Ñù u) œÜ
local notation `‚àÇ‚ÇÅ` := partial_fderiv_fst ‚Ñù

variable [finite_dimensional ‚Ñù H]

/-
A version of the above lemma using Floris' style statement. This does not reuse the above lemma, but copies the proof.
-/

lemma has_fderiv_at_parametric_primitive_of_cont_diff' {F : H ‚Üí ‚Ñù ‚Üí E} (hF : cont_diff ‚Ñù 1 ‚ÜøF)
  {s : H ‚Üí ‚Ñù} (hs : cont_diff ‚Ñù 1 s)
  (x‚ÇÄ : H) (a : ‚Ñù) :
  (interval_integrable (Œª t, (fderiv ‚Ñù $ Œª x, F x t) x‚ÇÄ) volume a $ s x‚ÇÄ) ‚àß
  has_fderiv_at (Œª x : H, ‚à´ t in a..s x, F x t)
    ((‚à´ t in a..s x‚ÇÄ, ‚àÇ‚ÇÅF x‚ÇÄ t) + (F x‚ÇÄ (s x‚ÇÄ)) ‚¨ù (D s x‚ÇÄ))
    x‚ÇÄ :=
begin
  set a‚ÇÄ :=  min a (s x‚ÇÄ) - 1,
  set b‚ÇÄ :=  max a (s x‚ÇÄ) + 1,
  have ha : a ‚àà Ioo a‚ÇÄ b‚ÇÄ,
  { dsimp [a‚ÇÄ, b‚ÇÄ],
    split,
    linarith [min_le_left a (s x‚ÇÄ)],
    linarith [le_max_left a (s x‚ÇÄ)] },
  have ht‚ÇÄ : s x‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ,
  { dsimp [a‚ÇÄ, b‚ÇÄ],
    split,
    linarith [min_le_right a (s x‚ÇÄ)],
    linarith [le_max_right a (s x‚ÇÄ)] },
  have cpct : is_compact (closed_ball x‚ÇÄ 1 √óÀ¢ Icc a‚ÇÄ b‚ÇÄ),
      from (proper_space.is_compact_closed_ball x‚ÇÄ 1).prod is_compact_Icc,
  obtain ‚ü®M, M_nonneg, F_bound‚ü© : ‚àÉ M : ‚Ñù, 0 ‚â§ M ‚àß ‚àÄ x ‚àà ball x‚ÇÄ 1, ‚àÄ t ‚àà Ioo a‚ÇÄ b‚ÇÄ, ‚à•F x t‚à• ‚â§ M,
  { rcases cpct.bdd_above_norm hF.continuous with ‚ü®M, M_pos : 0 < M, hM‚ü©,
    use [M, M_pos.le],
    exact Œª x x_in t t_in, hM (x, t) ‚ü®ball_subset_closed_ball x_in, mem_Icc_of_Ioo t_in‚ü© },
  obtain ‚ü®K, F_lip‚ü© : ‚àÉ K, ‚àÄ t ‚àà Ioo a‚ÇÄ b‚ÇÄ, lipschitz_on_with K (Œª x, F x t) (ball x‚ÇÄ 1),
  { have conv : convex ‚Ñù (closed_ball x‚ÇÄ 1 √óÀ¢ Icc a‚ÇÄ b‚ÇÄ),
      from (convex_closed_ball x‚ÇÄ 1).prod (convex_Icc a‚ÇÄ b‚ÇÄ),
    rcases hF.lipschitz_on_with conv cpct with ‚ü®K, hK‚ü©,
    use K,
    intros t t_in,
    rw [show (Œª (x : H), F x t) = (uncurry F) ‚àò (Œª x : H, (x, t)), by { ext, simp }, ‚Üê mul_one K],
    apply hK.comp ((lipschitz_with_prod_mk_right t).lipschitz_on_with $ ball x‚ÇÄ 1),
    rintros ‚ü®x, s‚ü© ‚ü®x', hx, h‚ü©, cases h,
    refine ‚ü®ball_subset_closed_ball hx, mem_Icc_of_Ioo t_in‚ü© },
  have cont_x : ‚àÄ x, continuous (F x),
    from Œª x, hF.continuous.comp (continuous.prod.mk x),
  have int_Icc : ‚àÄ x, integrable_on (F x) (Icc a‚ÇÄ b‚ÇÄ),
    from Œª x, (cont_x x).locally_integrable is_compact_Icc,
  have int_Ioo : ‚àÄ x, integrable_on (F x) (Ioo a‚ÇÄ b‚ÇÄ),
    from Œª x, (int_Icc x).mono_set Ioo_subset_Icc_self,
  apply has_fderiv_at_parametric_primitive_of_lip' _ _ zero_lt_one ha ht‚ÇÄ
    (Œª x hx, (cont_x x).ae_strongly_measurable) (int_Ioo x‚ÇÄ) (cont_x x‚ÇÄ).continuous_at
    _ _ _ (continuous_at_const : continuous_at (Œª (t : ‚Ñù), (K : ‚Ñù)) $ s x‚ÇÄ) (Œª t, nnreal.coe_nonneg K),
  { apply ae_of_all,
    intro t,
    apply (cont_diff.has_strict_fderiv_at _ le_rfl).has_fderiv_at,
    rw show (Œª x, F x t) = (uncurry F) ‚àò (Œª x, (x, t)), by { ext, simp },
    exact hF.comp ((cont_diff_prod_left t).of_le le_top) },
  { exact (cont_diff.has_strict_fderiv_at hs le_rfl).has_fderiv_at },
  { refl },
  { apply continuous.ae_strongly_measurable,
    have : (Œª t, fderiv ‚Ñù (Œª (x : H), F x t) x‚ÇÄ) =
      ((Œª œÜ : H √ó ‚Ñù ‚ÜíL[‚Ñù] E, œÜ.comp (inl ‚Ñù H ‚Ñù)) ‚àò (fderiv ‚Ñù $ uncurry F) ‚àò (Œª t, (x‚ÇÄ, t))),
    { ext t,
      have : has_fderiv_at (Œª e, F e t) ((fderiv ‚Ñù (uncurry F) (x‚ÇÄ, t)).comp (inl ‚Ñù H ‚Ñù)) x‚ÇÄ,
        from has_fderiv_at.partial_fst (hF.has_strict_fderiv_at le_rfl).has_fderiv_at,
      rw [this.fderiv] },
    rw this, clear this,
    exact (inl ‚Ñù H ‚Ñù).comp_rightL.continuous.comp ((hF.continuous_fderiv le_rfl).comp $
      continuous.prod.mk x‚ÇÄ) },
  { refine ae_restrict_of_forall_mem measurable_set_Ioo _,
    swap,
    intros t t_in,
    rw nnabs_coe K,
    exact F_lip t t_in },
  { exact integrable_on_const.mpr (or.inr measure_Ioo_lt_top) }
end

end

section
variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          [complete_space E]
          {H : Type*} [normed_group H] [normed_space ‚Ñù H]
          [finite_dimensional ‚Ñù H]

open real continuous_linear_map asymptotics

local notation `D` := fderiv ‚Ñù
local notation u ` ‚¨ù `:70 œÜ :=  continuous_linear_map.comp (continuous_linear_map.to_span_singleton ‚Ñù u) œÜ
local notation `‚àÇ‚ÇÅ` := partial_fderiv_fst ‚Ñù

lemma cont_diff_parametric_primitive_of_cont_diff' {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï}
  (hF : cont_diff ‚Ñù n ‚ÜøF)
  {s : H ‚Üí ‚Ñù} (hs : cont_diff ‚Ñù n s)
  (a : ‚Ñù) :
  cont_diff ‚Ñù n (Œª x : H, ‚à´ t in a..s x, F x t)  :=
begin
  induction n with n ih generalizing F,
  { rw [with_top.coe_zero, cont_diff_zero] at *,
    exact continuous_parametric_interval_integral_of_continuous hF hs },
  { have hF‚ÇÅ : cont_diff ‚Ñù 1 (‚ÜøF), from hF.one_of_succ,
    have hs‚ÇÅ : cont_diff ‚Ñù 1 s, from hs.one_of_succ,
    have h : ‚àÄ x, has_fderiv_at (Œª x, ‚à´ t in a..s x, F x t)
      ((‚à´ t in a..s x, ‚àÇ‚ÇÅF x t) + F x (s x) ‚¨ù D s x) x :=
    Œª x, (has_fderiv_at_parametric_primitive_of_cont_diff' hF‚ÇÅ hs‚ÇÅ x a).2,
    rw cont_diff_succ_iff_fderiv_apply,
    split,
    { exact Œª x‚ÇÄ, ‚ü®_, h x‚ÇÄ‚ü© },
    { intro x,
      rw fderiv_eq h,
      apply cont_diff.add,
      { simp only [continuous_linear_map.coe_coe],
      --cont_diff ‚Ñù ‚Üën ‚Üø(Œª (x' : H) (a : ‚Ñù), ‚áë(D (Œª (e : H), F e a) x') x)
        have hD : cont_diff ‚Ñù n ‚Üø(Œª x' a, (D (Œª e, F e a) x') x),
        { apply cont_diff.cont_diff_partial_fst_apply, exact hF },
        have hD' : cont_diff ‚Ñù n ‚Üø(‚àÇ‚ÇÅ F),
        { apply cont_diff.cont_diff_partial_fst, exact hF },
        convert ih hs.of_succ hD, ext x', refine continuous_linear_map.interval_integral_apply _ x,
        exact (continuous_curry x' hD'.continuous).interval_integrable _ _, },
      { -- giving the following implicit type arguments speeds up elaboration significantly
        have := (@is_bounded_bilinear_map_smul_right ‚Ñù _ H _ _ E _ _).cont_diff.comp
          ((cont_diff_succ_iff_fderiv.mp hs).2.prod $ hF.of_succ.comp $
            cont_diff_id.prod hs.of_succ),
        rw [cont_diff_clm_apply] at this,
        exact this x } } }
end

end

section

universe variables v u

variables {E : Type u}
variables [normed_group E] [normed_space ‚Ñù E]
          [complete_space E]
          {H : Type v} [normed_group H] [normed_space ‚Ñù H]
          [finite_dimensional ‚Ñù H]

/- Should we directly prove the version below?-/

lemma cont_diff_parametric_primitive_of_cont_diff
  {F : H ‚Üí ‚Ñù ‚Üí E} {n : with_top ‚Ñï} (hF : cont_diff ‚Ñù n ‚ÜøF)
  {s : H ‚Üí ‚Ñù} (hs : cont_diff ‚Ñù n s)
  (a : ‚Ñù) :
  cont_diff ‚Ñù n (Œª x : H, ‚à´ t in a..s x, F x t) :=
begin
  induction n using with_top.rec_top_coe,
  { rw cont_diff_top at *,
    exact Œª n, cont_diff_parametric_primitive_of_cont_diff' (hF n) (hs n) a },
  { exact cont_diff_parametric_primitive_of_cont_diff' hF hs a },
end

lemma cont_diff_parametric_primitive_of_cont_diff''
  {F : H ‚Üí ‚Ñù ‚Üí E} {n : with_top ‚Ñï} (hF : cont_diff ‚Ñù n ‚ÜøF) (a : ‚Ñù) :
  cont_diff ‚Ñù n (Œª x : H √ó ‚Ñù, ‚à´ t in a..x.2, F x.1 t) :=
cont_diff_parametric_primitive_of_cont_diff (hF.comp (cont_diff_fst.prod_map cont_diff_id))
cont_diff_snd a

local notation `‚àÇ‚ÇÅ` := partial_fderiv_fst ‚Ñù

lemma cont_diff_parametric_integral_of_cont_diff
  {F : H ‚Üí ‚Ñù ‚Üí E} {n : with_top ‚Ñï} (hF : cont_diff ‚Ñù n ‚ÜøF)
  (a b : ‚Ñù) :
  cont_diff ‚Ñù n (Œª x : H, ‚à´ t in a..b, F x t) :=
cont_diff_parametric_primitive_of_cont_diff hF cont_diff_const a

lemma cont_diff.fderiv_parametric_integral
  {F : H ‚Üí ‚Ñù ‚Üí E} (hF : cont_diff ‚Ñù 1 ‚ÜøF)
  (a b : ‚Ñù) :
  fderiv ‚Ñù (Œª x : H, ‚à´ t in a..b, F x t) = Œª x : H, (‚à´ t in a..b, ‚àÇ‚ÇÅF x t) :=
begin
  ext x‚ÇÄ,
  cases has_fderiv_at_parametric_primitive_of_cont_diff' hF cont_diff_const x‚ÇÄ a with int h,
  rw [h.fderiv, fderiv_const],
  simp only [continuous_linear_map.comp_zero, add_zero, pi.zero_apply]
end

end
