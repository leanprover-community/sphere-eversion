import analysis.calculus.specific_functions

/- arguments about smoothness -/

open exp_neg_inv_glue real
lemma iterated_deriv_exp_neg_inv_glue (n : ‚Ñï) : iterated_deriv n exp_neg_inv_glue = f_aux n :=
by simp_rw [‚Üê f_aux_zero_eq, f_aux_iterated_deriv]

lemma iterated_deriv_exp_neg_inv_glue_zero (n : ‚Ñï) :
  iterated_deriv n exp_neg_inv_glue 0 = 0 :=
by simp_rw [iterated_deriv_exp_neg_inv_glue, f_aux, le_rfl, if_true]

@[simp]
lemma iterated_deriv_smooth_transition_zero (n : ‚Ñï) :
  iterated_deriv n smooth_transition 0 = 0 :=
sorry

@[simp]
lemma iterated_deriv_smooth_transition_one {n : ‚Ñï} (hn : 0 < n) :
  iterated_deriv n smooth_transition 1 = 0 :=
by { sorry }

@[simp]
lemma iterated_fderiv_smooth_transition_zero (n : ‚Ñï) :
  iterated_fderiv ‚Ñù n smooth_transition 0 = 0 :=
sorry

@[simp]
lemma iterated_fderiv_smooth_transition_one {n : ‚Ñï} (hn : 0 < n) :
  iterated_fderiv ‚Ñù n smooth_transition 1 = 0 :=
sorry

namespace linear_map
variables {R M‚ÇÅ M‚ÇÇ M‚ÇÉ : Type*}
variables [semiring R]
variables [add_comm_monoid M‚ÇÅ] [module R M‚ÇÅ]
variables [add_comm_monoid M‚ÇÇ] [module R M‚ÇÇ]
variables [add_comm_monoid M‚ÇÉ] [module R M‚ÇÉ]
example (L‚ÇÅ : M‚ÇÅ ‚Üí‚Çó[R] M‚ÇÉ) (L‚ÇÇ : M‚ÇÇ ‚Üí‚Çó[R] M‚ÇÉ) : M‚ÇÅ √ó M‚ÇÇ ‚Üí‚Çó[R] M‚ÇÉ :=
L‚ÇÅ.coprod L‚ÇÇ

end linear_map

namespace function
variables {Œπ Œ± Œ≤ : Sort*} [decidable_eq Œπ] (f : Œ± ‚Üí Œ≤) (g : Œπ ‚Üí Œ±) (i : Œπ) (v : Œ±) (j : Œπ)

lemma apply_update' : f (update g i v j) = update (f ‚àò g) i (f v) j :=
apply_update _ _ _ _ _

end function
open function

namespace multilinear_map
variables {R Œπ Œπ' M‚ÇÉ M‚ÇÑ : Type*} {M‚ÇÅ M‚ÇÇ : Œπ ‚Üí Type*} {N : Œπ' ‚Üí Type*}
variables [decidable_eq Œπ] [decidable_eq Œπ'] [semiring R]
variables [Œ† i, add_comm_monoid (M‚ÇÅ i)] [Œ† i, module R (M‚ÇÅ i)]
variables [Œ† i, add_comm_monoid (M‚ÇÇ i)] [Œ† i, module R (M‚ÇÇ i)]
variables [Œ† i, add_comm_monoid (N i)] [Œ† i, module R (N i)]
variables [add_comm_monoid M‚ÇÉ] [module R M‚ÇÉ]
variables [add_comm_monoid M‚ÇÑ] [module R M‚ÇÑ]

/-- The coproduct of two multilinear maps. -/
@[simps]
def coprod (L‚ÇÅ : multilinear_map R M‚ÇÅ M‚ÇÉ) (L‚ÇÇ : multilinear_map R M‚ÇÇ M‚ÇÉ) :
  multilinear_map R (Œª i, M‚ÇÅ i √ó M‚ÇÇ i) M‚ÇÉ :=
{ to_fun := Œª v, L‚ÇÅ (Œª i, (v i).1) + L‚ÇÇ (Œª i, (v i).2),
  map_add' := Œª v i p q, by {
  have h1 := function.apply_update (Œª _, prod.fst) v, dsimp at h1,
  have h2 := function.apply_update (Œª _, prod.snd) v, dsimp at h2,
  simp_rw [h1, h2, add_add_add_comm, ‚Üê L‚ÇÅ.map_add, ‚Üê L‚ÇÇ.map_add, prod.add_def] },
  map_smul' := Œª v i c p, by {
  have h1 := function.apply_update (Œª _, prod.fst) v, dsimp at h1,
  have h2 := function.apply_update (Œª _, prod.snd) v, dsimp at h2,
  simp_rw [h1, h2, smul_add, ‚Üê L‚ÇÅ.map_smul, ‚Üê L‚ÇÇ.map_smul, prod.smul_def] } }

/-- If `g` is a multilinear map and `f` is a collection of multilinear maps,
then `g (f‚ÇÅ m, ..., f‚Çô m)` is again a multilinear map, that we call
`g.comp f`. -/
def comp (g : multilinear_map R N M‚ÇÉ) (f : Œ† i, multilinear_map R M‚ÇÅ (N i)) :
  multilinear_map R M‚ÇÅ M‚ÇÉ :=
{ to_fun := Œª v, g (Œª i, f i v),
  map_add' := sorry,
  map_smul' := sorry }

end multilinear_map

namespace continuous_multilinear_map
variables {R Œπ Œπ' : Type*} {M‚ÇÅ M‚ÇÇ : Œπ ‚Üí Type*} {M‚ÇÉ M‚ÇÑ : Type*} {N : Œπ' ‚Üí Type*}
variables [decidable_eq Œπ] [decidable_eq Œπ'] [semiring R]
variables [Œ† i, add_comm_monoid (M‚ÇÅ i)] [Œ† i, add_comm_monoid (M‚ÇÇ i)] [add_comm_monoid M‚ÇÉ]
variables [Œ† i, module R (M‚ÇÅ i)] [Œ† i, module R (M‚ÇÇ i)] [module R M‚ÇÉ]
variables [Œ† i, topological_space (M‚ÇÅ i)] [Œ† i, topological_space (M‚ÇÇ i)]
variables [topological_space M‚ÇÉ]
variables [add_comm_monoid M‚ÇÑ] [module R M‚ÇÑ] [topological_space M‚ÇÑ]
variables [Œ† i, add_comm_monoid (N i)] [Œ† i, module R (N i)] [Œ† i, topological_space (N i)]


def simps.apply (L‚ÇÅ : continuous_multilinear_map R M‚ÇÅ M‚ÇÉ) (v : Œ† i, M‚ÇÅ i) : M‚ÇÉ := L‚ÇÅ v

initialize_simps_projections continuous_multilinear_map
  (-to_multilinear_map, to_multilinear_map_to_fun ‚Üí apply)

@[simps]
def comp (g : continuous_multilinear_map R N M‚ÇÉ) (f : Œ† i, continuous_multilinear_map R M‚ÇÅ (N i)) :
  continuous_multilinear_map R M‚ÇÅ M‚ÇÉ :=
{ cont := sorry,
  .. g.to_multilinear_map.comp $ Œª i, (f i).to_multilinear_map }

lemma comp_zero (g : continuous_multilinear_map R N M‚ÇÉ) :
  g.comp (Œª i, (0 : continuous_multilinear_map R M‚ÇÅ (N i))) = 0 :=
sorry

lemma zero_comp (f : Œ† i, continuous_multilinear_map R M‚ÇÅ (N i)) :
  (0 : continuous_multilinear_map R N M‚ÇÉ).comp f = 0 :=
sorry

variables [has_continuous_add M‚ÇÉ]
@[simps]
def coprod (L‚ÇÅ : continuous_multilinear_map R M‚ÇÅ M‚ÇÉ) (L‚ÇÇ : continuous_multilinear_map R M‚ÇÇ M‚ÇÉ) :
  continuous_multilinear_map R (Œª i, M‚ÇÅ i √ó M‚ÇÇ i) M‚ÇÉ :=
{ cont := (L‚ÇÅ.cont.comp $ by continuity).add (L‚ÇÇ.cont.comp $ by continuity),
  .. L‚ÇÅ.to_multilinear_map.coprod L‚ÇÇ.to_multilinear_map }

@[simp]
def zero_coprod_zero :
  (0 : continuous_multilinear_map R M‚ÇÅ M‚ÇÉ).coprod (0 : continuous_multilinear_map R M‚ÇÇ M‚ÇÉ) = 0 :=
by { ext, simp }

end continuous_multilinear_map


section smooth
variables {ùïú E E' F F' G H K : Type*}
variables [nondiscrete_normed_field ùïú]
variables [normed_group E] [normed_space ùïú E]
variables [normed_group E'] [normed_space ùïú E']
variables [normed_group F] [normed_space ùïú F]
variables [normed_group G] [normed_space ùïú G]
variables [normed_group H] [normed_space ùïú H]
variables [normed_group K] [normed_space ùïú K]
variables [normed_linear_ordered_field F'] [normed_space ùïú F']
variables {n : with_top ‚Ñï}
-- #print continuous.if_le

lemma cont_diff_of_partial {f : E √ó E' ‚Üí F} (h1f : ‚àÄ x, cont_diff ùïú n (Œª y, f (x, y)))
  (h2f : ‚àÄ y, cont_diff ùïú n (Œª x, f (x, y))) (hn : 1 ‚â§ n) : cont_diff ùïú n f :=
sorry

lemma iterated_fderiv_of_partial {f : E √ó E' ‚Üí F} {n : ‚Ñï} (h1f : ‚àÄ x, cont_diff ùïú n (Œª y, f (x, y)))
  (h2f : ‚àÄ y, cont_diff ùïú n (Œª x, f (x, y))) (hn : 1 ‚â§ n) (x : E) (y : E') :
    iterated_fderiv ùïú n f (x, y) =
    (iterated_fderiv ùïú n (Œª x, f (x, y)) x).coprod (iterated_fderiv ùïú n (Œª y, f (x, y)) y) :=
sorry

lemma iterated_fderiv_comp {g : F ‚Üí G} {f : E ‚Üí F} {n : ‚Ñï} (hg : cont_diff ùïú n g)
  (hf : cont_diff ùïú n f) (x : E) :
    iterated_fderiv ùïú n (g ‚àò f) x =
    (iterated_fderiv ùïú n g (f x)).comp (Œª i, iterated_fderiv ùïú n f x) :=
sorry

lemma cont_diff.if_le_of_fderiv {f g : E ‚Üí F} {a b : E ‚Üí F'}
  (hf : cont_diff ùïú n f) (hg : cont_diff ùïú n g) (ha : cont_diff ùïú n a) (hb : cont_diff ùïú n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_fderiv ùïú n f x = iterated_fderiv ùïú n g x) :
  cont_diff ùïú n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry

lemma cont_diff.if_le_of_deriv {n : with_top ‚Ñï} {f g : ùïú ‚Üí F} {a b : ùïú ‚Üí F'}
  (hf : cont_diff ùïú n f) (hg : cont_diff ùïú n g) (ha : cont_diff ùïú n a) (hb : cont_diff ùïú n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_deriv n f x = iterated_deriv n g x) :
  cont_diff ùïú n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry

lemma cont_diff.comp‚ÇÇ {g : E √ó F ‚Üí G} (hg : cont_diff ùïú n g) {e : H ‚Üí E} (he : cont_diff ùïú n e)
  {f : H ‚Üí F} (hf : cont_diff ùïú n f) : cont_diff ùïú n (Œª h, g (e h, f h)) :=
hg.comp $ he.prod hf

lemma cont_diff.comp‚ÇÉ {g : E √ó F √ó K ‚Üí G} (hg : cont_diff ùïú n g)
  {e : H ‚Üí E} (he : cont_diff ùïú n e) {f : H ‚Üí F} (hf : cont_diff ùïú n f)
  {k : H ‚Üí K} (hk : cont_diff ùïú n k) : cont_diff ùïú n (Œª h, g (e h, f h, k h)) :=
hg.comp $ he.prod $ hf.prod hk

end smooth
