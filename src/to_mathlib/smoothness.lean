import analysis.calculus.specific_functions

/- arguments about smoothness -/

open exp_neg_inv_glue real
lemma iterated_deriv_exp_neg_inv_glue (n : ‚Ñï) : iterated_deriv n exp_neg_inv_glue = f_aux n :=
by simp_rw [‚Üê f_aux_zero_eq, f_aux_iterated_deriv]

lemma iterated_deriv_exp_neg_inv_glue_zero (n : ‚Ñï) :
  iterated_deriv n exp_neg_inv_glue 0 = 0 :=
by simp_rw [iterated_deriv_exp_neg_inv_glue, f_aux, le_rfl, if_true]

lemma iterated_deriv_smooth_transition_zero (n : ‚Ñï) : iterated_deriv n smooth_transition 0 = 0 :=
sorry

lemma iterated_deriv_smooth_transition_one {n : ‚Ñï} (hn : 0 < n) :
  iterated_deriv n smooth_transition 1 = 0 :=
sorry

namespace continuous_multilinear_map
variables {R Œπ M‚ÇÉ : Type*} {M‚ÇÅ M‚ÇÇ : Œπ ‚Üí Type*}
variables [decidable_eq Œπ] [semiring R]
variables [Œ† i, add_comm_monoid (M‚ÇÅ i)] [Œ† i, module R (M‚ÇÅ i)] [Œ† i, topological_space (M‚ÇÅ i)]
variables [Œ† i, add_comm_monoid (M‚ÇÇ i)] [Œ† i, module R (M‚ÇÇ i)] [Œ† i, topological_space (M‚ÇÇ i)]
variables [add_comm_monoid M‚ÇÉ] [module R M‚ÇÉ] [topological_space M‚ÇÉ]
def prod_elim (L‚ÇÅ : continuous_multilinear_map R M‚ÇÅ M‚ÇÉ) (L‚ÇÇ : continuous_multilinear_map R M‚ÇÇ M‚ÇÉ) :
  continuous_multilinear_map R (Œª i, M‚ÇÅ i √ó M‚ÇÇ i) M‚ÇÉ :=
sorry

end continuous_multilinear_map


section smooth
variables {ùïú E E' F F' G H K : Type*}
variables [nondiscrete_normed_field ùïú]
variables [normed_group E] [normed_space ùïú E]
variables [normed_group E'] [normed_space ùïú E']
variables [normed_group F] [normed_space ùïú F]
variables [normed_group G] [normed_space ùïú G]
variables [normed_group H] [normed_space ùïú H]
variables [normed_group K] [normed_space ùïú K]
variables [normed_linear_ordered_field F'] [normed_space ùïú F']
variables {n : with_top ‚Ñï}
-- #print continuous.if_le

lemma cont_diff_of_partial {f : E √ó E' ‚Üí F} (h1f : ‚àÄ x, cont_diff ùïú n (Œª y, f (x, y)))
  (h2f : ‚àÄ y, cont_diff ùïú n (Œª x, f (x, y))) (hn : 1 ‚â§ n) : cont_diff ùïú n f :=
sorry

lemma iterated_fderiv_of_partial {f : E √ó E' ‚Üí F} {n : ‚Ñï} (h1f : ‚àÄ x, cont_diff ùïú n (Œª y, f (x, y)))
  (h2f : ‚àÄ y, cont_diff ùïú n (Œª x, f (x, y))) (hn : 1 ‚â§ n) (x : E) (y : E') :
    iterated_fderiv ùïú n f (x, y) =
    (iterated_fderiv ùïú n (Œª x, f (x, y)) x).prod_elim (iterated_fderiv ùïú n (Œª y, f (x, y)) y) :=
sorry

lemma cont_diff.if_le_of_fderiv {f g : E ‚Üí F} {a b : E ‚Üí F'}
  (hf : cont_diff ùïú n f) (hg : cont_diff ùïú n g) (ha : cont_diff ùïú n a) (hb : cont_diff ùïú n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_fderiv ùïú n f x = iterated_fderiv ùïú n g x) :
  cont_diff ùïú n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry

lemma cont_diff.if_le_of_deriv {n : with_top ‚Ñï} {f g : ùïú ‚Üí F} {a b : ùïú ‚Üí F'}
  (hf : cont_diff ùïú n f) (hg : cont_diff ùïú n g) (ha : cont_diff ùïú n a) (hb : cont_diff ùïú n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_deriv n f x = iterated_deriv n g x) :
  cont_diff ùïú n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry

lemma cont_diff.comp‚ÇÇ {g : E √ó F ‚Üí G} (hg : cont_diff ùïú n g) {e : H ‚Üí E} (he : cont_diff ùïú n e)
  {f : H ‚Üí F} (hf : cont_diff ùïú n f) : cont_diff ùïú n (Œª h, g (e h, f h)) :=
hg.comp $ he.prod hf

lemma cont_diff.comp‚ÇÉ {g : E √ó F √ó K ‚Üí G} (hg : cont_diff ùïú n g)
  {e : H ‚Üí E} (he : cont_diff ùïú n e) {f : H ‚Üí F} (hf : cont_diff ùïú n f)
  {k : H ‚Üí K} (hk : cont_diff ùïú n k) : cont_diff ùïú n (Œª h, g (e h, f h, k h)) :=
hg.comp $ he.prod $ hf.prod hk

end smooth
