import analysis.calculus.specific_functions

/- arguments about smoothness -/

open exp_neg_inv_glue real
lemma iterated_deriv_exp_neg_inv_glue (n : ‚Ñï) : iterated_deriv n exp_neg_inv_glue = f_aux n :=
by simp_rw [‚Üê f_aux_zero_eq, f_aux_iterated_deriv]

lemma iterated_deriv_exp_neg_inv_glue_zero (n : ‚Ñï) :
  iterated_deriv n exp_neg_inv_glue 0 = 0 :=
by simp_rw [iterated_deriv_exp_neg_inv_glue, f_aux, le_rfl, if_true]

lemma iterated_deriv_smooth_transition_zero (n : ‚Ñï) : iterated_deriv n smooth_transition 0 = 0 :=
sorry

lemma iterated_deriv_smooth_transition_one {n : ‚Ñï} (hn : 0 < n) :
  iterated_deriv n smooth_transition 1 = 0 :=
sorry


variables {ùïú E F F' : Type*}
variables [nondiscrete_normed_field ùïú] [normed_group E] [normed_space ùïú E]
variables [normed_group F] [normed_space ùïú F]
variables [normed_linear_ordered_field F'] [normed_space ùïú F']

lemma cont_diff.if_le_of_fderiv {n : with_top ‚Ñï} {f g : E ‚Üí F} {a b : E ‚Üí F'}
  (hf : cont_diff ùïú n f) (hg : cont_diff ùïú n g) (ha : cont_diff ùïú n a) (hb : cont_diff ùïú n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_fderiv ùïú n f x = iterated_fderiv ùïú n g x) :
  cont_diff ùïú n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry

lemma cont_diff.if_le_of_deriv {n : with_top ‚Ñï} {f g : ùïú ‚Üí F} {a b : ùïú ‚Üí F'}
  (hf : cont_diff ùïú n f) (hg : cont_diff ùïú n g) (ha : cont_diff ùïú n a) (hb : cont_diff ùïú n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_deriv n f x = iterated_deriv n g x) :
  cont_diff ùïú n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry
