import analysis.calculus.specific_functions

/- arguments about smoothness -/

open exp_neg_inv_glue real
lemma iterated_deriv_exp_neg_inv_glue (n : ‚Ñï) : iterated_deriv n exp_neg_inv_glue = f_aux n :=
by simp_rw [‚Üê f_aux_zero_eq, f_aux_iterated_deriv]

lemma iterated_deriv_exp_neg_inv_glue_zero (n : ‚Ñï) :
  iterated_deriv n exp_neg_inv_glue 0 = 0 :=
by simp_rw [iterated_deriv_exp_neg_inv_glue, f_aux, le_rfl, if_true]

@[simp]
lemma iterated_deriv_smooth_transition_zero (n : ‚Ñï) :
  iterated_deriv n smooth_transition 0 = 0 :=
sorry

@[simp]
lemma iterated_deriv_smooth_transition_one {n : ‚Ñï} (hn : 0 < n) :
  iterated_deriv n smooth_transition 1 = 0 :=
by { sorry }

@[simp]
lemma iterated_fderiv_smooth_transition_zero (n : ‚Ñï) :
  iterated_fderiv ‚Ñù n smooth_transition 0 = 0 :=
sorry

@[simp]
lemma iterated_fderiv_smooth_transition_one {n : ‚Ñï} (hn : 0 < n) :
  iterated_fderiv ‚Ñù n smooth_transition 1 = 0 :=
sorry

namespace linear_map
variables {R M‚ÇÅ M‚ÇÇ M‚ÇÉ : Type*}
variables [semiring R]
variables [add_comm_monoid M‚ÇÅ] [module R M‚ÇÅ]
variables [add_comm_monoid M‚ÇÇ] [module R M‚ÇÇ]
variables [add_comm_monoid M‚ÇÉ] [module R M‚ÇÉ]
example (L‚ÇÅ : M‚ÇÅ ‚Üí‚Çó[R] M‚ÇÉ) (L‚ÇÇ : M‚ÇÇ ‚Üí‚Çó[R] M‚ÇÉ) : M‚ÇÅ √ó M‚ÇÇ ‚Üí‚Çó[R] M‚ÇÉ :=
L‚ÇÅ.coprod L‚ÇÇ

end linear_map

namespace function
variables {Œπ Œ± Œ≤ : Sort*} [decidable_eq Œπ] (f : Œ± ‚Üí Œ≤) (g : Œπ ‚Üí Œ±) (i : Œπ) (v : Œ±) (j : Œπ)

lemma apply_update' : f (update g i v j) = update (f ‚àò g) i (f v) j :=
apply_update _ _ _ _ _

end function
open function

namespace multilinear_map
variables {R Œπ Œπ' M‚ÇÉ M‚ÇÑ : Type*} {M‚ÇÅ M‚ÇÇ : Œπ ‚Üí Type*} {N : Œπ' ‚Üí Type*}
variables [decidable_eq Œπ] [decidable_eq Œπ'] [semiring R]
variables [Œ† i, add_comm_monoid (M‚ÇÅ i)] [Œ† i, module R (M‚ÇÅ i)]
variables [Œ† i, add_comm_monoid (M‚ÇÇ i)] [Œ† i, module R (M‚ÇÇ i)]
variables [Œ† i, add_comm_monoid (N i)] [Œ† i, module R (N i)]
variables [add_comm_monoid M‚ÇÉ] [module R M‚ÇÉ]
variables [add_comm_monoid M‚ÇÑ] [module R M‚ÇÑ]

/-- The coproduct of two multilinear maps. -/
@[simps]
def coprod (L‚ÇÅ : multilinear_map R M‚ÇÅ M‚ÇÉ) (L‚ÇÇ : multilinear_map R M‚ÇÇ M‚ÇÉ) :
  multilinear_map R (Œª i, M‚ÇÅ i √ó M‚ÇÇ i) M‚ÇÉ :=
{ to_fun := Œª v, L‚ÇÅ (Œª i, (v i).1) + L‚ÇÇ (Œª i, (v i).2),
  map_add' := Œª v i p q, by {
  have h1 := function.apply_update (Œª _, prod.fst) v, dsimp at h1,
  have h2 := function.apply_update (Œª _, prod.snd) v, dsimp at h2,
  simp_rw [h1, h2, add_add_add_comm, ‚Üê L‚ÇÅ.map_add, ‚Üê L‚ÇÇ.map_add, prod.add_def] },
  map_smul' := Œª v i c p, by {
  have h1 := function.apply_update (Œª _, prod.fst) v, dsimp at h1,
  have h2 := function.apply_update (Œª _, prod.snd) v, dsimp at h2,
  simp_rw [h1, h2, smul_add, ‚Üê L‚ÇÅ.map_smul, ‚Üê L‚ÇÇ.map_smul, prod.smul_def] } }

/-- If `g` is a multilinear map and `f` is a collection of multilinear maps,
then `g (f‚ÇÅ m, ..., f‚Çô m)` is again a multilinear map, that we call
`g.comp f`. -/
def comp (g : multilinear_map R N M‚ÇÉ) (f : Œ† i, multilinear_map R M‚ÇÅ (N i)) :
  multilinear_map R M‚ÇÅ M‚ÇÉ :=
{ to_fun := Œª v, g (Œª i, f i v),
  map_add' := sorry,
  map_smul' := sorry }

end multilinear_map

namespace continuous_multilinear_map
variables {R Œπ Œπ' : Type*} {M‚ÇÅ M‚ÇÇ : Œπ ‚Üí Type*} {M‚ÇÉ M‚ÇÑ : Type*} {N : Œπ' ‚Üí Type*}
variables [decidable_eq Œπ] [decidable_eq Œπ'] [semiring R]
variables [Œ† i, add_comm_monoid (M‚ÇÅ i)] [Œ† i, add_comm_monoid (M‚ÇÇ i)] [add_comm_monoid M‚ÇÉ]
variables [Œ† i, module R (M‚ÇÅ i)] [Œ† i, module R (M‚ÇÇ i)] [module R M‚ÇÉ]
variables [Œ† i, topological_space (M‚ÇÅ i)] [Œ† i, topological_space (M‚ÇÇ i)]
variables [topological_space M‚ÇÉ]
variables [add_comm_monoid M‚ÇÑ] [module R M‚ÇÑ] [topological_space M‚ÇÑ]
variables [Œ† i, add_comm_monoid (N i)] [Œ† i, module R (N i)] [Œ† i, topological_space (N i)]


def simps.apply (L‚ÇÅ : continuous_multilinear_map R M‚ÇÅ M‚ÇÉ) (v : Œ† i, M‚ÇÅ i) : M‚ÇÉ := L‚ÇÅ v

initialize_simps_projections continuous_multilinear_map
  (-to_multilinear_map, to_multilinear_map_to_fun ‚Üí apply)

@[simps]
def comp (g : continuous_multilinear_map R N M‚ÇÉ) (f : Œ† i, continuous_multilinear_map R M‚ÇÅ (N i)) :
  continuous_multilinear_map R M‚ÇÅ M‚ÇÉ :=
{ cont := sorry,
  .. g.to_multilinear_map.comp $ Œª i, (f i).to_multilinear_map }

lemma comp_zero (g : continuous_multilinear_map R N M‚ÇÉ) :
  g.comp (Œª i, (0 : continuous_multilinear_map R M‚ÇÅ (N i))) = 0 :=
sorry

lemma zero_comp (f : Œ† i, continuous_multilinear_map R M‚ÇÅ (N i)) :
  (0 : continuous_multilinear_map R N M‚ÇÉ).comp f = 0 :=
sorry

variables [has_continuous_add M‚ÇÉ]
@[simps]
def coprod (L‚ÇÅ : continuous_multilinear_map R M‚ÇÅ M‚ÇÉ) (L‚ÇÇ : continuous_multilinear_map R M‚ÇÇ M‚ÇÉ) :
  continuous_multilinear_map R (Œª i, M‚ÇÅ i √ó M‚ÇÇ i) M‚ÇÉ :=
{ cont := (L‚ÇÅ.cont.comp $ by continuity).add (L‚ÇÇ.cont.comp $ by continuity),
  .. L‚ÇÅ.to_multilinear_map.coprod L‚ÇÇ.to_multilinear_map }

@[simp]
def zero_coprod_zero :
  (0 : continuous_multilinear_map R M‚ÇÅ M‚ÇÉ).coprod (0 : continuous_multilinear_map R M‚ÇÇ M‚ÇÉ) = 0 :=
by { ext, simp }

end continuous_multilinear_map


section C1_real

variables {E E' F : Type*}
variables [normed_group E] [normed_space ‚Ñù E]
variables [normed_group E'] [normed_space ‚Ñù E']
variables [normed_group F] [normed_space ‚Ñù F]

open filter asymptotics metric
open_locale topological_space filter

/-
The next two lemmas may be too specialized, but they are painful enough that we don't want
to prove them in the middle of some serious proof. Maybe there is a more general statement
that would still be useful enough to combine is_o.comp_tendsto and is_o.trans_is_O.
-/

lemma asymptotics.is_o.comp_fst' {E E' F : Type*} [normed_group E] [normed_group E'] [normed_group F]
  {f : E ‚Üí F} (h : is_o f id (ùìù 0)) :
  is_o (Œª p : E √ó E', f p.1) id (ùìù 0) :=
begin
  have : tendsto prod.fst (ùìù (0 : E √ó E')) (ùìù 0), from continuous_fst.continuous_at,
  apply (h.comp_tendsto this).trans_is_O,
  rw show id ‚àò prod.fst = (Œª h : E √ó E', h.1), by { ext x, refl },
  exact is_O_fst_prod'
end

lemma asymptotics.is_o.comp_fst {E E' F : Type*} [normed_group E] [normed_group E'] [normed_group F]
  {f : E ‚Üí F} {e : E} (h : is_o f (Œª x, x - e) (ùìù e)) (e' : E') :
  is_o (Œª p : E √ó E', f p.1) (Œª p, p - (e, e')) (ùìù (e, e')) :=
begin
  have : tendsto prod.fst (ùìù (e, e')) (ùìù e), from continuous_fst.continuous_at,
  apply (h.comp_tendsto this).trans_is_O,
  rw show (Œª (x : E), x - e) ‚àò prod.fst = (Œª (p : E √ó E'), p.1 - e), by {ext, refl},
  exact is_O_fst_prod
end

lemma asymptotics.is_o.comp_snd' {E E' F : Type*} [normed_group E] [normed_group E'] [normed_group F]
  {f : E' ‚Üí F} (h : is_o f id (ùìù 0)) :
  is_o (Œª p : E √ó E', f p.2) id (ùìù 0) :=
begin
  have : tendsto prod.snd (ùìù (0 : E √ó E')) (ùìù 0), from continuous_snd.continuous_at,
  apply (h.comp_tendsto this).trans_is_O,
  rw show id ‚àò prod.snd = (Œª h : E √ó E', h.2), by { ext x, refl },
  exact is_O_snd_prod'
end

lemma asymptotics.is_o.comp_snd {E E' F : Type*} [normed_group E] [normed_group E'] [normed_group F]
  {f : E' ‚Üí F} {e' : E'} (h : is_o f (Œª x, x - e') (ùìù e')) (e : E) :
  is_o (Œª p : E √ó E', f p.2) (Œª p, p - (e, e')) (ùìù (e, e')) :=
begin
  have : tendsto prod.snd (ùìù (e, e')) (ùìù e'), from continuous_snd.continuous_at,
  apply (h.comp_tendsto this).trans_is_O,
  rw show (Œª (x : E'), x - e') ‚àò prod.snd = (Œª (p : E √ó E'), p.2 - e'), by {ext, refl},
  exact is_O_snd_prod
end


lemma prod_mem_ball_iff {Œ± Œ≤ : Type*} [pseudo_metric_space Œ±] [pseudo_metric_space Œ≤] {x x‚ÇÄ : Œ±} {y y‚ÇÄ : Œ≤}
  {r} : (x, y) ‚àà ball (x‚ÇÄ, y‚ÇÄ) r ‚Üî (x ‚àà ball x‚ÇÄ r) ‚àß (y ‚àà ball y‚ÇÄ r):=
begin
  rw [mem_ball, prod.dist_eq],
  exact max_lt_iff
end

lemma prod_mem_ball_iff' {Œ± Œ≤ : Type*} [pseudo_metric_space Œ±] [pseudo_metric_space Œ≤] {x : Œ±} {y : Œ≤}
  {p : Œ± √ó Œ≤}
  {r} : (x, y) ‚àà ball p r ‚Üî (x ‚àà ball p.1 r) ‚àß (y ‚àà ball p.2 r):=
prod_mem_ball_iff


lemma prod_mk_mem_ball {Œ± Œ≤ : Type*} [pseudo_metric_space Œ±] [pseudo_metric_space Œ≤] {x x‚ÇÄ : Œ±} {y y‚ÇÄ : Œ≤}
  {r} (hx : x ‚àà ball x‚ÇÄ r) (hy : y ‚àà ball y‚ÇÄ r) : (x, y) ‚àà ball (x‚ÇÄ, y‚ÇÄ) r :=
begin
  rw prod_mem_ball_iff,
  exact ‚ü®hx, hy‚ü©
end

def linear_map.coprod‚Çó (R M M‚ÇÇ M‚ÇÉ : Type*) [comm_ring R]
  [add_comm_monoid M] [add_comm_monoid M‚ÇÇ] [add_comm_monoid M‚ÇÉ] [module R M]
  [module R M‚ÇÇ] [module R M‚ÇÉ] : ((M ‚Üí‚Çó[R] M‚ÇÉ) √ó (M‚ÇÇ ‚Üí‚Çó[R] M‚ÇÉ)) ‚Üí‚Çó[R] (M √ó M‚ÇÇ ‚Üí‚Çó[R] M‚ÇÉ) :=
{ to_fun := Œª p, p.1.coprod p.2,
  map_add' := begin
    intros p q,
    apply linear_map.coe_injective,
    ext x,
    simp only [prod.fst_add, linear_map.coprod_apply, linear_map.add_apply, prod.snd_add],
    ac_refl
  end,
  map_smul' := begin
    intros r p,
    apply linear_map.coe_injective,
    ext x,
    simp only [prod.smul_fst, prod.smul_snd, linear_map.coprod_apply, linear_map.smul_apply,
               ring_hom.id_apply, smul_add]
  end }

lemma add_le_twice_max (a b : ‚Ñù) : a + b ‚â§ 2*max a b :=
calc a + b ‚â§ max a b + max a b : add_le_add (le_max_left a b) (le_max_right a b)
... = _ : by ring

lemma is_bounded_linear_map_coprod (ùïú : Type*) [nondiscrete_normed_field ùïú] (E : Type*) [normed_group E]
  [normed_space ùïú E] (F : Type*) [normed_group F] [normed_space ùïú F]
  (G : Type*) [normed_group G] [normed_space ùïú G] : is_bounded_linear_map ùïú
  (Œª p : (E ‚ÜíL[ùïú] G) √ó (F ‚ÜíL[ùïú] G), p.1.coprod p.2) :=
{ map_add := begin
    intros,
    apply continuous_linear_map.coe_fn_injective,
    ext u,
    simp only [prod.fst_add, prod.snd_add, continuous_linear_map.coprod_apply,
               continuous_linear_map.add_apply],
    ac_refl
  end,
  map_smul := begin
    intros r p,
    apply continuous_linear_map.coe_fn_injective,
    ext x,
    simp only [prod.smul_fst, prod.smul_snd, continuous_linear_map.coprod_apply,
               continuous_linear_map.coe_smul', pi.smul_apply, smul_add],
  end,
  bound := begin
    refine ‚ü®2, zero_lt_two, _‚ü©,
    rintros ‚ü®œÜ, œà‚ü©,
    apply continuous_linear_map.op_norm_le_bound,
    apply mul_nonneg zero_le_two, apply norm_nonneg,
    rintros ‚ü®e, f‚ü©,
    calc ‚à•œÜ e + œà f‚à• ‚â§ ‚à•œÜ e‚à• + ‚à•œà f‚à• : norm_add_le _ _
    ... ‚â§  ‚à•œÜ‚à• * ‚à•e‚à• + ‚à•œà‚à• * ‚à•f‚à• : add_le_add (œÜ.le_op_norm e) (œà.le_op_norm f)
    ... ‚â§ (max ‚à•œÜ‚à• ‚à•œà‚à•) * ‚à•e‚à• + (max ‚à•œÜ‚à• ‚à•œà‚à•) * ‚à•f‚à• : _
    ... ‚â§ (2*(max ‚à•œÜ‚à• ‚à•œà‚à•)) * (max ‚à•e‚à• ‚à•f‚à•) : _,
    apply add_le_add,
    exact mul_le_mul_of_nonneg_right (le_max_left ‚à•œÜ‚à• ‚à•œà‚à•) (norm_nonneg e),
    exact mul_le_mul_of_nonneg_right (le_max_right ‚à•œÜ‚à• ‚à•œà‚à•) (norm_nonneg f),
    rw [‚Üê mul_add, mul_comm (2 : ‚Ñù), mul_assoc],
    apply mul_le_mul_of_nonneg_left (add_le_twice_max _ _) (le_max_of_le_left $ norm_nonneg _)
  end }

noncomputable
def continuous_linear_map.coprodL {ùïú : Type*} [nondiscrete_normed_field ùïú] {E : Type*} [normed_group E]
  [normed_space ùïú E] {F : Type*} [normed_group F] [normed_space ùïú F]
  {G : Type*} [normed_group G] [normed_space ùïú G] :
  ((E ‚ÜíL[ùïú] G) √ó (F ‚ÜíL[ùïú] G)) ‚ÜíL[ùïú] (E √ó F ‚ÜíL[ùïú] G) :=
(is_bounded_linear_map_coprod ùïú E F G).to_continuous_linear_map



lemma has_fderiv_at.comp' {ùïú : Type*} [nondiscrete_normed_field ùïú] {E : Type*} [normed_group E]
  [normed_space ùïú E] {F : Type*} [normed_group F] [normed_space ùïú F]
  {G : Type*} [normed_group G] [normed_space ùïú G] {f : E ‚Üí F} {f' : E ‚ÜíL[ùïú] F} {x : E}
  {g : F ‚Üí G} {g' : F ‚ÜíL[ùïú] G} (hg : has_fderiv_at g g' (f x)) (hf : has_fderiv_at f f' x)
  {gf' : E ‚ÜíL[ùïú] G} (h : gf' = g'.comp f') :
  has_fderiv_at (g ‚àò f) gf' x :=
h.symm ‚ñ∏ hg.comp x hf

lemma has_fderiv_at.sub' {ùïú : Type*} [ nondiscrete_normed_field ùïú] {E : Type*} [normed_group E]
  [normed_space ùïú E] {F : Type*} [normed_group F] [normed_space ùïú F]
  {f g : E ‚Üí F} {f' g' fg' : E ‚ÜíL[ùïú] F} {x : E} (hf : has_fderiv_at f f' x)
  (hg : has_fderiv_at g g' x)  (h : fg' = f' - g') :
  has_fderiv_at (Œª (x : E), f x - g x) fg' x :=
h.symm ‚ñ∏ hf.sub hg

lemma has_fderiv_at_of_partial {f : E √ó E' ‚Üí F} {œÜ‚ÇÅ : E √ó E' ‚Üí (E ‚ÜíL[‚Ñù] F)}
  {œÜ‚ÇÇ : E √ó E' ‚Üí (E' ‚ÜíL[‚Ñù] F)} {p : E √ó E'}
  (hfœÜ‚ÇÅ : ‚àÄ·∂† (q : E √ó E') in ùìù p, has_fderiv_at (Œª (x : E), f (x, q.2)) (œÜ‚ÇÅ q) q.1)
  (hfœÜ‚ÇÇ : has_fderiv_at (Œª (y : E'), f (p.1, y)) (œÜ‚ÇÇ p) p.2) (hœÜ‚ÇÅ : continuous_at œÜ‚ÇÅ p) :
  has_fderiv_at f ((œÜ‚ÇÅ p).coprod (œÜ‚ÇÇ p)) p :=
begin
  change is_o _ _ _,
  have : (Œª (q : E √ó E'), f q - f p - ((œÜ‚ÇÅ p).coprod (œÜ‚ÇÇ p)) (q - p)) =
    (Œª q : E √ó E', f (q.1, q.2) - f (p.1, q.2) - œÜ‚ÇÅ p (q.1 - p.1)) +
    (Œª e', f (p.1, e') - f p  - œÜ‚ÇÇ p (e'-p.2)) ‚àò prod.snd,
  { ext ‚ü®x, y‚ü©,
    simp only [continuous_linear_map.coprod_apply, prod.fst_sub, map_sub, pi.add_apply, comp_app],
    abel },
  rw this, clear this,
  apply is_o.add,
  { rw is_o_iff,
    intros Œµ Œµ_pos,
    have : ‚àÄ·∂† (q : E √ó E') in ùìù p, ‚à•œÜ‚ÇÅ q - œÜ‚ÇÅ p‚à• ‚â§ Œµ,
    { filter_upwards [nhds_basis_ball.tendsto_right_iff.mp hœÜ‚ÇÅ Œµ Œµ_pos] with x hx,
      exact (mem_ball_iff_norm.mp hx).le },
    rcases metric.eventually_nhds_iff_ball.mp (this.and hfœÜ‚ÇÅ) with ‚ü®Œ¥, Œ¥_pos, hŒ¥‚ü©,
    apply metric.eventually_nhds_iff_ball.mpr ‚ü®Œ¥, Œ¥_pos, _‚ü©,
    rintros ‚ü®q‚ÇÅ, q‚ÇÇ‚ü© h,
    dsimp only,
    let œà : E' ‚Üí E ‚Üí F := Œª q‚ÇÇ q‚ÇÅ, f (q‚ÇÅ, q‚ÇÇ) - œÜ‚ÇÅ p (q‚ÇÅ - p.1),
    have : f (q‚ÇÅ, q‚ÇÇ) - f (p.fst, q‚ÇÇ) - (œÜ‚ÇÅ p) (q‚ÇÅ - p.fst) = œà q‚ÇÇ q‚ÇÅ - œà q‚ÇÇ p.1,
    { simp only [œà, pi.sub_apply],
      simp only [sub_self, sub_zero, continuous_linear_map.map_zero, sub_right_comm] },
    rw this,
    rw prod_mem_ball_iff' at h,
    have hœà : ‚àÄ q‚ÇÅ ‚àà ball p.1 Œ¥, has_fderiv_at (œà q‚ÇÇ) (œÜ‚ÇÅ (q‚ÇÅ, q‚ÇÇ) - œÜ‚ÇÅ p) q‚ÇÅ,
    { intros q‚ÇÅ' hq‚ÇÅ',

      apply (hŒ¥ ‚ü®q‚ÇÅ', q‚ÇÇ‚ü© (prod_mk_mem_ball hq‚ÇÅ' h.2)).2.sub,
      have : has_fderiv_at (Œª (x : E), x - p.fst) (continuous_linear_map.id ‚Ñù E) q‚ÇÅ',
      { apply (has_fderiv_at_id _).sub' (has_fderiv_at_const _ _),
        simp },
      apply (œÜ‚ÇÅ p).has_fderiv_at.comp' this,
      simp },
    suffices : ‚à•œà q‚ÇÇ q‚ÇÅ - œà q‚ÇÇ p.fst‚à• ‚â§ Œµ * ‚à•q‚ÇÅ - p.1‚à•,
    { exact this.trans (mul_le_mul_of_nonneg_left (le_max_left _ _) Œµ_pos.le) },
    apply (convex_ball p.1 Œ¥).norm_image_sub_le_of_norm_has_fderiv_within_le (Œª x hx, (hœà x hx).has_fderiv_within_at) _ (mem_ball_self Œ¥_pos) h.1,
    intros x hx,
    exact (hŒ¥ (x, q‚ÇÇ) (prod_mk_mem_ball hx h.2)).1 },
  { cases p with p‚ÇÅ p‚ÇÇ,
    have : is_o _ _ _ := hfœÜ‚ÇÇ,
    exact this.comp_snd p‚ÇÅ }
end

lemma has_fderiv_of_partial {f : E √ó E' ‚Üí F} {œÜ‚ÇÅ : E √ó E' ‚Üí (E ‚ÜíL[‚Ñù] F)}
  {œÜ‚ÇÇ : E √ó E' ‚Üí (E' ‚ÜíL[‚Ñù] F)}
  (hfœÜ‚ÇÅ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (x : E), f (x, q.2)) (œÜ‚ÇÅ q) q.1)
  (hfœÜ‚ÇÇ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (y : E'), f (q.1, y)) (œÜ‚ÇÇ q) q.2)
  (hœÜ‚ÇÅ : continuous œÜ‚ÇÅ) (p : E √ó E') :
  has_fderiv_at f ((œÜ‚ÇÅ p).coprod (œÜ‚ÇÇ p)) p :=
has_fderiv_at_of_partial (eventually_of_forall (Œª q : E √ó E', (hfœÜ‚ÇÅ q))) (hfœÜ‚ÇÇ p) hœÜ‚ÇÅ.continuous_at

lemma fderiv_of_partial {f : E √ó E' ‚Üí F} {œÜ‚ÇÅ : E √ó E' ‚Üí (E ‚ÜíL[‚Ñù] F)}
  {œÜ‚ÇÇ : E √ó E' ‚Üí (E' ‚ÜíL[‚Ñù] F)}
  (hfœÜ‚ÇÅ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (x : E), f (x, q.2)) (œÜ‚ÇÅ q) q.1)
  (hfœÜ‚ÇÇ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (y : E'), f (q.1, y)) (œÜ‚ÇÇ q) q.2)
  (hœÜ‚ÇÅ : continuous œÜ‚ÇÅ) : fderiv ‚Ñù f = Œª p, ((œÜ‚ÇÅ p).coprod (œÜ‚ÇÇ p)) :=
funext (Œª p, (has_fderiv_of_partial hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ p).fderiv)

lemma cont_diff_one_of_partial {f : E √ó E' ‚Üí F} {œÜ‚ÇÅ : E √ó E' ‚Üí (E ‚ÜíL[‚Ñù] F)}
  {œÜ‚ÇÇ : E √ó E' ‚Üí (E' ‚ÜíL[‚Ñù] F)}
  (hfœÜ‚ÇÅ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (x : E), f (x, q.2)) (œÜ‚ÇÅ q) q.1)
  (hfœÜ‚ÇÇ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (y : E'), f (q.1, y)) (œÜ‚ÇÇ q) q.2)
  (hœÜ‚ÇÅ : continuous œÜ‚ÇÅ) (hœÜ‚ÇÇ : continuous œÜ‚ÇÇ) : cont_diff ‚Ñù 1 f :=
begin
  rw cont_diff_one_iff_fderiv,
  refine ‚ü®Œª p, ‚ü®(œÜ‚ÇÅ p).coprod (œÜ‚ÇÇ p), has_fderiv_of_partial hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ p‚ü©, _‚ü©,
  rw fderiv_of_partial hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ,
  exact continuous_linear_map.coprodL.continuous.comp (hœÜ‚ÇÅ.prod_mk hœÜ‚ÇÇ)
end


end  C1_real

section smooth_real_same_univ

-- Fixing the universe for induction purposes. Maybe this can be avoided.
universe u
variables {E E' F F' G H K : Type u}
variables [normed_group E] [normed_space ‚Ñù E]
variables [normed_group E'] [normed_space ‚Ñù E']
variables [normed_group F] [normed_space ‚Ñù F]
variables [normed_group G] [normed_space ‚Ñù G]
variables [normed_group H] [normed_space ‚Ñù H]
variables [normed_group K] [normed_space ‚Ñù K]
variables [normed_linear_ordered_field F'] [normed_space ‚Ñù F']
variables {n : with_top ‚Ñï}
-- #print continuous.if_le

lemma cont_diff_of_partial' {n : ‚Ñï} {f : E √ó E' ‚Üí F} {œÜ‚ÇÅ : E √ó E' ‚Üí (E ‚ÜíL[‚Ñù] F)}
  {œÜ‚ÇÇ : E √ó E' ‚Üí (E' ‚ÜíL[‚Ñù] F)}
  (hfœÜ‚ÇÅ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (x : E), f (x, q.2)) (œÜ‚ÇÅ q) q.1)
  (hfœÜ‚ÇÇ : ‚àÄ q : E √ó E', has_fderiv_at (Œª (y : E'), f (q.1, y)) (œÜ‚ÇÇ q) q.2)
  (hœÜ‚ÇÅ : cont_diff ‚Ñù n œÜ‚ÇÅ) (hœÜ‚ÇÇ : cont_diff ‚Ñù n œÜ‚ÇÇ) : cont_diff ‚Ñù (n+1) f :=
begin
  revertI F,
  induction n with n hn,
  sorry ; { introsI F _ _ f œÜ‚ÇÅ œÜ‚ÇÇ hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ hœÜ‚ÇÇ,
    exact cont_diff_one_of_partial hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ.continuous hœÜ‚ÇÇ.continuous },
  introsI F _ _ f œÜ‚ÇÅ œÜ‚ÇÇ hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ hœÜ‚ÇÇ,
  erw cont_diff_succ_iff_fderiv,
  refine ‚ü®(cont_diff_one_of_partial hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ.continuous hœÜ‚ÇÇ.continuous).differentiable le_rfl, _‚ü©,
  apply hn,
  { intros q,
    rw fderiv_of_partial hfœÜ‚ÇÅ hfœÜ‚ÇÇ hœÜ‚ÇÅ.continuous,
    dsimp,
    have := funext (Œª x, (hfœÜ‚ÇÅ (x, q.2)).fderiv),
    dsimp at this,
    sorry },
  all_goals {sorry}
end
end smooth_real_same_univ

section smooth_real

variables {E E' F F' G H K : Type*}
variables [normed_group E] [normed_space ‚Ñù E]
variables [normed_group E'] [normed_space ‚Ñù E']
variables [normed_group F] [normed_space ‚Ñù F]
variables [normed_group G] [normed_space ‚Ñù G]
variables [normed_group H] [normed_space ‚Ñù H]
variables [normed_group K] [normed_space ‚Ñù K]
variables [normed_linear_ordered_field F'] [normed_space ‚Ñù F']
variables {n : with_top ‚Ñï}

-- Note: Patrick thinks all statements in this section are wrong

lemma cont_diff_of_partial {f : E √ó E' ‚Üí F} (h1f : ‚àÄ x, cont_diff ‚Ñù (n+1) (Œª y, f (x, y)))
  (h2f : ‚àÄ y, cont_diff ‚Ñù (n + 1) (Œª x, f (x, y))) : cont_diff ‚Ñù (n+1) f :=
sorry

lemma iterated_fderiv_of_partial {f : E √ó E' ‚Üí F} {n : ‚Ñï} (h1f : ‚àÄ x, cont_diff ‚Ñù (n+1) (Œª y, f (x, y)))
  (h2f : ‚àÄ y, cont_diff ‚Ñù (n+1) (Œª x, f (x, y))) (x : E) (y : E') :
    iterated_fderiv ‚Ñù (n+1) f (x, y) =
    (iterated_fderiv ‚Ñù (n+1) (Œª x, f (x, y)) x).coprod (iterated_fderiv ‚Ñù (n+1) (Œª y, f (x, y)) y) :=
sorry

lemma iterated_fderiv_comp {g : F ‚Üí G} {f : E ‚Üí F} {n : ‚Ñï} (hg : cont_diff ‚Ñù n g)
  (hf : cont_diff ‚Ñù n f) (x : E) :
    iterated_fderiv ‚Ñù n (g ‚àò f) x =
    (iterated_fderiv ‚Ñù n g (f x)).comp (Œª i, iterated_fderiv ‚Ñù n f x) :=
sorry

lemma cont_diff.if_le_of_fderiv {f g : E ‚Üí F} {a b : E ‚Üí F'}
  (hf : cont_diff ‚Ñù n f) (hg : cont_diff ‚Ñù n g) (ha : cont_diff ‚Ñù n a) (hb : cont_diff ‚Ñù n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_fderiv ‚Ñù n f x = iterated_fderiv ‚Ñù n g x) :
  cont_diff ‚Ñù n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry

lemma cont_diff.if_le_of_deriv {n : with_top ‚Ñï} {f g : ‚Ñù ‚Üí F} {a b : ‚Ñù ‚Üí F'}
  (hf : cont_diff ‚Ñù n f) (hg : cont_diff ‚Ñù n g) (ha : cont_diff ‚Ñù n a) (hb : cont_diff ‚Ñù n b)
  (h : ‚àÄ x n, a x = b x ‚Üí iterated_deriv n f x = iterated_deriv n g x) :
  cont_diff ‚Ñù n (Œª x, if a x ‚â§ b x then f x else g x) :=
sorry

end smooth_real

section smooth
variables {ùïú E E' F F' G H K : Type*}
variables [nondiscrete_normed_field ùïú]
variables [normed_group E] [normed_space ùïú E]
variables [normed_group E'] [normed_space ùïú E']
variables [normed_group F] [normed_space ùïú F]
variables [normed_group G] [normed_space ùïú G]
variables [normed_group H] [normed_space ùïú H]
variables [normed_group K] [normed_space ùïú K]
variables [normed_linear_ordered_field F'] [normed_space ùïú F']
variables {n : with_top ‚Ñï}


lemma cont_diff.comp‚ÇÇ {g : E √ó F ‚Üí G} (hg : cont_diff ùïú n g) {e : H ‚Üí E} (he : cont_diff ùïú n e)
  {f : H ‚Üí F} (hf : cont_diff ùïú n f) : cont_diff ùïú n (Œª h, g (e h, f h)) :=
hg.comp $ he.prod hf

lemma cont_diff.comp‚ÇÉ {g : E √ó F √ó K ‚Üí G} (hg : cont_diff ùïú n g)
  {e : H ‚Üí E} (he : cont_diff ùïú n e) {f : H ‚Üí F} (hf : cont_diff ùïú n f)
  {k : H ‚Üí K} (hk : cont_diff ùïú n k) : cont_diff ùïú n (Œª h, g (e h, f h, k h)) :=
hg.comp $ he.prod $ hf.prod hk

end smooth
