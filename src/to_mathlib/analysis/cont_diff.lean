import analysis.calculus.inverse
import analysis.calculus.cont_diff

import to_mathlib.analysis.calculus
import to_mathlib.analysis.normed_space.operator_norm

noncomputable theory

open_locale topological_space filter
open function

section
universes u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ

open continuous_linear_map

variables {ùïú : Type u‚ÇÅ} [nondiscrete_normed_field ùïú]
  {M‚ÇÅ : Type u‚ÇÇ} [normed_group M‚ÇÅ] [normed_space ùïú M‚ÇÅ]
  {M‚ÇÇ : Type u‚ÇÉ} [normed_group M‚ÇÇ] [normed_space ùïú M‚ÇÇ]
  {M‚ÇÉ : Type u‚ÇÑ} [normed_group M‚ÇÉ] [normed_space ùïú M‚ÇÉ]
  {M‚ÇÑ : Type u‚ÇÖ} [normed_group M‚ÇÑ] [normed_space ùïú M‚ÇÑ]

-- The next definition won't be used here, it's practice before the next one.

/-- Defines continuous linear maps between two products by blocks:
given `(A : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÉ)`, `(B : M‚ÇÇ ‚ÜíL[ùïú] M‚ÇÉ)`, `(C : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÑ)` and `(D : M‚ÇÇ ‚ÜíL[ùïú] M‚ÇÑ)`,
construct the continuous linear map with "matrix":
A B
C D. -/
def continuous_linear_map.blocks (A : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÉ) (B : M‚ÇÇ ‚ÜíL[ùïú] M‚ÇÉ)
  (C : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÑ) (D : M‚ÇÇ ‚ÜíL[ùïú] M‚ÇÑ) : (M‚ÇÅ √ó M‚ÇÇ) ‚ÜíL[ùïú] (M‚ÇÉ √ó M‚ÇÑ) :=
(A.coprod B).prod (C.coprod D)

/-- Given `(A : M‚ÇÅ ‚âÉL[ùïú] M‚ÇÉ)`, `(C : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÑ)` and `(D : M‚ÇÇ ‚âÉL[ùïú] M‚ÇÑ)`,
construct the continuous linear equiv with "matrix"
A 0
C D.
  -/
def continuous_linear_equiv.lower_triangular (A : M‚ÇÅ ‚âÉL[ùïú] M‚ÇÉ)
  (C : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÑ) (D : M‚ÇÇ ‚âÉL[ùïú] M‚ÇÑ) : (M‚ÇÅ √ó M‚ÇÇ) ‚âÉL[ùïú] (M‚ÇÉ √ó M‚ÇÑ) :=
continuous_linear_equiv.equiv_of_inverse (((A : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÉ).comp (fst ùïú M‚ÇÅ M‚ÇÇ)).prod (C.coprod D))
(((A.symm : M‚ÇÉ ‚ÜíL[ùïú] M‚ÇÅ).comp (fst ùïú M‚ÇÉ M‚ÇÑ)).prod
((-((D.symm : M‚ÇÑ ‚ÜíL[ùïú] M‚ÇÇ).comp C).comp (A.symm : M‚ÇÉ ‚ÜíL[ùïú] M‚ÇÅ)).coprod D.symm))
(Œª ‚ü®x, y‚ü©, by simp only [prod_apply, coe_comp', continuous_linear_equiv.coe_coe, coe_fst', comp_app,
           coprod_apply, continuous_linear_equiv.symm_apply_apply, neg_apply,
           continuous_linear_equiv.map_add, neg_add_cancel_left])
(Œª ‚ü®x, y‚ü©, by simp only [prod_apply, coe_comp', continuous_linear_equiv.coe_coe, coe_fst', comp_app,
           coprod_apply, neg_apply, continuous_linear_equiv.apply_symm_apply,
           continuous_linear_equiv.map_add, continuous_linear_equiv.map_neg, add_neg_cancel_left])

lemma continuous_linear_equiv.continuous_lower_triangular {X : Type*} [topological_space X]
  {A : X ‚Üí M‚ÇÅ ‚âÉL[ùïú] M‚ÇÉ} {C : X ‚Üí M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÑ} {D : X ‚Üí M‚ÇÇ ‚âÉL[ùïú] M‚ÇÑ}
  (hA : continuous (Œª x, (A x : M‚ÇÅ ‚ÜíL[ùïú] M‚ÇÉ))) (hC : continuous C)
  (hD : continuous (Œª x, (D x : M‚ÇÇ ‚ÜíL[ùïú] M‚ÇÑ))) :
  continuous (Œª x, ((A x).lower_triangular (C x) (D x) : (M‚ÇÅ √ó M‚ÇÇ) ‚ÜíL[ùïú] (M‚ÇÉ √ó M‚ÇÑ))) :=
(hA.compL continuous_const).prodL (hC.coprodL hD)

end

section
variables (ùïú : Type*) [nondiscrete_normed_field ùïú]
  {E : Type*} [normed_group E] [normed_space ùïú E]
  {F : Type*} [normed_group F] [normed_space ùïú F]
  {G : Type*} [normed_group G] [normed_space ùïú G]
  {n : with_top ‚Ñï}

-- The next two definitions aren't used in the end, but they may still go to mathlib
def strict_differentiable_at (f : E ‚Üí F) (x) :=
‚àÉ œÜ : E ‚ÜíL[ùïú] F, has_strict_fderiv_at f œÜ x

def strict_differentiable (f : E ‚Üí F) :=
‚àÄ x, strict_differentiable_at ùïú f x

variables {ùïú}

lemma strict_differentiable_at.differentiable_at {f : E ‚Üí F} {x : E}
  (h : strict_differentiable_at ùïú f x) : differentiable_at ùïú f x :=
exists.elim h (Œª œÜ hœÜ, ‚ü®œÜ, hœÜ.has_fderiv_at‚ü©)

-- PR to linear_algebra.prod
@[simp]
lemma linear_map.coprod_comp_inl_inr {R : Type*} {M : Type*} {M‚ÇÇ : Type*} {M‚ÇÉ : Type*} [semiring R]
  [add_comm_monoid M] [add_comm_monoid M‚ÇÇ] [add_comm_monoid M‚ÇÉ] [module R M]
  [module R M‚ÇÇ] [module R M‚ÇÉ] (f : M √ó M‚ÇÇ ‚Üí‚Çó[R] M‚ÇÉ) :
  (f.comp (linear_map.inl R M M‚ÇÇ)).coprod (f.comp (linear_map.inr R M M‚ÇÇ)) = f :=
by rw [‚Üê linear_map.comp_coprod, linear_map.coprod_inl_inr, linear_map.comp_id]

-- PR to topology.algebra.module.basic
@[simp]
lemma continuous_linear_map.coprod_comp_inl_inr {R‚ÇÅ : Type*} [semiring R‚ÇÅ] {M‚ÇÅ : Type*} [topological_space M‚ÇÅ]
  [add_comm_monoid M‚ÇÅ] {M‚ÇÇ : Type*} [topological_space M‚ÇÇ] [add_comm_monoid M‚ÇÇ]
  {M‚ÇÉ : Type*} [topological_space M‚ÇÉ] [add_comm_monoid M‚ÇÉ] [module R‚ÇÅ M‚ÇÅ]
  [module R‚ÇÅ M‚ÇÇ] [module R‚ÇÅ M‚ÇÉ] [has_continuous_add M‚ÇÉ] (f : M‚ÇÅ √ó M‚ÇÇ ‚ÜíL[R‚ÇÅ] M‚ÇÉ) :
  (f.comp (continuous_linear_map.inl R‚ÇÅ M‚ÇÅ M‚ÇÇ)).coprod (f.comp (continuous_linear_map.inr R‚ÇÅ M‚ÇÅ M‚ÇÇ)) = f :=
continuous_linear_map.coe_injective (f : M‚ÇÅ √ó M‚ÇÇ ‚Üí‚Çó[R‚ÇÅ] M‚ÇÉ).coprod_comp_inl_inr

lemma differentiable_at.has_fderiv_at_coprod_partial {f : E ‚Üí F ‚Üí G} {x : E} {y : F}
  (hf : differentiable_at ùïú (uncurry f) (x, y)) :
  has_fderiv_at (uncurry f)
                ((partial_fderiv_fst ùïú f x y).coprod (partial_fderiv_snd ùïú f x y)) (x, y) :=
begin
  rcases hf with ‚ü®Œ∏, hŒ∏‚ü©,
  rwa [fderiv_partial_fst hŒ∏, fderiv_partial_snd hŒ∏, Œ∏.coprod_comp_inl_inr]
end

lemma differentiable_at.has_fderiv_at_coprod {f : E ‚Üí F ‚Üí G} {x : E} {y : F}
  (hf : differentiable_at ùïú (uncurry f) (x, y)) {œÜ : E ‚ÜíL[ùïú] G} {œà : F ‚ÜíL[ùïú] G}
  (hœÜ : has_fderiv_at (Œª p, f p y) œÜ x) (hœà : has_fderiv_at (f x) œà y) :
  has_fderiv_at (uncurry f) (œÜ.coprod œà) (x, y) :=
begin
  rw [hœÜ.unique hf.has_fderiv_at_partial_fst, hœà.unique hf.has_fderiv_at_partial_snd],
  exact hf.has_fderiv_at_coprod_partial
end

variables [complete_space E]

lemma homeomorph.cont_diff_at_symm (f : homeomorph E F) {f‚ÇÄ' : E ‚âÉL[ùïú] F} {a : F}
  (hf' : has_fderiv_at f (f‚ÇÄ' : E ‚ÜíL[ùïú] F) (f.symm a)) (hf : cont_diff_at ùïú n f (f.symm a)) :
  cont_diff_at ùïú n (f.symm) a :=
f.to_local_homeomorph.cont_diff_at_symm trivial hf' hf

lemma equiv.continuous_symm_of_cont_diff (œÜ : E ‚âÉ F) {DœÜ : E ‚Üí E ‚âÉL[ùïú] F}
  (hœÜ : ‚àÄ x, has_strict_fderiv_at œÜ (DœÜ x : E ‚ÜíL[ùïú] F) x) :
  continuous œÜ.symm :=
begin
  rw continuous_iff_continuous_at,
  intros x,
  let y := œÜ.symm x,
  let g := (hœÜ y).local_inverse œÜ (DœÜ y) y,
  rw ‚Üê œÜ.apply_symm_apply x,
  have ev_eq : g =·∂†[ùìù (œÜ y)] œÜ.symm,
  { apply (hœÜ y).eventually_right_inverse.mono,
    rintros x (hx : œÜ (g x) = x),
    exact (equiv.eq_symm_apply œÜ).mpr hx },
  apply continuous_at.congr _ ev_eq,
  apply (hœÜ y).local_inverse_continuous_at
end

def equiv.to_homeomorph_of_cont_diff (œÜ : E ‚âÉ F) {DœÜ : E ‚Üí E ‚âÉL[ùïú] F}
  (hœÜ : ‚àÄ x, has_strict_fderiv_at œÜ (DœÜ x : E ‚ÜíL[ùïú] F) x) : E ‚âÉ‚Çú F :=
{ continuous_to_fun := differentiable.continuous (Œª x, (hœÜ x).differentiable_at),
  continuous_inv_fun := œÜ.continuous_symm_of_cont_diff hœÜ,
  ..œÜ}

end

section
variables {ùïú : Type*} [is_R_or_C ùïú]
  {E : Type*} [normed_group E] [normed_space ùïú E]
  {F : Type*} [normed_group F] [normed_space ùïú F]
  {G : Type*} [normed_group G] [normed_space ùïú G]
  {n : with_top ‚Ñï}


local notation `‚àÇ‚ÇÅ` := partial_fderiv_fst ùïú
local notation `‚àÇ‚ÇÇ` := partial_fderiv_snd ùïú

lemma cont_diff_parametric_symm [complete_space E] [complete_space F]
  {f : E ‚Üí F ‚âÉ G} {f' : E ‚Üí F ‚Üí F ‚âÉL[ùïú] G}
  (hf : cont_diff ùïú ‚ä§ (Œª p : E √ó F, f p.1 p.2))
  (hf' : ‚àÄ x y, ‚àÇ‚ÇÇ (Œª x y, f x y) x y = f' x y) :
  cont_diff ùïú ‚ä§ (Œª p : E √ó G, (f p.1).symm p.2) :=
begin
  let œÜ‚ÇÄ : (E √ó F) ‚âÉ (E √ó G) :=
  { to_fun := Œª p : E √ó F, (p.1, f p.1 p.2),
    inv_fun := Œª p : E √ó G, (p.1, (f p.1).symm p.2),
    left_inv := Œª x, by simp,
    right_inv := Œª x, by simp },
  let ff := Œª x y, f x y,
  have hff : cont_diff ùïú ‚ä§ (uncurry ff) := hf,
  let d‚ÇÅf := ‚àÇ‚ÇÅ ff,
  let DœÜ : E √ó F ‚Üí (E √ó F) ‚âÉL[ùïú] E √ó G :=
    Œª x, (continuous_linear_equiv.refl ùïú E).lower_triangular (d‚ÇÅf x.1 x.2) (f' x.1 x.2),
  let DœÜ' : E √ó F ‚Üí (E √ó F) ‚ÜíL[ùïú] E √ó G := Œª x, DœÜ x,
  have hderiv : ‚àÄ (x : E √ó F), has_strict_fderiv_at œÜ‚ÇÄ (DœÜ' x) x,
  { rintros p,
    apply has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at,
    { apply filter.eventually_of_forall,
      rintros ‚ü®x, y‚ü©,
      apply has_fderiv_at.prod,
      { simp only [continuous_linear_equiv.coe_refl, continuous_linear_map.id_comp,
        has_fderiv_at_fst] },
      have diff : differentiable ùïú (uncurry $ Œª x y, f x y) := hf.differentiable le_top,
      rw show (Œª (x : E √ó F), (f x.fst) x.snd) = uncurry (Œª x y, f x y), by { ext, refl },
      apply differentiable_at.has_fderiv_at_coprod,
      { apply (hf.differentiable le_top) },
      { dsimp [d‚ÇÅf],
        exact diff.differentiable_at.has_fderiv_at_partial_fst },
      { rw ‚Üê hf' x y,
        dsimp,
        exact diff.differentiable_at.has_fderiv_at_partial_snd } },
    { apply continuous.continuous_at,
      apply continuous_linear_equiv.continuous_lower_triangular,
      { exact continuous_const },
      { exact hff.cont_diff_top_partial_fst.continuous },
      { simp_rw ‚Üê hf',
        exact hff.cont_diff_top_partial_snd.continuous } } },
  let œÜ := œÜ‚ÇÄ.to_homeomorph_of_cont_diff hderiv,
  exact cont_diff_snd.comp (œÜ.cont_diff_symm (Œª x, (hderiv x).has_fderiv_at)
    (cont_diff_fst.prod hf)),
end

end

section
variables {E : Type*} [normed_group E] [normed_space ‚Ñù E] [complete_space E]

lemma cont_diff_parametric_symm_of_deriv_pos {f : E ‚Üí ‚Ñù ‚Üí ‚Ñù} (hf : cont_diff ‚Ñù ‚ä§ ‚Üøf)
  (hderiv : ‚àÄ x t, partial_deriv_snd f x t > 0) (hsurj : ‚àÄ x, surjective $ f x) :
  cont_diff ‚Ñù ‚ä§  (Œª p : E √ó ‚Ñù, (strict_mono.order_iso_of_surjective (f p.1)
                                (strict_mono_of_deriv_pos $ hderiv p.1) (hsurj p.1)).symm p.2) :=
begin
  have hmono := Œª x, strict_mono_of_deriv_pos (hderiv x),
  let F := Œª x, (strict_mono.order_iso_of_surjective (f x) (hmono x) $ hsurj x).to_equiv,
  change cont_diff ‚Ñù ‚ä§ (Œª (p : E √ó ‚Ñù), (F p.1).symm p.snd),
  refine cont_diff_parametric_symm hf _,
  exact Œª x t, continuous_linear_equiv.units_equiv_aut ‚Ñù (units.mk0 (deriv (f x) t) $ ne_of_gt (hderiv x t)) ,
  intros x t,
  suffices : partial_fderiv_snd ‚Ñù f x t 1 = partial_deriv_snd f x t,
  { ext v,
    simpa only [rel_iso.coe_fn_to_equiv, continuous_linear_equiv.coe_coe,
      continuous_linear_equiv.units_equiv_aut_apply, units.coe_mk0, one_mul] },
  apply partial_fderiv_snd_one
end

end
