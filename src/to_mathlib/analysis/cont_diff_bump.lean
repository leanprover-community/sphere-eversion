import analysis.calculus.specific_functions
import measure_theory.function.locally_integrable
import measure_theory.integral.interval_integral

noncomputable theory
open metric measure_theory function topological_space set filter
open_locale topological_space

section graph_nhd

variables {X Y : Type*} [metric_space Y] {c : X ‚Üí Y} {Œµ : X ‚Üí ‚Ñù}

/-- is this useful? (currently unused) -/
def graph_nhd (c : X ‚Üí Y) (Œµ : X ‚Üí ‚Ñù) : set (X √ó Y) :=
{x : X √ó Y | dist (c x.1) x.2 < Œµ x.1 }

variables [topological_space X]
lemma is_open_graph_nhd (hc : continuous c) (hŒµ : continuous Œµ) : is_open (graph_nhd c Œµ) :=
sorry

end graph_nhd

-- move to topology.algebra.order.basic
lemma continuous_at.eventually_lt {X Y : Type*} [topological_space X] [topological_space Y]
  [linear_order Y] [order_closed_topology Y] [densely_ordered Y]
  {f g : X ‚Üí Y} {x‚ÇÄ : X} (hf : continuous_at f x‚ÇÄ) (hg : continuous_at g x‚ÇÄ) (hfg : f x‚ÇÄ < g x‚ÇÄ) :
  ‚àÄ·∂† x in ùìù x‚ÇÄ, f x < g x :=
begin
  obtain ‚ü®z, hfz, hzg‚ü© := exists_between hfg,
  filter_upwards [hf.preimage_mem_nhds (Iio_mem_nhds hfz), hg.preimage_mem_nhds (Ioi_mem_nhds hzg)],
  exact Œª x, lt_trans
end

namespace cont_diff_bump_of_inner

variables {ùïú X G E : Type*} [inner_product_space ‚Ñù G]
variables [normed_group E] [normed_space ‚Ñù E]
variables [normed_group X] [normed_space ‚Ñù X]
variables [measurable_space E] [borel_space E] [complete_space E] [second_countable_topology E]
variables {a : G} {n : with_top ‚Ñï}
-- variables [nondiscrete_normed_field ùïú] [normed_group X] [normed_space ùïú E]

/-- A version with `x` explicit -/
lemma nonneg' (œÜ : cont_diff_bump_of_inner a) (x : G) : 0 ‚â§ œÜ x :=
œÜ.nonneg

protected lemma continuous (œÜ : cont_diff_bump_of_inner a) : continuous œÜ :=
cont_diff_zero.mp œÜ.cont_diff

lemma tsupport_eq (œÜ : cont_diff_bump_of_inner a) : tsupport œÜ = closed_ball a œÜ.R :=
by simp_rw [tsupport, œÜ.support_eq, closure_ball _ œÜ.R_pos.ne']

protected lemma has_compact_support [finite_dimensional ‚Ñù G] (œÜ : cont_diff_bump_of_inner a) :
  has_compact_support œÜ :=
by simp_rw [has_compact_support, œÜ.tsupport_eq, is_compact_closed_ball]

protected lemma _root_.cont_diff_at.cont_diff_bump {c g : X ‚Üí G}
  {œÜ : ‚àÄ x, cont_diff_bump_of_inner (c x)} {x : X}
  (hc : cont_diff_at ‚Ñù n c x) (hr : cont_diff_at ‚Ñù n (Œª x, (œÜ x).r) x)
  (hR : cont_diff_at ‚Ñù n (Œª x, (œÜ x).R) x)
  (hg : cont_diff_at ‚Ñù n g x) : cont_diff_at ‚Ñù n (Œª x, œÜ x (g x)) x :=
begin
  rcases eq_or_ne (g x) (c x) with hx|hx,
  { have : (Œª x, œÜ x (g x)) =·∂†[ùìù x] (Œª x, 1),
    { have : dist (g x) (c x) < (œÜ x).r, { simp_rw [hx, dist_self, (œÜ x).r_pos] },
      have := continuous_at.eventually_lt (hg.continuous_at.dist hc.continuous_at) hr.continuous_at
        this,
      exact eventually_of_mem this
        (Œª x hx, (œÜ x).one_of_mem_closed_ball (mem_set_of_eq.mp hx).le) },
    exact cont_diff_at_const.congr_of_eventually_eq this },
  { refine real.smooth_transition.cont_diff_at.comp x _,
    refine ((hR.sub $ hg.dist hc hx).div (hR.sub hr) (sub_pos.mpr (œÜ x).r_lt_R).ne') }
end

lemma _root_.cont_diff.cont_diff_bump {c g : X ‚Üí G} {œÜ : ‚àÄ x, cont_diff_bump_of_inner (c x)}
  (hc : cont_diff ‚Ñù n c) (hr : cont_diff ‚Ñù n (Œª x, (œÜ x).r)) (hR : cont_diff ‚Ñù n (Œª x, (œÜ x).R))
  (hg : cont_diff ‚Ñù n g) : cont_diff ‚Ñù n (Œª x, œÜ x (g x)) :=
by { rw [cont_diff_iff_cont_diff_at] at *, exact Œª x, (hc x).cont_diff_bump (hr x) (hR x) (hg x) }


variables [measurable_space G] {Œº : measure G}

/-- A bump function normed so that `‚à´ x, œÜ.normed Œº x ‚àÇŒº = 1`. -/
protected def normed (œÜ : cont_diff_bump_of_inner a) (Œº : measure G) : G ‚Üí ‚Ñù :=
Œª x, œÜ x / ‚à´ x, œÜ x ‚àÇŒº

lemma nonneg_normed (œÜ : cont_diff_bump_of_inner a) (x : G) : 0 ‚â§ œÜ.normed Œº x :=
div_nonneg œÜ.nonneg $ integral_nonneg œÜ.nonneg'

variables [borel_space G] [finite_dimensional ‚Ñù G] [is_locally_finite_measure Œº]

protected lemma integrable (œÜ : cont_diff_bump_of_inner a) : integrable œÜ Œº :=
œÜ.continuous.integrable_of_has_compact_support œÜ.has_compact_support

variables [Œº .is_open_pos_measure]

lemma integral_pos (œÜ : cont_diff_bump_of_inner a) : 0 < ‚à´ x, œÜ x ‚àÇŒº :=
begin
  refine (integral_pos_iff_support_of_nonneg œÜ.nonneg' œÜ.integrable).mpr _,
  rw [œÜ.support_eq],
  refine is_open_ball.measure_pos _ (nonempty_ball.mpr œÜ.R_pos)
end

lemma integral_normed (œÜ : cont_diff_bump_of_inner a) :
  ‚à´ x, œÜ.normed Œº x ‚àÇŒº = 1 :=
begin
  simp_rw [cont_diff_bump_of_inner.normed, div_eq_mul_inv, mul_comm (œÜ _), ‚Üê smul_eq_mul,
    integral_smul],
  exact inv_mul_cancel (œÜ.integral_pos.ne')
end

lemma support_normed_eq (œÜ : cont_diff_bump_of_inner a) :
  support (œÜ.normed Œº) = metric.ball a œÜ.R :=
by simp_rw [cont_diff_bump_of_inner.normed, support_div, œÜ.support_eq,
  support_const œÜ.integral_pos.ne', inter_univ]

lemma tsupport_normed_eq (œÜ : cont_diff_bump_of_inner a) :
  tsupport (œÜ.normed Œº) = metric.closed_ball a œÜ.R :=
by simp_rw [tsupport, œÜ.support_normed_eq, closure_ball _ œÜ.R_pos.ne']

lemma has_compact_support_normed (œÜ : cont_diff_bump_of_inner a) :
  has_compact_support (œÜ.normed Œº) :=
by simp_rw [has_compact_support, œÜ.tsupport_normed_eq, is_compact_closed_ball]

variable (Œº)
lemma integral_normed_smul (œÜ : cont_diff_bump_of_inner a) (c : E) :
  ‚à´ x, œÜ.normed Œº x ‚Ä¢ c ‚àÇŒº = c :=
by simp_rw [integral_smul_const, œÜ.integral_normed, one_smul]
variable {Œº}

end cont_diff_bump_of_inner
