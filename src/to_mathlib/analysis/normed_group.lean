import analysis.normed.group.basic
import analysis.normed.normed_field

lemma norm_sub_le_add {G : Type*} [normed_group G] (a b c : G) : ‚à•a - b‚à• ‚â§ ‚à•a - c‚à• + ‚à•c - b‚à• :=
by simp [‚Üê dist_eq_norm, ‚Üê dist_eq_norm, ‚Üê dist_eq_norm, dist_triangle]

lemma norm_sub_le_add_of_le {G : Type*} [normed_group G] {a b c : G} {d d' : ‚Ñù}
  (h : ‚à•a - c‚à• ‚â§ d) (h' : ‚à•c - b‚à• ‚â§ d') : ‚à•a - b‚à• ‚â§ d + d' :=
(norm_sub_le_add a b c).trans $ add_le_add h h'

-- note: duplicates of `dist_self_add_right` which are currently PR'd to mathlib
@[simp]
lemma dist_add {G : Type*} [semi_normed_group G] (a b : G) : dist a (a+b) = ‚à•b‚à• :=
by simp [dist_eq_norm]

@[simp]
lemma dist_add' {G : Type*} [semi_normed_group G] (a b : G) : dist (a+b) a = ‚à•b‚à• :=
by simp [dist_eq_norm]

namespace filter

open_locale topological_space

lemma tendsto.of_norm_le {E F : Type*} {l : filter E} [normed_group F]
  {f : E ‚Üí F} {g : E ‚Üí ‚Ñù} (h‚ÇÄ : tendsto g l (ùìù 0)) (h‚ÇÅ : ‚àÄ x, ‚à•f x‚à• ‚â§ g x) :
  tendsto f l (ùìù 0) :=
begin
  -- TODO Please golf me!
  rw tendsto_def at h‚ÇÄ ‚ä¢,
  intros s hs,
  obtain ‚ü®Œµ, hŒµ, hs‚ü© := metric.mem_nhds_iff.mp hs,
  filter_upwards [h‚ÇÄ (metric.ball 0 Œµ) (metric.ball_mem_nhds 0 hŒµ)],
  intros x hx,
  rw [set.mem_preimage, mem_ball_zero_iff, real.norm_of_nonneg
    ((norm_nonneg (f x)).trans (h‚ÇÅ x))] at hx,
  exact hs (mem_ball_zero_iff.mpr (lt_of_le_of_lt (h‚ÇÅ x) hx)),
end

end filter
