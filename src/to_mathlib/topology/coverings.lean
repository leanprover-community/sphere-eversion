import topology.paracompact


open set
open_locale topological_space

-- I think that any open set in a finite dimensional real vector space satisfies the assumptions below.
variables {X : Type*} [topological_space X] [locally_compact_space X] [sigma_compact_space X]
  [t2_space X]

lemma foo {P : set X ‚Üí Prop} (hP : antitone P) (hX : ‚àÄ x : X, ‚àÉ U ‚àà ùìù x, P U) :
‚àÉ (u : ‚Ñï ‚Üí set X) (v : ‚Ñï ‚Üí set X), ‚àÄ n,
  is_compact (u n) ‚àß is_open (v n) ‚àß P (v n) ‚àß
  u n ‚äÜ v n ‚àß locally_finite v ‚àß (‚ãÉ n, u n) = univ :=
begin
  -- We start with stealing the beginning of 
  -- refinement_of_locally_compact_sigma_compact_of_nhds_basis_set
  -- The proof of that lemma should be read to see what are the technical reasons 
  -- alluded to below.
  classical,
  -- For technical reasons we prepend two empty sets to the sequence `compact_exhaustion.choice X`
  set K' : compact_exhaustion X := compact_exhaustion.choice X,
  set K : compact_exhaustion X := K'.shiftr.shiftr,
  set Kdiff := Œª n, K (n + 1) \ interior (K n),
  -- Now we restate some properties of `compact_exhaustion` for `K`/`Kdiff`
  have hKcov : ‚àÄ x, x ‚àà Kdiff (K'.find x + 1),
  { intro x,
    simpa only [K'.find_shiftr]
      using diff_subset_diff_right interior_subset (K'.shiftr.mem_diff_shiftr_find x) },
  have Kdiffc : ‚àÄ n, is_compact (Kdiff n),
    from Œª n, (K.is_compact _).diff is_open_interior,
  have Kdiff_nhds : ‚àÄ n x,  x ‚àà Kdiff (n + 1) ‚Üí (K n)·∂ú ‚àà ùìù (x : X),
  { rintros n x ‚ü®hx, hx'‚ü©,
    exact is_open.mem_nhds (K.is_closed n).is_open_compl 
      (Œª hxKn, hx' $ K.subset_interior_succ _ hxKn) },
  
  /- Let's cleanup assumption hX a bit -/
  obtain ‚ü®V, V_op, V_nhds, hPV‚ü© : 
    ‚àÉ V : X ‚Üí set X, (‚àÄ x, is_open (V x)) ‚àß (‚àÄ x, V x ‚àà ùìù x) ‚àß ‚àÄ x, P (V x),
  { choose V' V'_nhds hPV' using hX,
    exact ‚ü®Œª x, interior (V' x), Œª x, is_open_interior, Œª x, interior_mem_nhds.mpr (V'_nhds x),
           Œª x, hP interior_subset (hPV' x)‚ü© },
  /-
  For every `n`, every `x` in `Kdiff n`, consider `W x ‚à© (K n)·∂ú`. 
  This is an open neighborhood of `x` which doesn't intersect `K n`.
  Because `X` is locally compact, we get a compact neighborhood
  `C x ‚äÜ W x ‚à© (K n)·∂ú`. The interior of all `C x` cover the compact set
  `Kdiff n` so we get a finite subcover indexed by some finite subset of
  `s n ‚äÜ Kdiff n`. Now we need to gather the `C x` for `x ‚àà ‚ãÉ n, s n` to be
  the `u` sequence and the `V x ‚à© (K n)·∂ú` to be the `v` sequence. 
  I don't know how to tell Lean about this gathering, maybe using some 
  encodable/denumerable stuff?

  Then local finiteness should be as in 
  refinement_of_locally_compact_sigma_compact_of_nhds_basis_set
  -/
  
  sorry
end
