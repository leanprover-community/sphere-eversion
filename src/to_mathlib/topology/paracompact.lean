import topology.paracompact
import data.real.basic
import data.nat.interval

import to_mathlib.data.set.basic
import to_mathlib.data.set.finite

open_locale topological_space
open set function

/-- We could generalise and replace `Œπ √ó ‚Ñù` with a dependent family of types but it doesn't seem
worth it. Proof partly based on `refinement_of_locally_compact_sigma_compact_of_nhds_basis_set`. -/
lemma exists_countable_locally_finite_cover
  {Œπ X : Type*} [topological_space X] [t2_space X] [locally_compact_space X] [sigma_compact_space X]
  {c : Œπ ‚Üí X} {B : Œπ ‚Üí ‚Ñù ‚Üí set X} {p : Œπ ‚Üí ‚Ñù ‚Üí Prop}
  (hc : surjective c)
  (hp : ‚àÄ i r, p i r ‚Üí 0 < r)
  (hp' : ‚àÄ i r r', 0 < r ‚Üí r < r' ‚Üí p i r' ‚Üí p i r)
  (hB‚ÇÄ : ‚àÄ i r, p i r ‚Üí is_open (B i r))
  (hB‚ÇÅ : ‚àÄ i r, p i r ‚Üí c i ‚àà B i r)
  (hB‚ÇÇ : ‚àÄ i, (ùìù (c i)).has_basis (p i) (B i)) :
  ‚àÉ (s : set (Œπ √ó ‚Ñù)),
    s.countable ‚àß
    (‚àÄ z ‚àà s, ‚Üøp z) ‚àß
    locally_finite (‚ÜøB ‚àò (coe : s ‚Üí Œπ √ó ‚Ñù)) ‚àß
    (‚ãÉ z ‚àà s, B (z : Œπ √ó ‚Ñù).fst ((z : Œπ √ó ‚Ñù).snd / 2)) = univ :=
begin
  let K' := compact_exhaustion.choice X,
  let K := K'.shiftr.shiftr,
  let C : ‚Ñï ‚Üí set X := Œª n, K (n + 2) \ interior (K (n + 1)),
  let U : ‚Ñï ‚Üí set X := Œª n, interior (K (n + 3)) \ K n,
  have hCU : ‚àÄ n, C n ‚äÜ U n := Œª n x hx,
    ‚ü®K.subset_interior_succ _ hx.1, mt (Œª hx‚ÇÉ, K.subset_interior_succ _ hx‚ÇÉ) hx.2‚ü©,
  have hC : ‚àÄ n, is_compact (C n) := Œª n, (K.is_compact _).diff is_open_interior,
  have hC' : (‚ãÉ n, C n) = univ,
  { refine set.univ_subset_iff.mp (Œª x hx, mem_Union.mpr ‚ü®K'.find x, _‚ü©),
    simpa only [K'.find_shiftr]
      using diff_subset_diff_right interior_subset (K'.shiftr.mem_diff_shiftr_find x), },
  have hU : ‚àÄ n, is_open (U n) := Œª n,
    is_open_interior.sdiff $ is_compact.is_closed $ K.is_compact _,
  have hU' : ‚àÄ n, { m | (U m ‚à© U n).nonempty }.finite := Œª n, by
  { suffices : {m | (U m ‚à© U n).nonempty} ‚äÜ Icc (n-2) (n+2), { exact (finite_Icc _ _).subset this },
    rintros m ‚ü®x, ‚ü®‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, ‚ü®hx‚ÇÉ, hx‚ÇÑ‚ü©‚ü©‚ü©,
    simp only [mem_Icc, tsub_le_iff_right],
    suffices : ‚àÄ {a b : ‚Ñï}, x ‚àâ K a ‚Üí x ‚àà interior (K b.succ) ‚Üí a ‚â§ b,
    { exact ‚ü®this hx‚ÇÑ hx‚ÇÅ, this hx‚ÇÇ hx‚ÇÉ‚ü©, },
    intros a b ha hb,
    by_contra hab,
    replace hab : b + 1 ‚â§ a, { simpa using hab, },
    exact set.nonempty.ne_empty (‚ü®x, interior_subset hb, ha‚ü© : (K b.succ \ K a).nonempty)
        (set.diff_eq_empty.mpr (K.subset hab)), },
  have hU'' : ‚àÄ n x, x ‚àà C n ‚Üí U n ‚àà ùìù x := Œª n x hx,
    mem_nhds_iff.mpr ‚ü®U n, subset.rfl, hU n, hCU n hx‚ü©,
  have : ‚àÄ n (x : C n), ‚àÉ i r, ‚Üëx ‚àà B i (r/2) ‚àß B i r ‚äÜ U n ‚àß p i r,
  { rintros n ‚ü®x, hx‚ü©,
    obtain ‚ü®i, rfl‚ü© := hc x,
    obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (hB‚ÇÇ i).mem_iff.mp (hU'' n _ hx),
    have hr‚ÇÉ : 0 < r := hp i r hr‚ÇÅ,
    exact ‚ü®i, r, hB‚ÇÅ i _ (hp' i (r/2) r (half_pos hr‚ÇÉ) (half_lt_self hr‚ÇÉ) hr‚ÇÅ), hr‚ÇÇ, hr‚ÇÅ‚ü©, },
  choose i r h‚ÇÅ h‚ÇÇ h‚ÇÉ using Œª n, this n,
  have hr : ‚àÄ n (x : C n), 0 < r n x := Œª n x, hp _ _ (h‚ÇÉ n x),
  have hpr : ‚àÄ n (x : C n), p (i n x) (r n x / 2) :=
    Œª n x, hp' (i n x) _ _ (half_pos (hr n x)) (half_lt_self (hr n x)) (h‚ÇÉ n x),
  let V : Œ† n, C n ‚Üí set X := Œª n x, B (i n x) (r n x / 2),
  have hV‚ÇÅ : ‚àÄ n x, is_open (V n x) := Œª n x, hB‚ÇÄ _ _ (hpr n x),
  have hV‚ÇÇ : ‚àÄ n, C n ‚äÜ ‚ãÉ (x : C n), V n x := Œª n x hx, mem_Union.mpr ‚ü®‚ü®x, hx‚ü©, h‚ÇÅ _ _‚ü©,
  choose f hf using Œª n, (hC n).elim_finite_subcover (V n) (hV‚ÇÅ n) (hV‚ÇÇ n),
  classical,
  let s : set (Œπ √ó ‚Ñù) := ‚ãÉ n, (f n).image (pi.prod (i n) (r n)),
  refine ‚ü®s, countable_Union (Œª n, finset.countable_to_set _), Œª z hz, _, Œª x, _,
    set.univ_subset_iff.mp (Œª x hx, _)‚ü©,
  { simp only [pi.prod, mem_Union, finset.coe_image, mem_image, finset.mem_coe, set_coe.exists]
      at hz,
    obtain ‚ü®n, x, hx, -, rfl‚ü© := hz,
    apply h‚ÇÉ, },
  { obtain ‚ü®n, hn‚ü© := Union_eq_univ_iff.mp hC' x,
    refine ‚ü®U n, hU'' n x hn, _‚ü©,
    let P : Œπ √ó ‚Ñù ‚Üí Prop := Œª z, (‚ÜøB (z : Œπ √ó ‚Ñù) ‚à© U n).nonempty,
    rw (set.subsubset_equiv_inter s P).set_finite_iff,
    simp only [s, P, set.Union_inter],
    refine set.finite_Union' (Œª m, set.to_finite _) (hU' n) (Œª m hm, _),
    rw set.eq_empty_iff_forall_not_mem,
    intros z,
    simp only [pi.prod, finset.coe_image, mem_inter_eq, mem_image, finset.mem_coe, set_coe.exists,
      mem_set_of_eq, not_and, bex_imp_distrib, and_imp],
    rintros x hx‚ÇÅ hx‚ÇÇ rfl,
    rw set.not_nonempty_iff_eq_empty,
    have := set.inter_subset_inter_left (U n) (h‚ÇÇ m ‚ü®x, hx‚ÇÅ‚ü©),
    rwa [set.not_nonempty_iff_eq_empty.mp hm, set.subset_empty_iff] at this, },
  { obtain ‚ü®n, hn‚ü© := Union_eq_univ_iff.mp hC' x,
    specialize hf n hn,
    simp only [Union_coe_set, mem_Union, exists_prop] at hf,
    obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ, hy‚ÇÉ‚ü© := hf,
    simp only [pi.prod, mem_Union, finset.mem_coe, finset.mem_image, exists_prop, set_coe.exists,
      Union_exists, exists_and_distrib_right, prod.exists, prod.mk.inj_iff],
    exact ‚ü®i n ‚ü®y, hy‚ÇÅ‚ü©, r n ‚ü®y, hy‚ÇÅ‚ü©, ‚ü®n, y, hy‚ÇÅ, hy‚ÇÇ, rfl, rfl‚ü©, hy‚ÇÉ‚ü©, },
end
