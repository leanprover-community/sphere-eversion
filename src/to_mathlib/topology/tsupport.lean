import analysis.normed_space.basic
import algebra.support

/-
This file should be split between the topology and the analysis folders.
-/

open function set filter
open_locale pointwise topological_space

variables {X Œ± Œ±' Œ≤ Œ≥ Œ¥ M E : Type*}

-- todo: move
lemma iff.not {p q : Prop} (h : p ‚Üî q) : ¬¨ p ‚Üî ¬¨ q :=
not_iff_not.mpr h

-- todo: move
namespace set

variables {s : set Œ±} {x : Œ±}

lemma compl_ne_univ : s·∂ú ‚â† univ ‚Üî s.nonempty :=
compl_univ_iff.not.trans ne_empty_iff_nonempty

lemma not_mem_compl_iff  : x ‚àâ s·∂ú ‚Üî x ‚àà s := not_not

lemma antitone_ball {P : Œ± ‚Üí Prop} : antitone (Œª s : set Œ±, ‚àÄ x ‚àà s, P x) :=
Œª s t hst h x hx, h x $ hst hx

end set
open set

-- todo: move
section

variables [semilattice_sup Œ±]

lemma exists_le_and_iff_exists {P : Œ± ‚Üí Prop} {x‚ÇÄ : Œ±} (hP : monotone P) :
  (‚àÉ x, x‚ÇÄ ‚â§ x ‚àß P x) ‚Üî ‚àÉ x, P x :=
‚ü®Œª h, h.imp $ Œª x h, h.2, Œª ‚ü®x, hx‚ü©, ‚ü®x ‚äî x‚ÇÄ, le_sup_right, hP le_sup_left hx‚ü©‚ü©

lemma bdd_above_def {s : set Œ±} : bdd_above s ‚Üî ‚àÉ x, ‚àÄ y ‚àà s, y ‚â§ x :=
by simp [bdd_above, upper_bounds, set.nonempty]

lemma bdd_above_iff_exists_ge {s : set Œ±} (x‚ÇÄ : Œ±) :
  bdd_above s ‚Üî ‚àÉ x, x‚ÇÄ ‚â§ x ‚àß ‚àÄ y ‚àà s, y ‚â§ x :=
by { rw [bdd_above_def, exists_le_and_iff_exists], exact Œª x x' hxx' h y hy, (h y hy).trans hxx' }

lemma bdd_above.exists_ge {s : set Œ±} (hs : bdd_above s) (x‚ÇÄ : Œ±) : ‚àÉ x, x‚ÇÄ ‚â§ x ‚àß ‚àÄ y ‚àà s, y ‚â§ x :=
(bdd_above_iff_exists_ge x‚ÇÄ).mp hs

end

-- some properties about mul_support
section

variables {s : set Œ±} [has_one M]

@[to_additive] lemma mul_support_disjoint_iff {f : Œ± ‚Üí M} {s : set Œ±} :
  disjoint (mul_support f) s ‚Üî ‚àÄ x ‚àà s, f x = 1 :=
by simp_rw [disjoint_iff_subset_compl_right, mul_support_subset_iff', not_mem_compl_iff]

@[to_additive] lemma disjoint_mul_support_iff {f : Œ± ‚Üí M} {s : set Œ±} :
  disjoint s (mul_support f) ‚Üî ‚àÄ x ‚àà s, f x = 1 :=
by rw [disjoint.comm, mul_support_disjoint_iff]

@[to_additive] lemma mul_support_disjoint_iff_eq_on {f : Œ± ‚Üí M} {s : set Œ±} :
  disjoint (mul_support f) s ‚Üî eq_on f 1 s :=
mul_support_disjoint_iff

@[to_additive] lemma disjoint_mul_support_iff_eq_on {f : Œ± ‚Üí M} {s : set Œ±} :
  disjoint s (mul_support f) ‚Üî eq_on f 1 s :=
disjoint_mul_support_iff

end

-- some properties of compact sets
section
variables [topological_space Œ±] [t2_space Œ±]

@[simp]
lemma exists_compact_superset_iff {s : set Œ±} :
  (‚àÉ K, is_compact K ‚àß s ‚äÜ K) ‚Üî is_compact (closure s) :=
‚ü®Œª ‚ü®K, hK, hsK‚ü©, compact_of_is_closed_subset hK is_closed_closure
  (closure_minimal hsK hK.is_closed),
  Œª h, ‚ü®closure s, h, subset_closure‚ü©‚ü©

end

section semigroup
variables [semigroup Œ±] [topological_space Œ±] [has_continuous_mul Œ±]

@[to_additive]
lemma is_compact.mul {s t : set Œ±} (hs : is_compact s) (ht : is_compact t) : is_compact (s * t) :=
by { rw [‚Üê image_mul_prod], exact (hs.prod ht).image continuous_mul }

end semigroup

section group

variables [group Œ±] [topological_space Œ±] [topological_group Œ±]

@[to_additive]
lemma is_compact.inv {s : set Œ±} (hs : is_compact s) : is_compact (s‚Åª¬π) :=
by { rw [‚Üê image_inv], exact hs.image continuous_inv }

/-- We currently don't have division on sets yet, so the conclusion is not quite what the name
promises. -/
@[to_additive]
lemma is_compact.div {s t : set Œ±} (hs : is_compact s) (ht : is_compact t) : is_compact (s * t‚Åª¬π) :=
hs.mul ht.inv

end group



section one
variables [has_one Œ±]

@[to_additive]
lemma mul_support_empty_iff {f : X ‚Üí Œ±} : mul_support f = ‚àÖ ‚Üî ‚àÄ x, f x = 1 :=
by simp_rw [‚Üê nmem_mul_support, eq_empty_iff_forall_not_mem]

variables [topological_space X]

-- todo: add mul_tsupport -> tsupport to to_additive dictionary

/-- The topological support of a function is the closure of its support, i.e. the closure of the
  set of all elements where the function is not equal to 1. -/
@[to_additive tsupport
/-" The topological support of a function is the closure of its support. i.e. the closure of the
  set of all elements where the function is nonzero. "-/]
def mul_tsupport (f : X ‚Üí Œ±) : set X := closure (mul_support f)

@[to_additive]
lemma subset_mul_tsupport (f : X ‚Üí Œ±) : mul_support f ‚äÜ mul_tsupport f :=
subset_closure

@[to_additive]
lemma is_closed_mul_tsupport (f : X ‚Üí Œ±) : is_closed (mul_tsupport f) :=
is_closed_closure

@[to_additive]
lemma mul_tsupport_empty_iff {f : X ‚Üí Œ±} : mul_tsupport f = ‚àÖ ‚Üî ‚àÄ x, f x = 1 :=
by erw [closure_empty_iff, mul_support_empty_iff]

@[to_additive]
lemma image_eq_zero_of_nmem_mul_tsupport {f : X ‚Üí Œ±} {x : X} (hx : x ‚àâ mul_tsupport f) : f x = 1 :=
mul_support_subset_iff'.mp (subset_mul_tsupport f) x hx

end one

section

variables [topological_space Œ±] [topological_space Œ±']
variables [has_one Œ≤] [has_one Œ≥] [has_one Œ¥]
variables {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} {f‚ÇÇ : Œ± ‚Üí Œ≥} {m : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} {x : Œ±}

@[to_additive]
lemma not_mem_closure_mul_support_iff_eventually_eq : x ‚àâ mul_tsupport f ‚Üî f =·∂†[ùìù x] 1 :=
by simp_rw [mul_tsupport, mem_closure_iff_nhds, not_forall, not_nonempty_iff_eq_empty,
    ‚Üê disjoint_iff_inter_eq_empty, disjoint_mul_support_iff_eq_on, eventually_eq_iff_exists_mem]

/-- A function `f` *has compact multiplicative support* or is *compactly supported* if the closure
of the multiplicative support of `f` is compact. In other words: `f` is equal to `1` outside a
compact set. -/
@[to_additive
/-" A function `f` *has compact support* or is *compactly supported* if the closure of the support
of `f` is compact. In other words: `f` is equal to `0` outside a compact set. "-/]
def has_compact_mul_support (f : Œ± ‚Üí Œ≤) : Prop :=
is_compact (mul_tsupport f)

@[to_additive]
lemma has_compact_mul_support_def :
  has_compact_mul_support f ‚Üî is_compact (closure (mul_support f)) :=
by refl

@[to_additive]
lemma exists_compact_iff_has_compact_mul_support [t2_space Œ±] :
  (‚àÉ K : set Œ±, is_compact K ‚àß ‚àÄ x ‚àâ K, f x = 1) ‚Üî has_compact_mul_support f :=
by simp_rw [‚Üê nmem_mul_support, ‚Üê mem_compl_iff, ‚Üê subset_def, compl_subset_compl,
    has_compact_mul_support_def, exists_compact_superset_iff]

@[to_additive]
lemma has_compact_mul_support.intro [t2_space Œ±] {K : set Œ±}
  (hK : is_compact K) (hfK : ‚àÄ x ‚àâ K, f x = 1) : has_compact_mul_support f :=
exists_compact_iff_has_compact_mul_support.mp ‚ü®K, hK, hfK‚ü©

@[to_additive]
lemma has_compact_mul_support.is_compact (hf : has_compact_mul_support f) :
  is_compact (mul_tsupport f) :=
hf

@[to_additive]
lemma has_compact_mul_support.mono' {f' : Œ± ‚Üí Œ≥} (hf : has_compact_mul_support f)
  (hff' : mul_support f' ‚äÜ mul_tsupport f) : has_compact_mul_support f' :=
compact_of_is_closed_subset hf is_closed_closure $ closure_minimal hff' is_closed_closure

@[to_additive]
lemma has_compact_mul_support.mono {f' : Œ± ‚Üí Œ≥} (hf : has_compact_mul_support f)
  (hff' : mul_support f' ‚äÜ mul_support f) : has_compact_mul_support f' :=
hf.mono' $ hff'.trans subset_closure

@[to_additive]
lemma has_compact_mul_support.comp_left (hf : has_compact_mul_support f) (hg : g 1 = 1) :
  has_compact_mul_support (g ‚àò f) :=
hf.mono $ mul_support_comp_subset hg f

@[to_additive]
lemma has_compact_mul_support_comp_left (hg : ‚àÄ {x}, g x = 1 ‚Üî x = 1) :
  has_compact_mul_support (g ‚àò f) ‚Üî has_compact_mul_support f :=
by simp_rw [has_compact_mul_support_def, mul_support_comp_eq g @hg f]

@[to_additive]
lemma has_compact_mul_support.comp‚ÇÇ_left (hf : has_compact_mul_support f)
  (hf‚ÇÇ : has_compact_mul_support f‚ÇÇ) (hm : m 1 1 = 1) :
  has_compact_mul_support (Œª x, m (f x) (f‚ÇÇ x)) :=
begin
  refine compact_of_is_closed_subset (hf.union hf‚ÇÇ) is_closed_closure _,
  refine closure_minimal (Œª x h2x, _) (is_closed_closure.union is_closed_closure) ,
  refine union_subset_union subset_closure subset_closure _,
  by_contra hx,
  simp_rw [mem_union, not_or_distrib, nmem_mul_support] at hx,
  apply h2x,
  simp_rw [hx.1, hx.2, hm]
end

@[to_additive]
lemma has_compact_mul_support.comp_homeomorph (hf : has_compact_mul_support f) (œÜ : Œ±' ‚âÉ‚Çú Œ±) :
  has_compact_mul_support (f ‚àò œÜ) :=
begin
  rw [has_compact_mul_support_def, mul_support_comp_eq_preimage, ‚Üê œÜ.preimage_closure],
  exact œÜ.compact_preimage.mpr hf
end

end

section monoid

variables [topological_space Œ±] [monoid Œ≤]
variables {f f' : Œ± ‚Üí Œ≤} {x : Œ±}


@[to_additive]
lemma has_compact_mul_support.mul (hf : has_compact_mul_support f)
  (hf' : has_compact_mul_support f') : has_compact_mul_support (f * f') :=
by apply hf.comp‚ÇÇ_left hf' (mul_one 1) -- `by apply` speeds up elaboration

end monoid

section monoid

variables [topological_space Œ±] [monoid_with_zero Œ≤] [add_monoid Œ≥] [distrib_mul_action Œ≤ Œ≥]
variables {f : Œ± ‚Üí Œ≤} {f' : Œ± ‚Üí Œ≥} {x : Œ±}


lemma has_compact_support.smul (hf : has_compact_support f)
  (hf' : has_compact_support f') : has_compact_support (f ‚Ä¢ f') :=
by apply hf.comp‚ÇÇ_left hf' (smul_zero 0) -- `by apply` speeds up elaboration

end monoid

section monoid_with_zero

variables [topological_space Œ±] [mul_zero_class Œ≤]
variables {f f' : Œ± ‚Üí Œ≤} {x : Œ±}

@[to_additive]
lemma has_compact_support.mul (hf : has_compact_support f)
  (hf' : has_compact_support f') : has_compact_support (f * f') :=
by apply hf.comp‚ÇÇ_left hf' (mul_zero 0) -- `by apply` speeds up elaboration

end monoid_with_zero

section

variables [topological_space Œ±] [normed_group Œ≤]
variables {f : Œ± ‚Üí Œ≤} {x : Œ±}

lemma has_compact_support_norm_iff : has_compact_support (Œª x, ‚à• f x ‚à•) ‚Üî has_compact_support f :=
has_compact_support_comp_left $ Œª x, norm_eq_zero

alias has_compact_support_norm_iff ‚Üî _ has_compact_support.norm

end


section order

variables [conditionally_complete_linear_order Œ±] [topological_space Œ±]
  [order_topology Œ±] [topological_space Œ≤]

-- topology.algebra.ordered.compact
/-- The **extreme value theorem**: if a continuous function `f` is larger than a value in its range
away from compact sets, then it has a global minimum. -/
lemma continuous.exists_forall_le' {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (x‚ÇÄ : Œ≤)
  (h : ‚àÄ·∂† x in cocompact Œ≤, f x‚ÇÄ ‚â§ f x) : ‚àÉ (x : Œ≤), ‚àÄ (y : Œ≤), f x ‚â§ f y :=
begin
  obtain ‚ü®K : set Œ≤, hK : is_compact K, hKf : ‚àÄ x ‚àâ K, f x‚ÇÄ ‚â§ f x‚ü© :=
  (has_basis_cocompact.eventually_iff).mp h,
  obtain ‚ü®x, -, hx‚ü© : ‚àÉ x ‚àà insert x‚ÇÄ K, ‚àÄ y ‚àà insert x‚ÇÄ K, f x ‚â§ f y :=
  (hK.insert x‚ÇÄ).exists_forall_le (nonempty_insert _ _) hf.continuous_on,
  refine ‚ü®x, Œª y, _‚ü©,
  by_cases hy : y ‚àà K,
  exacts [hx y (or.inr hy), (hx _ (or.inl rfl)).trans (hKf y hy)]
end

-- better proof
lemma continuous.exists_forall_le'' [nonempty Œ≤] {f : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hlim : tendsto f (cocompact Œ≤) at_top) :
  ‚àÉ x, ‚àÄ y, f x ‚â§ f y :=
by { inhabit Œ≤, exact hf.exists_forall_le' default (hlim.eventually $ eventually_ge_at_top _) }

@[to_additive]
lemma continuous.exists_forall_le_of_has_compact_mul_support [nonempty Œ≤] [has_one Œ±]
  {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (h : has_compact_mul_support f) :
  ‚àÉ (x : Œ≤), ‚àÄ (y : Œ≤), f x ‚â§ f y :=
begin
  -- we use `continuous.exists_forall_le'` with as `x‚ÇÄ` any element outside the support of `f`,
  -- if such an element exists (and otherwise an arbitrary element).
  refine hf.exists_forall_le' (classical.epsilon $ Œª x, f x = 1)
    (eventually_of_mem h.compl_mem_cocompact $ Œª x hx, _),
  have : f x = 1 := nmem_mul_support.mp (mt (Œª h2x, subset_closure h2x) hx),
  exact ((classical.epsilon_spec ‚ü®x, this‚ü©).trans this.symm).le
end

@[to_additive]
lemma continuous.exists_forall_ge_of_has_compact_mul_support [nonempty Œ≤] [has_one Œ±]
  {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (h : has_compact_mul_support f) :
  ‚àÉ (x : Œ≤), ‚àÄ (y : Œ≤), f y ‚â§ f x :=
@continuous.exists_forall_le_of_has_compact_mul_support (order_dual Œ±) _ _ _ _ _ _ _ _ hf h

@[to_additive]
lemma continuous.bdd_below_range_of_has_compact_mul_support [has_one Œ±]
  {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (h : has_compact_mul_support f) :
  bdd_below (range f) :=
begin
  casesI is_empty_or_nonempty Œ≤ with hŒ≤ hŒ≤,
  { rw range_eq_empty_iff.mpr, exact bdd_below_empty, exact hŒ≤ },
  obtain ‚ü®x, hx‚ü© := hf.exists_forall_le_of_has_compact_mul_support h,
  refine ‚ü®f x, _‚ü©, rintro _ ‚ü®x', rfl‚ü©, exact hx x'
end

@[to_additive]
lemma continuous.bdd_above_range_of_has_compact_mul_support [has_one Œ±]
  {f : Œ≤ ‚Üí Œ±} (hf : continuous f) (h : has_compact_mul_support f) :
  bdd_above (range f) :=
@continuous.bdd_below_range_of_has_compact_mul_support (order_dual Œ±) _ _ _ _ _ _ _ hf h

lemma is_compact.bdd_below_image {f : Œ≤ ‚Üí Œ±} {K : set Œ≤}
  (hK : is_compact K) (hf : continuous_on f K) : bdd_below (f '' K) :=
begin
  rcases eq_empty_or_nonempty K with rfl|h, { rw [image_empty], exact bdd_below_empty },
  obtain ‚ü®c, -, hc‚ü© := hK.exists_forall_le h hf,
  refine ‚ü®f c, _‚ü©, rintro _ ‚ü®x, hx, rfl‚ü©, exact hc x hx
end

lemma is_compact.bdd_above_image {f : Œ≤ ‚Üí Œ±} {K : set Œ≤}
  (hK : is_compact K) (hf : continuous_on f K) : bdd_above (f '' K) :=
@is_compact.bdd_below_image (order_dual Œ±) _ _ _ _ _ _ _ hK hf


variables [topological_space X] [normed_group E]

lemma continuous.bounded_above_of_compact_support {f : X ‚Üí E} (hf : continuous f)
  (hsupp : has_compact_support f) : ‚àÉ C, ‚àÄ x, ‚à•f x‚à• ‚â§ C :=
by simpa [bdd_above_def] using hf.norm.bdd_above_range_of_has_compact_support hsupp.norm

end order
