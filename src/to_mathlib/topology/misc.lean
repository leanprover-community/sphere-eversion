import topology.path_connected
import topology.urysohns_lemma
import topology.uniform_space.compact_separated
import linear_algebra.affine_space.independent
import analysis.normed_space.finite_dimension
import topology.algebra.order.floor
import topology.shrinking_lemma
import topology.metric_space.emetric_paracompact
import analysis.convex.topology
import to_mathlib.misc

noncomputable theory

open set function filter topological_space
open_locale unit_interval topological_space uniformity filter classical

section to_specific_limits

lemma tendsto_self_div_add_at_top_nhds_1_nat :
  tendsto (Œª n : ‚Ñï, (n : ‚Ñù) / (n + 1)) at_top (ùìù 1) :=
begin
  suffices : tendsto (Œª n : ‚Ñï, (1 : ‚Ñù) - 1 / (n + 1)) at_top (ùìù (1 - 0)),
  { have hn : ‚àÄ n : ‚Ñï, (n : ‚Ñù) + 1 ‚â† 0 := Œª n, n.cast_add_one_pos.ne',
    simp_rw [one_sub_div (hn _), add_sub_cancel, sub_zero] at this, exact this },
  exact tendsto_const_nhds.sub tendsto_one_div_add_at_top_nhds_0_nat
end


end to_specific_limits

section

variables {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]

instance [sigma_compact_space Œ±] [sigma_compact_space Œ≤] : sigma_compact_space (Œ± √ó Œ≤) :=
begin
  refine ‚ü®‚ü®Œª n, compact_covering Œ± n.unpair.1 √óÀ¢ compact_covering Œ≤ n.unpair.2, Œª n,
    (is_compact_compact_covering _ _).prod (is_compact_compact_covering _ _), _‚ü©‚ü©,
  simp_rw [set.Union_unpair (Œª n m, compact_covering Œ± n √óÀ¢ compact_covering Œ≤ m), ‚Üê prod_Union,
    ‚Üê Union_prod_const, Union_compact_covering, univ_prod_univ]
end

end

section

lemma support_norm {Œ± E : Type*} [normed_add_comm_group E] (f : Œ± ‚Üí E) : support (Œª a, ‚à•f a‚à•) = support f :=
function.support_comp_eq norm (Œª x, norm_eq_zero) f

@[to_additive]
lemma has_compact_mul_support_of_subset {Œ± Œ≤ : Type*} [topological_space Œ±] [t2_space Œ±]
  [has_one Œ≤] {f : Œ± ‚Üí Œ≤} {K : set Œ±} (hK : is_compact K) (hf : mul_support f ‚äÜ K) :
  has_compact_mul_support f :=
compact_of_is_closed_subset hK (is_closed_mul_tsupport f) (closure_minimal hf hK.is_closed)

lemma periodic_const {Œ± Œ≤ : Type*} [has_add Œ±] {a : Œ±} {b : Œ≤} : periodic (Œª x, b) a :=
Œª x, rfl

lemma real.ball_zero_eq (r : ‚Ñù) : metric.ball (0 : ‚Ñù) r = Ioo (-r) r :=
by { ext x, simp [real.norm_eq_abs, abs_lt] }

end

section
/-! ## The standard ‚Ñ§ action on ‚Ñù is properly discontinuous

TODO: use that in to_mathlib.topology.periodic?
-/
instance : has_vadd ‚Ñ§ ‚Ñù := ‚ü®Œª n x, (n : ‚Ñù) + x‚ü©

instance : properly_discontinuous_vadd ‚Ñ§ ‚Ñù :=
‚ü®begin
  intros K L hK hL,
  rcases eq_empty_or_nonempty K with rfl | hK' ; rcases eq_empty_or_nonempty L with rfl | hL' ;
  try { simp },
  have hSK:= (hK.is_lub_Sup hK').1,
  have hIK:= (hK.is_glb_Inf hK').1,
  have hSL:= (hL.is_lub_Sup hL').1,
  have hIL:= (hL.is_glb_Inf hL').1,
  apply (finite_Icc ‚åàInf L - Sup K‚åâ ‚åäSup L - Inf K‚åã).subset,
  rintros n (hn : has_vadd.vadd n '' K ‚à© L ‚â† ‚àÖ),
  rcases ne_empty_iff_nonempty.mp hn with ‚ü®l, ‚ü®k, hk, rfl‚ü©, hnk : (n : ‚Ñù) + k ‚àà L‚ü©,
  split,
  { rw int.ceil_le,
    linarith [hIL hnk, hSK hk] },
  { rw int.le_floor,
    linarith [hSL hnk, hIK hk] }
end‚ü©

end

section fract

open int
/- properties of the (dis)continuity of `int.fract` on `‚Ñù`.
To be PRed to topology.algebra.floor_ring
-/

lemma floor_eq_self_iff {x : ‚Ñù} : (‚åäx‚åã : ‚Ñù) = x ‚Üî ‚àÉ n : ‚Ñ§, x = n :=
begin
  split,
  { intro h,
    exact ‚ü®‚åäx‚åã, h.symm‚ü© },
  { rintros ‚ü®n, rfl‚ü©,
    rw floor_int_cast }
end

lemma fract_eq_zero_iff {x : ‚Ñù} : fract x = 0 ‚Üî ‚àÉ n : ‚Ñ§, x = n :=
by rw [fract, sub_eq_zero, eq_comm, floor_eq_self_iff]

lemma fract_ne_zero_iff {x : ‚Ñù} : fract x ‚â† 0 ‚Üî ‚àÄ n : ‚Ñ§, x ‚â† n :=
by rw [‚Üê not_exists, not_iff_not, fract_eq_zero_iff]

lemma Ioo_floor_mem_nhds {x : ‚Ñù} (h : ‚àÄ (n : ‚Ñ§), x ‚â† n) : Ioo (‚åäx‚åã : ‚Ñù) (‚åäx‚åã + 1 : ‚Ñù) ‚àà ùìù x :=
Ioo_mem_nhds ((floor_le x).eq_or_lt.elim (Œª H, (h ‚åäx‚åã H.symm).elim) id) (lt_floor_add_one x)

lemma loc_constant_floor {x : ‚Ñù} (h : ‚àÄ (n : ‚Ñ§), x ‚â† n) : floor =·∂†[ùìù x] (Œª x', ‚åäx‚åã) :=
begin
  filter_upwards [Ioo_floor_mem_nhds h],
  intros y hy,
  rw floor_eq_on_Ico,
  exact mem_Ico_of_Ioo hy
end

lemma fract_eventually_eq {x : ‚Ñù}
  (h : fract x ‚â† 0) : fract =·∂†[ùìù x] (Œª x', x' - floor x) :=
begin
  rw fract_ne_zero_iff at h,
  exact eventually_eq.rfl.sub ((loc_constant_floor h).fun_comp _)
end

-- todo: make iff
lemma continuous_at_fract {x : ‚Ñù} (h : fract x ‚â† 0) : continuous_at fract x :=
(continuous_at_id.sub continuous_at_const).congr (fract_eventually_eq h).symm

lemma Ioo_inter_Iio {Œ± : Type*} [linear_order Œ±] {a b c : Œ±} : Ioo a b ‚à© Iio c = Ioo a (min b c) :=
by { ext, simp [and_assoc] }

lemma fract_lt {x y : ‚Ñù} {n : ‚Ñ§} (h1 : (n : ‚Ñù) ‚â§ x) (h2 : x < n + y) : fract x < y :=
begin
  cases le_total y 1 with hy hy,
  { rw [‚Üê fract_sub_int x n, fract_eq_self.mpr],
    linarith,
    split; linarith },
  { exact (fract_lt_one x).trans_le hy }
end

lemma one_sub_lt_fract {x y : ‚Ñù} {n : ‚Ñ§} (hy : y ‚â§ 1) (h1 : (n : ‚Ñù) - y < x) (h2 : x < n) :
  1 - y < fract x :=
begin
  have I‚ÇÅ : 1 - y < x - (n-1), by linarith,
  have I‚ÇÇ : x - (n-1) < 1, by linarith,
  norm_cast at I‚ÇÅ I‚ÇÇ,
  rw [‚Üê fract_sub_int x (n-1), fract_eq_self.mpr],
  exact I‚ÇÅ,
  split; linarith,
end

lemma is_open.preimage_fract' {s : set ‚Ñù} (hs : is_open s)
  (h2s : 0 ‚àà s ‚Üí s ‚àà ùìù[<] (1 : ‚Ñù)) : is_open (fract ‚Åª¬π' s) :=
begin
  rw is_open_iff_mem_nhds,
  rintros x (hx : fract x ‚àà s),
  rcases eq_or_ne (fract x)  0 with hx' | hx',
  { have H : (0 : ‚Ñù) ‚àà s, by rwa hx' at hx,
    specialize h2s H,
    rcases fract_eq_zero_iff.mp hx' with ‚ü®n, rfl‚ü©, clear hx hx',
    have s_mem_0 := hs.mem_nhds H,
    rcases (nhds_basis_zero_abs_sub_lt ‚Ñù).mem_iff.mp s_mem_0 with ‚ü®Œ¥, Œ¥_pos, hŒ¥‚ü©,
    rcases (nhds_within_has_basis (nhds_basis_Ioo_pos (1 : ‚Ñù)) _).mem_iff.mp h2s with ‚ü®Œµ, Œµ_pos, hŒµ‚ü©,
    rw [Ioo_inter_Iio, min_eq_right (le_add_of_nonneg_right Œµ_pos.le)] at hŒµ,
    set Œµ' := min Œµ (1/2),
    have Œµ'_pos : 0 < Œµ',
      from lt_min Œµ_pos (by norm_num : (0 : ‚Ñù) < 1/2),
    have hŒµ' : Ioo (1 - Œµ') 1 ‚äÜ s,
    { apply subset.trans _ hŒµ,
      apply Ioo_subset_Ioo_left,
      linarith [min_le_left Œµ (1/2)] },
    have mem : Ioo ((n : ‚Ñù)-Œµ') (n+Œ¥) ‚àà ùìù (n : ‚Ñù),
    { apply Ioo_mem_nhds ; linarith },
    apply mem_of_superset mem,
    rintros x ‚ü®hx, hx'‚ü©,
    cases le_or_gt (n : ‚Ñù) x with hx'' hx'',
    { apply hŒ¥,
      rw [mem_set_of_eq, abs_eq_self.mpr (fract_nonneg x)],
      exact fract_lt hx'' hx' },
    { apply hŒµ',
      split,
      { refine one_sub_lt_fract (by linarith [min_le_right Œµ (1/2)]) (by linarith) hx'' },
      { exact fract_lt_one x }, } },
  { rw fract_ne_zero_iff at hx',
    have H : Ico (‚åäx‚åã : ‚Ñù) (‚åäx‚åã + 1) ‚àà ùìù x,
      from mem_of_superset (Ioo_floor_mem_nhds hx') Ioo_subset_Ico_self,
    exact (continuous_on_fract ‚åäx‚åã).continuous_at H (hs.mem_nhds hx) },
end

lemma is_open.preimage_fract {s : set ‚Ñù} (hs : is_open s)
  (h2s : (0 : ‚Ñù) ‚àà s ‚Üí (1 : ‚Ñù) ‚àà s) : is_open (fract ‚Åª¬π' s) :=
hs.preimage_fract' $ Œª h, nhds_within_le_nhds $ hs.mem_nhds (h2s h)

-- is `s·∂ú ‚àâ ùìù[<] (1 : ‚Ñù)` equivalent to something like `cluster_pt (ùìù[Iio (1 : ‚Ñù) ‚à© s] (1 : ‚Ñù)` ?
lemma is_closed.preimage_fract {s : set ‚Ñù} (hs : is_closed s)
  (h2s : s·∂ú ‚àâ ùìù[<] (1 : ‚Ñù) ‚Üí (0 : ‚Ñù) ‚àà s) : is_closed (fract ‚Åª¬π' s) :=
is_open_compl_iff.mp $ hs.is_open_compl.preimage_fract' $ Œª h, by_contra $ Œª h', h $ h2s h'

lemma fract_preimage_mem_nhds {s : set ‚Ñù} {x : ‚Ñù} (h1 : s ‚àà ùìù (fract x))
  (h2 : fract x = 0 ‚Üí s ‚àà ùìù (1 : ‚Ñù)) : fract ‚Åª¬π' s ‚àà ùìù x :=
begin
  by_cases hx : fract x = 0,
  { obtain ‚ü®u, hus, hu, hxu‚ü© := mem_nhds_iff.mp h1,
    obtain ‚ü®v, hvs, hv, h1v‚ü© := mem_nhds_iff.mp (h2 hx),
    rw [mem_nhds_iff],
    refine ‚ü®fract ‚Åª¬π' (u ‚à™ v), preimage_mono (union_subset hus hvs),
      (hu.union hv).preimage_fract (Œª _, subset_union_right _ _ h1v), subset_union_left _ _ hxu‚ü© },
  { exact (continuous_at_fract hx).preimage_mem_nhds h1 }
end

end fract

section
-- to normed_space
variables {E F : Type*} [normed_add_comm_group E] [normed_add_comm_group F]
variables [normed_space ‚Ñù E] [normed_space ‚Ñù F]

lemma dist_smul_add_one_sub_smul_le {r : ‚Ñù} {x y : E} (h : r ‚àà unit_interval) :
  dist (r ‚Ä¢ x + (1 - r) ‚Ä¢ y) x ‚â§ dist y x :=
calc
  dist (r ‚Ä¢ x + (1 - r) ‚Ä¢ y) x = ‚à•1 - r‚à• * ‚à•x - y‚à• : by simp_rw [dist_eq_norm', ‚Üê norm_smul,
    sub_smul, one_smul, smul_sub, ‚Üê sub_sub, ‚Üê sub_add, sub_right_comm]
  ... = (1 - r) * dist y x :
    by rw [real.norm_eq_abs, abs_eq_self.mpr (sub_nonneg.mpr h.2), dist_eq_norm']
  ... ‚â§ (1 - 0) * dist y x : mul_le_mul_of_nonneg_right (sub_le_sub_left h.1 _) dist_nonneg
  ... = dist y x : by rw [sub_zero, one_mul]

end

section -- to ???

-- needs classical
variables {Œ± Œ≤ Œ≥ Œ¥ Œπ : Type*} [topological_space Œ±] [topological_space Œ≤] {x : Œ±}

lemma is_open_slice_of_is_open_over {Œ© : set (Œ± √ó Œ≤)} {x‚ÇÄ : Œ±}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© prod.fst ‚Åª¬π' U)) : is_open (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) :=
begin
  rcases hŒ©_op with ‚ü®U, hU, hU_op‚ü©, convert hU_op.preimage (continuous.prod.mk x‚ÇÄ) using 1,
  simp_rw [preimage_inter, preimage_preimage, preimage_const, mem_of_mem_nhds hU, if_pos,
    inter_univ]
end

end

section proj_I

variables {Œ± Œ≤ : Type*} [linear_ordered_semiring Œ±] {x c : Œ±}

def proj_I : Œ± ‚Üí Œ± := Œª x, proj_Icc (0 : Œ±) 1 zero_le_one x

lemma proj_I_def : proj_I x = max 0 (min 1 x) := rfl

lemma proj_Icc_eq_proj_I : (proj_Icc (0 : Œ±) 1 zero_le_one x : Œ±) = proj_I x := rfl

lemma proj_I_of_le_zero (hx : x ‚â§ 0) : proj_I x = 0 :=
congr_arg coe $ proj_Icc_of_le_left _ hx

@[simp] lemma proj_I_zero : proj_I (0 : Œ±) = 0 :=
congr_arg coe $ proj_Icc_left _

lemma proj_I_of_one_le (hx : 1 ‚â§ x) : proj_I x = 1 :=
congr_arg coe $ proj_Icc_of_right_le _ hx

@[simp] lemma proj_I_one : proj_I (1 : Œ±) = 1 :=
congr_arg coe $ proj_Icc_right _

@[simp] lemma proj_I_eq_zero [nontrivial Œ±] : proj_I x = 0 ‚Üî x ‚â§ 0 :=
by { rw [‚Üê proj_Icc_eq_left (@zero_lt_one Œ± _ _), subtype.ext_iff], refl }

@[simp] lemma proj_I_eq_one : proj_I x = 1 ‚Üî 1 ‚â§ x :=
by { rw [‚Üê proj_Icc_eq_right (@zero_lt_one Œ± _ _), subtype.ext_iff], refl }

lemma proj_I_mem_Icc : proj_I x ‚àà Icc (0 : Œ±) 1 :=
(proj_Icc (0 : Œ±) 1 zero_le_one x).prop

lemma proj_I_eq_self : proj_I x = x ‚Üî x ‚àà Icc (0 : Œ±) 1 :=
‚ü®Œª h, h ‚ñ∏ proj_I_mem_Icc, Œª h, congr_arg coe $ proj_Icc_of_mem _ h‚ü©

@[simp] lemma proj_I_proj_I : proj_I (proj_I x) = proj_I x :=
proj_I_eq_self.mpr proj_I_mem_Icc

@[simp] lemma proj_Icc_proj_I :
  proj_Icc (0 : Œ±) 1 zero_le_one (proj_I x) = proj_Icc 0 1 zero_le_one x :=
proj_Icc_of_mem _ proj_I_mem_Icc

@[simp] lemma range_proj_I : range (proj_I) = Icc 0 1 :=
by rw [proj_I, range_comp, range_proj_Icc, image_univ, subtype.range_coe]

lemma monotone_proj_I : monotone (proj_I : Œ± ‚Üí Œ±) :=
monotone_proj_Icc _

lemma strict_mono_on_proj_I : strict_mono_on proj_I (Icc (0 : Œ±) 1) :=
strict_mono_on_proj_Icc _

lemma proj_I_le_max : proj_I x ‚â§ max 0 x :=
max_le_max le_rfl $ min_le_right _ _

lemma min_le_proj_I : min 1 x ‚â§ proj_I x :=
le_max_right _ _

lemma proj_I_le_iff : proj_I x ‚â§ c ‚Üî 0 ‚â§ c ‚àß (1 ‚â§ c ‚à® x ‚â§ c) :=
by simp_rw [proj_I_def, max_le_iff, min_le_iff]

@[simp] lemma proj_I_eq_min : proj_I x = min 1 x ‚Üî 0 ‚â§ x :=
by simp_rw [proj_I_def, max_eq_right_iff, le_min_iff, zero_le_one, true_and]

lemma min_proj_I (h2 : 0 ‚â§ c) : min c (proj_I x) = proj_I (min c x) :=
by { cases le_total c x with h3 h3; simp [h2, h3, proj_I_le_iff, proj_I_eq_min.mpr],
     simp [proj_I_eq_min.mpr, h2.trans h3, min_left_comm c, h3] }

lemma continuous_proj_I [topological_space Œ±] [order_topology Œ±] :
  continuous (proj_I : Œ± ‚Üí Œ±) :=
continuous_proj_Icc.subtype_coe

lemma proj_I_mapsto {Œ± : Type*} [linear_ordered_semiring Œ±] {s : set Œ±} (h0s : (0 : Œ±) ‚àà s)
  (h1s : (1 : Œ±) ‚àà s) : maps_to proj_I s s :=
Œª x hx, (le_total 1 x).elim (Œª h2x, by rwa [proj_I_eq_one.mpr h2x]) $
  Œª h2x, (le_total 0 x).elim (Œª h3x, by rwa [proj_I_eq_self.mpr ‚ü®h3x, h2x‚ü©]) $
  Œª h3x, by rwa [proj_I_eq_zero.mpr h3x]
-- about path.truncate

lemma truncate_proj_I_right {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) (t‚ÇÄ t‚ÇÅ : ‚Ñù) (s : I) :
  Œ≥.truncate t‚ÇÄ (proj_I t‚ÇÅ) s = Œ≥.truncate t‚ÇÄ t‚ÇÅ s :=
begin
  simp_rw [path.truncate, path.coe_mk, path.extend, Icc_extend, function.comp],
  rw [min_proj_I (s.prop.1.trans $ le_max_left _ _), proj_Icc_proj_I],
end

end proj_I

section

open encodable option
variables {Œ± Œ≤ Œ≥ : Type*} [topological_space Œ±] [topological_space Œ≤]
-- can we restate this nicely?

/-- Given a locally finite sequence of sets indexed by an encodable type, we can naturally reindex
  this sequence to get a sequence indexed by `‚Ñï` (by adding some `‚àÖ` values).
  This new sequence is still locally finite. -/
lemma decode‚ÇÇ_locally_finite {Œπ} [encodable Œπ] [topological_space Œ±] {s : Œπ ‚Üí set Œ±}
  (hs : locally_finite s) : locally_finite (Œª i, (s <$> decode‚ÇÇ Œπ i).get_or_else ‚àÖ) :=
begin
  intro x,
  obtain ‚ü®U, hxU, hU‚ü© := hs x,
  refine ‚ü®U, hxU, _‚ü©,
  have : encode ‚Åª¬π' {i : ‚Ñï | ((s <$> decode‚ÇÇ Œπ i).get_or_else ‚àÖ ‚à© U).nonempty} =
     {i : Œπ | (s i ‚à© U).nonempty},
  { simp_rw [preimage_set_of_eq, decode‚ÇÇ_encode, map_some, get_or_else_some] },
  rw [‚Üê this] at hU,
  refine finite_of_finite_preimage hU _,
  intros n hn,
  rw [‚Üê decode‚ÇÇ_ne_none_iff],
  intro h,
  simp_rw [mem_set_of_eq, h, map_none, get_or_else_none, empty_inter] at hn,
  exact (not_nonempty_empty hn).elim
end

open topological_space

variables {X : Type*} [emetric_space X] [locally_compact_space X] [second_countable_topology X]

lemma exists_locally_finite_subcover_of_locally {C : set X} (hC : is_closed C) {P : set X ‚Üí Prop}
  (hP : antitone P) (h0 : P ‚àÖ) (hX : ‚àÄ x ‚àà C, ‚àÉ V ‚àà ùìù (x : X), P V) :
‚àÉ (K : ‚Ñï ‚Üí set X) (W : ‚Ñï ‚Üí set X), (‚àÄ n, is_compact (K n)) ‚àß (‚àÄ n, is_open (W n)) ‚àß
  (‚àÄ n, P (W n)) ‚àß (‚àÄ n, K n ‚äÜ W n) ‚àß locally_finite W ‚àß C ‚äÜ ‚ãÉ n, K n :=
begin
  choose V' hV' hPV' using set_coe.forall'.mp hX,
  choose V hV hVV' hcV using Œª x : C, locally_compact_space.local_compact_nhds ‚Üëx (V' x) (hV' x),
  simp_rw [‚Üê mem_interior_iff_mem_nhds] at hV,
  have : C ‚äÜ (‚ãÉ x : C, interior (V x)) :=
  Œª x hx, by { rw [mem_Union], exact ‚ü®‚ü®x, hx‚ü©, hV _‚ü© },
  obtain ‚ü®s, hs, hsW‚ÇÇ‚ü© := is_open_Union_countable (Œª x, interior (V x)) (Œª x, is_open_interior),
  rw [‚Üê hsW‚ÇÇ, bUnion_eq_Union] at this, clear hsW‚ÇÇ,
  obtain ‚ü®W, hW, hUW, hlW, hWV‚ü© :=
    precise_refinement_set hC (Œª x : s, interior (V x)) (Œª x, is_open_interior) this,
  obtain ‚ü®K, hCK, hK, hKW‚ü© :=
    exists_subset_Union_closed_subset hC (Œª x : s, hW x) (Œª x _, hlW.point_finite x) hUW,
  haveI : encodable s := hs.to_encodable,
  let K' : ‚Ñï ‚Üí set X := Œª n, (K <$> (decode‚ÇÇ s n)).get_or_else ‚àÖ,
  let W' : ‚Ñï ‚Üí set X := Œª n, (W <$> (decode‚ÇÇ s n)).get_or_else ‚àÖ,
  refine ‚ü®K', W', _, _, _, _, _, _‚ü©,
  { intro n, cases h : decode‚ÇÇ s n with i,
    { simp_rw [K', h, map_none, get_or_else_none, is_compact_empty] },
    { simp_rw [K', h, map_some, get_or_else_some],
      exact compact_of_is_closed_subset (hcV i) (hK i)
        ((hKW i).trans $ (hWV i).trans interior_subset) }},
  { intro n, cases h : decode‚ÇÇ s n,
    { simp_rw [W', h, map_none, get_or_else_none, is_open_empty] },
    { simp_rw [W', h, map_some, get_or_else_some, hW] }},
  { intro n, cases h : decode‚ÇÇ s n with i,
    { simp_rw [W', h, map_none, get_or_else_none, h0] },
    { simp_rw [W', h, map_some, get_or_else_some], refine hP _ (hPV' i),
      refine (hWV i).trans (interior_subset.trans $ hVV' i) }},
  { intro n, cases h : decode‚ÇÇ s n,
    { simp_rw [K', W', h, map_none] },
    { simp_rw [K', W', h, map_some, get_or_else_some, hKW] }},
  { exact decode‚ÇÇ_locally_finite hlW },
  { intros x hx, obtain ‚ü®i, hi‚ü© := mem_Union.mp (hCK hx),
    refine mem_Union.mpr ‚ü®encode i, _‚ü©,
    simp_rw [K', decode‚ÇÇ_encode, map_some, get_or_else_some, hi] }
end

end

section -- to subset_properties

variables {Œ± Œ≤ Œ≥ : Type*} [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥]

lemma is_compact.eventually_forall_mem {x‚ÇÄ : Œ±} {K : set Œ≤} (hK : is_compact K)
  {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (hf : continuous ‚Üøf) {U : set Œ≥} (hU : ‚àÄ y ‚àà K, U ‚àà ùìù (f x‚ÇÄ y)) :
  ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ y ‚àà K, f x y ‚àà U :=
hK.eventually_forall_of_forall_eventually $ Œª y hy, hf.continuous_at.eventually $
  show U ‚àà ùìù (‚Üøf (x‚ÇÄ, y)), from hU y hy

end

section -- to separation

variables {Œ± : Type*} [topological_space Œ±]

/-
needs
import linear_algebra.affine_space.independent
import analysis.normed_space.finite_dimension
-/
lemma is_open_affine_independent (ùïú E : Type*) {Œπ : Type*} [nontrivially_normed_field ùïú]
  [normed_add_comm_group E] [normed_space ùïú E] [complete_space ùïú] [fintype Œπ] :
  is_open {p : Œπ ‚Üí E | affine_independent ùïú p} :=
begin
  classical,
  cases is_empty_or_nonempty Œπ, { resetI, exact is_open_discrete _ },
  obtain ‚ü®i‚ÇÄ‚ü© := h,
  simp_rw [affine_independent_iff_linear_independent_vsub ùïú _ i‚ÇÄ],
  let Œπ' := {x // x ‚â† i‚ÇÄ},
  haveI : fintype Œπ' := subtype.fintype _,
  convert_to
    is_open ((Œª (p : Œπ ‚Üí E) (i : Œπ'), p i -·µ• p i‚ÇÄ) ‚Åª¬π' {p : Œπ' ‚Üí E | linear_independent ùïú p}),
  refine is_open.preimage _ is_open_set_of_linear_independent,
  refine continuous_pi (Œª i', continuous.vsub (continuous_apply i') $ continuous_apply i‚ÇÄ),
end

end

section convex

variables {E : Type*} [add_comm_group E] [module ‚Ñù E] [topological_space E]
  [topological_add_group E] [has_continuous_smul ‚Ñù E] {s : set E}

lemma convex.is_preconnected' (hs : convex ‚Ñù s) : is_preconnected s :=
by { rcases s.eq_empty_or_nonempty with rfl|h, exact is_preconnected_empty,
     exact (hs.is_path_connected h).is_connected.is_preconnected }

end convex

section

open metric

lemma continuous.inf_dist {Œ± Œ≤ : Type*} [topological_space Œ±] [pseudo_metric_space Œ≤] {s : set Œ≤}
  {f : Œ± ‚Üí Œ≤} (hf : continuous f) : continuous (Œª x, inf_dist (f x) s) :=
(continuous_inf_dist_pt _).comp hf

end

section normed_space
open metric

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E]

lemma is_preconnected_ball (x : E) (r : ‚Ñù) : is_preconnected (ball x r) :=
(convex_ball x r).is_preconnected'

lemma is_connected_ball {x : E} {r : ‚Ñù} : is_connected (ball x r) ‚Üî 0 < r :=
begin
  rw [‚Üê @nonempty_ball _ _ x],
  refine ‚ü®Œª h, h.nonempty, Œª h, ((convex_ball x r).is_path_connected $ h).is_connected‚ü©
end

-- todo: make metric.mem_nhds_iff protected

end normed_space

section connected_component_in

variables {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]

lemma continuous.image_connected_component_in_subset {f : Œ± ‚Üí Œ≤} {s : set Œ±} {x : Œ±}
  (hf : continuous f) (hx : x ‚àà s) :
  f '' connected_component_in s x ‚äÜ connected_component_in (f '' s) (f x) :=
(is_preconnected_connected_component_in.image _ hf.continuous_on).subset_connected_component_in
  (mem_image_of_mem _ $ mem_connected_component_in hx)
  (image_subset _ $ connected_component_in_subset _ _)

lemma homeomorph.image_connected_component_in (f : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ±} {x : Œ±} (hx : x ‚àà s) :
  f '' connected_component_in s x = connected_component_in (f '' s) (f x) :=
begin
  refine (f.continuous.image_connected_component_in_subset hx).antisymm _,
  have := f.symm.continuous.image_connected_component_in_subset (mem_image_of_mem _ hx),
  rwa [image_subset_iff, f.preimage_symm, f.image_symm, f.preimage_image, f.symm_apply_apply]
    at this,
end


end connected_component_in

namespace topological_space -- to topology.bases
lemma cover_nat_nhds_within {Œ±} [topological_space Œ±] [second_countable_topology Œ±] {f : Œ± ‚Üí set Œ±}
  {s : set Œ±} (hf : ‚àÄ x ‚àà s, f x ‚àà ùìù[s] x) (hs : s.nonempty) :
  ‚àÉ x : ‚Ñï ‚Üí Œ±, range x ‚äÜ s ‚àß s ‚äÜ ‚ãÉ n, f (x n) :=
begin
  obtain ‚ü®t, hts, ht, hsf‚ü© := topological_space.countable_cover_nhds_within hf,
  have hnt : t.nonempty,
  { by_contra,
    rw [not_nonempty_iff_eq_empty] at h,
    rw [h, bUnion_empty, subset_empty_iff] at hsf,
    exact hs.ne_empty hsf },
  obtain ‚ü®x, rfl‚ü© := ht.exists_eq_range hnt,
  rw [bUnion_range] at hsf,
  exact ‚ü®x, hts, hsf‚ü©
end

/-- A version of `topological_space.cover_nat_nhds_within` where `f` is only defined on `s`. -/
lemma cover_nat_nhds_within' {Œ±} [topological_space Œ±] [second_countable_topology Œ±] {s : set Œ±}
  {f : ‚àÄ x ‚àà s, set Œ±} (hf : ‚àÄ x (hx : x ‚àà s), f x hx ‚àà ùìù[s] x) (hs : s.nonempty) :
  ‚àÉ (x : ‚Ñï ‚Üí Œ±) (hx : range x ‚äÜ s), s ‚äÜ ‚ãÉ n, f (x n) (range_subset_iff.mp hx n) :=
begin
  let g := Œª x, if hx : x ‚àà s then f x hx else ‚àÖ,
  have hg : ‚àÄ x ‚àà s, g x ‚àà ùìù[s] x, { intros x hx, simp_rw [g, dif_pos hx], exact hf x hx },
  obtain ‚ü®x, hx, h‚ü© := topological_space.cover_nat_nhds_within hg hs,
  simp_rw [g, dif_pos (range_subset_iff.mp hx _)] at h,
  refine ‚ü®x, hx, h‚ü©,
end

end topological_space

namespace set
namespace subtype
open _root_.subtype
variables {Œ± : Type*}

lemma image_coe_eq_iff_eq_univ {s : set Œ±} {t : set s} : (coe : s ‚Üí Œ±) '' t = s ‚Üî t = univ :=
by { convert coe_injective.image_injective.eq_iff, rw coe_image_univ }

@[simp] lemma preimage_coe_eq_univ {s t : set Œ±} : (coe : s ‚Üí Œ±) ‚Åª¬π' t = univ ‚Üî s ‚äÜ t :=
by rw [‚Üê inter_eq_right_iff_subset, ‚Üê image_preimage_coe, image_coe_eq_iff_eq_univ]

end subtype
end set
open set

section paracompact_space

-- a version of `precise_refinement_set` for open `s`.
/-- When `s : set X` is open and paracompact, we can find a precise refinement on `s`. Note that
 in this case we only get the locally finiteness condition on `s`, which is weaker than the local
 finiteness condition on all of `X` (the collection might not be locally finite on the boundary of
 `s`). -/
theorem precise_refinement_set' {Œπ X : Type*} [topological_space X] {s : set X}
  [paracompact_space s] (hs : is_open s)
  (u : Œπ ‚Üí set X) (uo : ‚àÄ i, is_open (u i)) (us : s ‚äÜ ‚ãÉ i, u i) :
  ‚àÉ (v : Œπ ‚Üí set X), (‚àÄ i, is_open (v i)) ‚àß (s ‚äÜ ‚ãÉ i, v i) ‚àß
  locally_finite (Œª i, (coe : s ‚Üí X) ‚Åª¬π' v i) ‚àß (‚àÄ i, v i ‚äÜ s) ‚àß (‚àÄ i, v i ‚äÜ u i) :=
begin
  obtain ‚ü®v, vo, vs, vl, vu‚ü© := precise_refinement (Œª i, (coe : s ‚Üí X) ‚Åª¬π' u i)
    (Œª i, (uo i).preimage continuous_subtype_coe)
    (by rwa [‚Üê preimage_Union, subtype.preimage_coe_eq_univ]),
  refine ‚ü®Œª i, coe '' v i, Œª i, hs.is_open_map_subtype_coe _ (vo i),
    by rw [‚Üê image_Union, vs, subtype.coe_image_univ],
    by simp_rw [preimage_image_eq _ subtype.coe_injective, vl],
    Œª i, subtype.coe_image_subset _ _,
    by { intro i, rw [image_subset_iff], exact vu i }‚ü©,
end

lemma point_finite_of_locally_finite_coe_preimage {Œπ X : Type*} [topological_space X] {s : set X}
  {f : Œπ ‚Üí set X} (hf : locally_finite (Œª i, (coe : s ‚Üí X) ‚Åª¬π' f i)) (hfs : ‚àÄ i, f i ‚äÜ s) {x : X} :
  {i | x ‚àà f i}.finite :=
begin
  by_cases hx : x ‚àà s,
  { exact hf.point_finite ‚ü®x, hx‚ü© },
  { have : ‚àÄ i, x ‚àâ f i := Œª i hxf, hx (hfs i hxf),
    simp only [this, set_of_false, finite_empty] }
end


end paracompact_space

section shrinking_lemma

variables {Œπ X : Type*} [topological_space X]
variables {u : Œπ ‚Üí set X} {s : set X} [normal_space s]

-- this lemma is currently formulated a little weirdly, since we have a collection of open sets
-- as the input and a collection of closed/compact sets as output.
-- Perhaps we can formulate it so that the input is a collection of compact sets whose interiors
-- cover s.
lemma exists_subset_Union_interior_of_is_open (hs : is_open s) (uo : ‚àÄ i, is_open (u i))
  (uc : ‚àÄ i, is_compact (closure (u i)))
  (us : ‚àÄ i, closure (u i) ‚äÜ s)
  (uf : ‚àÄ x ‚àà s, {i | x ‚àà u i}.finite) (uU : s ‚äÜ ‚ãÉ i, u i) :
  ‚àÉ v : Œπ ‚Üí set X, s ‚äÜ (‚ãÉ i, interior (v i)) ‚àß (‚àÄ i, is_compact (v i)) ‚àß ‚àÄ i, v i ‚äÜ u i :=
begin
  obtain ‚ü®v, vU, vo, hv‚ü© := exists_Union_eq_closure_subset
    (Œª i, (uo i).preimage (continuous_subtype_coe : continuous (coe : s ‚Üí X)))
    (Œª x, uf x x.prop)
    (by simp_rw [‚Üê preimage_Union, subtype.preimage_coe_eq_univ, uU]),
  have : ‚àÄ i, is_compact (closure ((coe : _ ‚Üí X) '' (v i))),
  { intro i, refine compact_of_is_closed_subset (uc i) is_closed_closure _,
    apply closure_mono, rw image_subset_iff, refine subset_closure.trans (hv i) },
  refine ‚ü®Œª i, closure (coe '' (v i)), _, this, _‚ü©,
  { refine subset.trans _ (Union_mono $
      Œª i, interior_maximal subset_closure (hs.is_open_map_subtype_coe _ (vo i))),
    simp_rw [‚Üê image_Union, vU, subtype.coe_image_univ] },
  { intro i,
    have : coe '' v i ‚äÜ u i,
    { rintro _ ‚ü®x, hx, rfl‚ü©, exact hv i (subset_closure hx) },
    intros x hx,
    have hxs : x ‚àà s := us i (closure_mono this hx),
    have : (‚ü®x, hxs‚ü© : s) ‚àà closure (v i),
    { rw embedding_subtype_coe.closure_eq_preimage_closure_image (v i), exact hx },
    exact hv i this }
end

end shrinking_lemma

open_locale filter

lemma filter.eventually_eq.slice {Œ± Œ≤ Œ≥ : Type*} [topological_space Œ±] [topological_space Œ≤]
  {f g : Œ± √ó Œ≤ ‚Üí Œ≥} {a : Œ±} {b : Œ≤} (h : f =·∂†[ùìù (a, b)] g) : (Œª y, f (a, y)) =·∂†[ùìù b] (Œª y, g(a, y)) :=
begin
  rw nhds_prod_eq at h,
  have : (pure a : filter Œ±) √ó·∂† ùìù b ‚â§ (ùìù a) √ó·∂† (ùìù b),
  exact prod_mono (by apply pure_le_nhds) le_rfl,
  have := h.filter_mono this,
  rw [pure_prod] at this,
  exact eventually_map.mp this
end
