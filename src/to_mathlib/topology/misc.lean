import topology.path_connected
import topology.uniform_space.compact_separated

noncomputable theory

open set function filter
open_locale unit_interval topological_space uniformity filter classical

section -- to ???

-- needs classical
variables {Œ± Œ≤ Œ≥ Œ¥ Œπ : Type*} [topological_space Œ±] [topological_space Œ≤] {x : Œ±}

lemma is_open_slice_of_is_open_over {Œ© : set (Œ± √ó Œ≤)} {x‚ÇÄ : Œ±}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© prod.fst ‚Åª¬π' U)) : is_open (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) :=
begin
  rcases hŒ©_op with ‚ü®U, hU, hU_op‚ü©, convert hU_op.preimage (continuous.prod.mk x‚ÇÄ) using 1,
  simp_rw [preimage_inter, preimage_preimage, preimage_const, mem_of_mem_nhds hU, if_pos,
    inter_univ]
end


end

section -- logic.function

-- move
-- @[simp] lemma base_apply {Œ± Œ≤ : Type*} (f : Œ± ‚Üí Œ≤) (x : Œ±) : ‚Üøf x = f x := rfl
-- @[simp] lemma induction_apply {Œ± Œ≤ Œ≥ Œ¥ : Type*} {h : has_uncurry Œ≤ Œ≥ Œ¥} (f : Œ± ‚Üí Œ≤) (x : Œ±)
--   (c : Œ≥) : ‚Üøf (x, c) = ‚Üø(f x) c :=
-- rfl

-- @[simp] lemma uncurry_loop_apply {F : Type*} [normed_group F] [normed_space ‚Ñù F]
--   [finite_dimensional ‚Ñù F] {Œ± : Type*} (f : Œ± ‚Üí loop F) (x : Œ±) (t : ‚Ñù) :
--   ‚Üøf (x, t) = f x t :=
-- rfl

-- @[simp] lemma uncurry_path_apply {X Œ± : Type*} [topological_space X] {x y : Œ± ‚Üí X}
--   (f : Œ† a, path (x a) (y a)) (a : Œ±) (t : I) : ‚Üøf (a, t) = f a t :=
-- rfl
mk_simp_attribute uncurry_simps "unfolds all occurrences of the uncurry operation `‚Üø`."
attribute [uncurry_simps] function.has_uncurry_base function.has_uncurry_induction
  path.has_uncurry_path

end



section -- to unit_interval

namespace unit_interval

open int
lemma fract_mem (x : ‚Ñù) : fract x ‚àà I := ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©

end unit_interval

end

section

section
variables {Œ± : Type*} [uniform_space Œ±]
-- to uniform_space/basic

-- `uniformity_eq_symm` should probably be reformulated in the library
-- UNUSED
lemma symm_eq_uniformity : map (@prod.swap Œ± Œ±) (ùì§ Œ±) = ùì§ Œ± :=
uniformity_eq_symm.symm

-- UNUSED
lemma nhds_eq_comap_uniformity_rev {y : Œ±} : ùìù y = (ùì§ Œ±).comap (Œª x, (x, y)) :=
by { rw [uniformity_eq_symm, map_swap_eq_comap_swap, comap_comap], exact nhds_eq_comap_uniformity }

end

end
