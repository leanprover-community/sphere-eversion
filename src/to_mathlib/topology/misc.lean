import topology.path_connected
import topology.urysohns_lemma
import topology.uniform_space.compact_separated

noncomputable theory

open set function filter
open_locale unit_interval topological_space uniformity filter classical

section -- to ???

-- needs classical
variables {Œ± Œ≤ Œ≥ Œ¥ Œπ : Type*} [topological_space Œ±] [topological_space Œ≤] {x : Œ±}

lemma is_open_slice_of_is_open_over {Œ© : set (Œ± √ó Œ≤)} {x‚ÇÄ : Œ±}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© prod.fst ‚Åª¬π' U)) : is_open (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) :=
begin
  rcases hŒ©_op with ‚ü®U, hU, hU_op‚ü©, convert hU_op.preimage (continuous.prod.mk x‚ÇÄ) using 1,
  simp_rw [preimage_inter, preimage_preimage, preimage_const, mem_of_mem_nhds hU, if_pos,
    inter_univ]
end


end

section -- logic.function

-- move
-- @[simp] lemma base_apply {Œ± Œ≤ : Type*} (f : Œ± ‚Üí Œ≤) (x : Œ±) : ‚Üøf x = f x := rfl
-- @[simp] lemma induction_apply {Œ± Œ≤ Œ≥ Œ¥ : Type*} {h : has_uncurry Œ≤ Œ≥ Œ¥} (f : Œ± ‚Üí Œ≤) (x : Œ±)
--   (c : Œ≥) : ‚Üøf (x, c) = ‚Üø(f x) c :=
-- rfl

-- @[simp] lemma uncurry_loop_apply {F : Type*} [normed_group F] [normed_space ‚Ñù F]
--   [finite_dimensional ‚Ñù F] {Œ± : Type*} (f : Œ± ‚Üí loop F) (x : Œ±) (t : ‚Ñù) :
--   ‚Üøf (x, t) = f x t :=
-- rfl

-- @[simp] lemma uncurry_path_apply {X Œ± : Type*} [topological_space X] {x y : Œ± ‚Üí X}
--   (f : Œ† a, path (x a) (y a)) (a : Œ±) (t : I) : ‚Üøf (a, t) = f a t :=
-- rfl
mk_simp_attribute uncurry_simps "unfolds all occurrences of the uncurry operation `‚Üø`."
attribute [uncurry_simps] function.has_uncurry_base function.has_uncurry_induction
  path.has_uncurry_path

end



section -- to unit_interval

namespace unit_interval

open int
lemma fract_mem (x : ‚Ñù) : fract x ‚àà I := ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©
lemma zero_mem : (0 : ‚Ñù) ‚àà I := ‚ü®le_rfl, zero_le_one‚ü©
lemma one_mem : (1 : ‚Ñù) ‚àà I := ‚ü®zero_le_one, le_rfl‚ü©

end unit_interval

end

section

section
variables {Œ± : Type*} [uniform_space Œ±]
-- to uniform_space/basic

-- `uniformity_eq_symm` should probably be reformulated in the library
-- UNUSED
lemma symm_eq_uniformity : map (@prod.swap Œ± Œ±) (ùì§ Œ±) = ùì§ Œ± :=
uniformity_eq_symm.symm

-- UNUSED
lemma nhds_eq_comap_uniformity_rev {y : Œ±} : ùìù y = (ùì§ Œ±).comap (Œª x, (x, y)) :=
by { rw [uniformity_eq_symm, map_swap_eq_comap_swap, comap_comap], exact nhds_eq_comap_uniformity }

end

end


section

variables {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]

-- basic
lemma continuous.congr {f g : Œ± ‚Üí Œ≤} (h : continuous f) (h' : ‚àÄ x, f x = g x) : continuous g :=
by { convert h, ext, rw h' }

-- TODO: rename `finset.closure_Union` to `finset.closure_bUnion`

-- constructions
lemma continuous.subtype_coe {p : Œ≤ ‚Üí Prop} {f : Œ± ‚Üí subtype p} (hf : continuous f) :
  continuous (Œª x, (f x : Œ≤)) :=
continuous_subtype_coe.comp hf

end

section -- to separation

variables {Œ± : Type*} [topological_space Œ±]

lemma exists_open_superset_and_is_compact_closure [locally_compact_space Œ±] [t2_space Œ±]
  {K : set Œ±} (hK : is_compact K) : ‚àÉ V, is_open V ‚àß K ‚äÜ V ‚àß is_compact (closure V) :=
begin
  rcases exists_compact_superset hK with ‚ü®K', hK', hKK'‚ü©,
  refine ‚ü®interior K', is_open_interior, hKK',
    compact_closure_of_subset_compact hK' interior_subset‚ü©,
end

lemma exists_compact_between [locally_compact_space Œ±] [regular_space Œ±]
  {K U : set Œ±} (hK : is_compact K) (hU : is_open U) (hKU : K ‚äÜ U) :
  ‚àÉ K', is_compact K' ‚àß K ‚äÜ interior K' ‚àß closure K' ‚äÜ U :=
begin
  choose C hxC hCU hC using Œª x : K, nhds_is_closed (hU.mem_nhds $ hKU x.2),
  choose L hL hxL using Œª x : K, exists_compact_mem_nhds (x : Œ±),
  have : K ‚äÜ ‚ãÉ x, interior (L x) ‚à© interior (C x), from
  Œª x hx, mem_Union.mpr ‚ü®‚ü®x, hx‚ü©,
    ‚ü®mem_interior_iff_mem_nhds.mpr (hxL _), mem_interior_iff_mem_nhds.mpr (hxC _)‚ü©‚ü©,
  rcases hK.elim_finite_subcover _ _ this with ‚ü®t, ht‚ü©,
  { refine ‚ü®‚ãÉ x ‚àà t, L x ‚à© C x, t.compact_bUnion (Œª x _, (hL x).inter_right (hC x)), Œª x hx, _, _‚ü©,
    { obtain ‚ü®y, hyt, hy : x ‚àà interior (L y) ‚à© interior (C y)‚ü© := mem_bUnion_iff.mp (ht hx),
      rw [‚Üê interior_inter] at hy,
      refine interior_mono (subset_bUnion_of_mem hyt) hy },
    { simp_rw [t.closure_Union, Union_subset_iff, ((hL _).is_closed.inter (hC _)).closure_eq],
      rintro x -, exact (inter_subset_right _ _).trans (hCU _) } },
  { exact Œª _, is_open_interior.inter is_open_interior }
end

lemma exists_open_between_and_is_compact_closure [locally_compact_space Œ±] [regular_space Œ±]
  {K U : set Œ±} (hK : is_compact K) (hU : is_open U) (hKU : K ‚äÜ U) :
  ‚àÉ V, is_open V ‚àß K ‚äÜ V ‚àß closure V ‚äÜ U ‚àß is_compact (closure V) :=
begin
  rcases exists_compact_between hK hU hKU with ‚ü®V, hV, hKV, hVU‚ü©,
  refine ‚ü®interior V, is_open_interior, hKV, (closure_mono interior_subset).trans hVU,
    compact_closure_of_subset_compact hV interior_subset‚ü©,
end

end