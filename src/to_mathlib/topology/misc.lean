import topology.path_connected

noncomputable theory

open set function
open_locale unit_interval topological_space uniformity

section -- to topology.algebra.ordered.proj_Icc

variables {Œ± Œ≤ Œ≥ : Type*} [topological_space Œ±] [linear_order Œ±] [order_topology Œ±]
  [topological_space Œ≤] [topological_space Œ≥] {a b : Œ±} {h : a ‚â§ b}

lemma continuous.Icc_extend' {f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤}
  (hf : continuous ‚Üøf) : continuous ‚Üø(Icc_extend h ‚àò f) :=
hf.comp (continuous_fst.prod_mk $ continuous_proj_Icc.comp continuous_snd)

lemma continuous_at.Icc_extend {Œ± Œ≤ Œ≥ : Type*}
  [topological_space Œ±] [linear_order Œ±] [order_topology Œ±] [topological_space Œ≤]
   [topological_space Œ≥] {a b c : Œ±} {x : Œ≥} {h : a ‚â§ b} (f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤)
  (hf : continuous_at ‚Üøf (x, proj_Icc a b h c)) : continuous_at ‚Üø(Icc_extend h ‚àò f) (x, c) :=
show continuous_at (‚Üøf ‚àò (Œª p : Œ≥ √ó Œ±, (p.1, proj_Icc a b h p.2))) (x, c), from
continuous_at.comp hf
  (continuous_fst.prod_mk $ continuous_proj_Icc.comp continuous_snd).continuous_at


lemma continuous.extend' {X Y : Type*} [topological_space X] [topological_space Y] {x y : X}
  {Œ≥ : Y ‚Üí path x y} (hŒ≥ : continuous ‚ÜøŒ≥) :
  continuous ‚Üø(Œª t, (Œ≥ t).extend) :=
continuous.Icc_extend' hŒ≥

end

section -- to topology.path_connected

variables {X Y Z : Type*} [topological_space X] [topological_space Y]
  [topological_space Z] {x y : X}

lemma continuous.extend  {f : Z ‚Üí Y} {g : Z ‚Üí ‚Ñù} {Œ≥ : Y ‚Üí path x y} (hŒ≥ : continuous ‚ÜøŒ≥)
  (hf : continuous f) (hg : continuous g) :
  continuous (Œª i, (Œ≥ (f i)).extend (g i)) :=
(continuous.extend' hŒ≥).comp $ hf.prod_mk hg

lemma continuous_at.extend {X Y Z : Type*} [topological_space X] [topological_space Y]
  [topological_space Z] {x y : X} {f : Z ‚Üí Y} {g : Z ‚Üí ‚Ñù} {Œ≥ : Y ‚Üí path x y} {z : Z}
  (hŒ≥ : continuous_at ‚ÜøŒ≥ (f z, proj_Icc 0 1 zero_le_one (g z))) (hf : continuous_at f z)
  (hg : continuous_at g z) : continuous_at (Œª i, (Œ≥ (f i)).extend (g i)) z :=
show continuous_at
  ((Œª p : Y √ó ‚Ñù, (Icc_extend (@zero_le_one ‚Ñù _) (Œ≥ p.1) p.2)) ‚àò (Œª i, (f i, g i))) z, from
continuous_at.comp (continuous_at.Icc_extend (Œª x y, Œ≥ x y) hŒ≥) $ hf.prod hg

end
section -- to topology.algebra.group_with_zero

variables {Œ± G‚ÇÄ Œ≤ Œ≥ : Type*} [group_with_zero G‚ÇÄ] [topological_space G‚ÇÄ]
  [has_continuous_inv‚ÇÄ G‚ÇÄ] [has_continuous_mul G‚ÇÄ]

lemma continuous_at.comp_div_zero  {f g : Œ± ‚Üí G‚ÇÄ} {k : Œ± ‚Üí Œ≥} (h : Œ≥ ‚Üí G‚ÇÄ ‚Üí Œ≤)
  [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥] {a : Œ±} (c : Œ≥)
  (hk : continuous_at k a) (hf : continuous_at f a) (hg : continuous_at g a)
  (hh : g a ‚â† 0 ‚Üí continuous_at ‚Üøh (k a, f a / g a))
  (h2h : filter.tendsto ‚Üøh ((ùìù c).prod ‚ä§) (ùìù (h c 0)))
  (hgk : ‚àÄ {a}, g a = 0 ‚Üí k a = c) :
  continuous_at (Œª x, h (k x) (f x / g x)) a :=
begin
  show continuous_at (‚Üøh ‚àò (Œª x, (k x, f x / g x))) a,
  by_cases hga : g a = 0,
  { rw [continuous_at], simp_rw [comp_app, hga, div_zero, hgk hga],
    refine h2h.comp _, rw [‚Üê hgk hga], exact hk.prod_mk filter.tendsto_top },
  { exact continuous_at.comp (hh hga) (hk.prod (hf.div hg hga)) }
end

end

section

open filter

section
variables {Œ± : Type*} [uniform_space Œ±]
-- to uniform_space/basic

-- `uniformity_eq_symm` should probably be reformulated in the library
lemma symm_eq_uniformity : map (@prod.swap Œ± Œ±) (ùì§ Œ±) = ùì§ Œ± :=
uniformity_eq_symm.symm

lemma nhds_eq_comap_uniformity_rev {y : Œ±} : ùìù y = (ùì§ Œ±).comap (Œª x, (x, y)) :=
by { rw [uniformity_eq_symm, map_swap_eq_comap_swap, comap_comap], exact nhds_eq_comap_uniformity }

end

-- to uniform_convergence
lemma tendsto_prod_top_iff {Œ± Œ≤ Œπ : Type*} [uniform_space Œ≤] (F : Œπ ‚Üí Œ± ‚Üí Œ≤) (c : Œ≤)
  (p : filter Œπ) : tendsto ‚ÜøF (p.prod ‚ä§) (ùìù c) ‚Üî tendsto_uniformly F (Œª _, c) p :=
begin
  rw [tendsto_prod_iff],
  split,
  { intros h u hu, dsimp, specialize @h ((Œª x, (c, x)) ‚Åª¬π' u) _,
    { rw [nhds_eq_comap_uniformity], exact preimage_mem_comap hu },
    rcases h with ‚ü®U, hU, V, hV, h‚ü©,
    rw [mem_top] at hV, subst hV,
    refine eventually_of_mem hU _,
    intros i hiU x, exact h i x hiU (mem_univ x) },
  { intros h s hs,
    specialize h _ (mem_nhds_uniformity_iff_right.mp hs),
    refine ‚ü®_, h, univ, univ_mem, Œª i x h _, h x rfl‚ü© }
end

end
