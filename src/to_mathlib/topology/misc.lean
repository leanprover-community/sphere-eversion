import topology.path_connected
import topology.uniform_space.compact_separated

noncomputable theory

open set function filter
open_locale unit_interval topological_space uniformity filter classical

section -- to ???

-- needs classical
variables {Œ± Œ≤ Œ≥ Œ¥ Œπ : Type*} [topological_space Œ±] [topological_space Œ≤] {x : Œ±}

lemma is_open_slice_of_is_open_over {Œ© : set (Œ± √ó Œ≤)} {x‚ÇÄ : Œ±}
  (hŒ©_op : ‚àÉ U ‚àà ùìù x‚ÇÄ, is_open (Œ© ‚à© prod.fst ‚Åª¬π' U)) : is_open (prod.mk x‚ÇÄ ‚Åª¬π' Œ©) :=
begin
  rcases hŒ©_op with ‚ü®U, hU, hU_op‚ü©, convert hU_op.preimage (continuous.prod.mk x‚ÇÄ) using 1,
  simp_rw [preimage_inter, preimage_preimage, preimage_const, mem_of_mem_nhds hU, if_pos,
    inter_univ]
end


end

section -- logic.function

-- move
-- @[simp] lemma base_apply {Œ± Œ≤ : Type*} (f : Œ± ‚Üí Œ≤) (x : Œ±) : ‚Üøf x = f x := rfl
-- @[simp] lemma induction_apply {Œ± Œ≤ Œ≥ Œ¥ : Type*} {h : has_uncurry Œ≤ Œ≥ Œ¥} (f : Œ± ‚Üí Œ≤) (x : Œ±)
--   (c : Œ≥) : ‚Üøf (x, c) = ‚Üø(f x) c :=
-- rfl

-- @[simp] lemma uncurry_loop_apply {F : Type*} [normed_group F] [normed_space ‚Ñù F]
--   [finite_dimensional ‚Ñù F] {Œ± : Type*} (f : Œ± ‚Üí loop F) (x : Œ±) (t : ‚Ñù) :
--   ‚Üøf (x, t) = f x t :=
-- rfl

-- @[simp] lemma uncurry_path_apply {X Œ± : Type*} [topological_space X] {x y : Œ± ‚Üí X}
--   (f : Œ† a, path (x a) (y a)) (a : Œ±) (t : I) : ‚Üøf (a, t) = f a t :=
-- rfl
mk_simp_attribute uncurry_simps "unfolds all occurrences of the uncurry operation `‚Üø`."
attribute [uncurry_simps] function.has_uncurry_base function.has_uncurry_induction
  path.has_uncurry_path



end

section -- algebra.order.group

variables {Œ± : Type*} [group Œ±] [has_le Œ±] [covariant_class Œ± Œ± (*) (‚â§)]
  [covariant_class Œ± Œ± (swap (*)) (‚â§)]

@[simp, to_additive]
lemma le_div_self_iff (a : Œ±) {b : Œ±} : a ‚â§ a / b ‚Üî b ‚â§ 1 :=
by simp [div_eq_mul_inv]

end

section -- to bounded_lattice

variables {Œ± Œ≤ : Type*}

lemma function.surjective.map_top {f : Œ± ‚Üí Œ≤} (hf : surjective f) : map f ‚ä§ = ‚ä§ :=
by { ext, simp only [mem_map, mem_top, eq_univ_iff_forall, mem_preimage, iff.comm, hf.forall] }

end

section -- to data.set.intervals.proj_Icc

variables {Œ± Œ≤ : Type*} [linear_order Œ±] {a b : Œ±} {h : a ‚â§ b} {x : Œ±}

lemma proj_Icc_eq_left (h : a < b) : proj_Icc a b h.le x = ‚ü®a, left_mem_Icc.mpr h.le‚ü© ‚Üî x ‚â§ a :=
begin
  refine ‚ü®Œª h', _, proj_Icc_of_le_left _‚ü©,
  simp_rw [subtype.ext_iff_val, proj_Icc, max_eq_left_iff, min_le_iff, h.not_le, false_or] at h',
  exact h'
end

lemma proj_Icc_eq_right (h : a < b) : proj_Icc a b h.le x = ‚ü®b, right_mem_Icc.mpr h.le‚ü© ‚Üî b ‚â§ x :=
begin
  refine ‚ü®Œª h', _, proj_Icc_of_right_le _‚ü©,
  simp_rw [subtype.ext_iff_val, proj_Icc] at h',
  have := ((max_choice _ _).resolve_left (by simp [h.ne', h'])).symm.trans h',
  exact min_eq_left_iff.mp this
end

end


section -- to unit_interval

@[simp] lemma proj_Icc_eq_zero {x : ‚Ñù} : proj_Icc (0 : ‚Ñù) 1 zero_le_one x = 0 ‚Üî x ‚â§ 0 :=
proj_Icc_eq_left zero_lt_one

@[simp] lemma proj_Icc_eq_one {x : ‚Ñù} : proj_Icc (0 : ‚Ñù) 1 zero_le_one x = 1 ‚Üî 1 ‚â§ x :=
proj_Icc_eq_right zero_lt_one

namespace unit_interval

/-- Similar to `unit_interval.nonneg`, except that the inequality is in `I`. -/
lemma nonneg' {t : I} : 0 ‚â§ t := t.2.1
/-- Similar to `unit_interval.le_one`, except that the inequality is in `I`. -/
lemma le_one' {t : I} : t ‚â§ 1 := t.2.2

lemma coe_eq_zero {x : I} : (x : ‚Ñù) = 0 ‚Üî x = 0 :=
by { symmetry, exact subtype.ext_iff }

open int
lemma fract_mem (x : ‚Ñù) : fract x ‚àà I := ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©

lemma coe_ne_zero {x : I} : (x : ‚Ñù) ‚â† 0 ‚Üî x ‚â† 0 :=
not_iff_not.mpr coe_eq_zero

lemma coe_eq_one {x : I} : (x : ‚Ñù) = 1 ‚Üî x = 1 :=
by { symmetry, exact subtype.ext_iff }

lemma coe_ne_one {x : I} : (x : ‚Ñù) ‚â† 1 ‚Üî x ‚â† 1 :=
not_iff_not.mpr coe_eq_one

lemma mul_mem (x y : I) : (x : ‚Ñù) * y ‚àà I :=
‚ü®mul_nonneg x.2.1 y.2.1, (mul_le_mul x.2.2 y.2.2 y.2.1 zero_le_one).trans_eq $ one_mul 1‚ü©

instance : has_mul I := ‚ü®Œª x y, ‚ü®x * y, mul_mem x y‚ü©‚ü©

@[simp, norm_cast] lemma coe_mul {x y : I} : ((x * y : I) : ‚Ñù) = x * y := rfl

-- todo: provide linear_ordered_comm_monoid_with_zero instance

lemma mul_le_left {x y : I} : x * y ‚â§ x :=
subtype.coe_le_coe.mp $ (mul_le_mul_of_nonneg_left y.2.2 x.2.1).trans_eq $ mul_one x

lemma mul_le_right {x y : I} : x * y ‚â§ y :=
subtype.coe_le_coe.mp $ (mul_le_mul_of_nonneg_right x.2.2 y.2.1).trans_eq $ one_mul y

end unit_interval

end



section -- to topology.algebra.ordered.proj_Icc

variables {Œ± Œ≤ Œ≥ : Type*} [linear_order Œ±] [topological_space Œ≥] {a b c : Œ±} {h : a ‚â§ b}

lemma filter.tendsto.Icc_extend (f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤) {z : Œ≥} {l : filter Œ±} {l' : filter Œ≤}
  (hf : tendsto ‚Üøf (ùìù z √ó·∂† l.map (proj_Icc a b h)) l') :
  tendsto ‚Üø(Icc_extend h ‚àò f) (ùìù z √ó·∂† l) l' :=
show tendsto (‚Üøf ‚àò prod.map id (proj_Icc a b h)) (ùìù z √ó·∂† l) l', from
hf.comp $ tendsto_id.prod_map tendsto_map

variables [topological_space Œ±] [order_topology Œ±] [topological_space Œ≤]

lemma continuous.Icc_extend' {f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±}
  (hf : continuous ‚Üøf) (hg : continuous g) : continuous (Œª a, Icc_extend h (f a) (g a)) :=
hf.comp $ continuous_id.prod_mk (continuous_proj_Icc.comp hg)

lemma continuous_at.Icc_extend {x : Œ≥} (f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤)
  (hf : continuous_at ‚Üøf (x, proj_Icc a b h c)) : continuous_at ‚Üø(Icc_extend h ‚àò f) (x, c) :=
show continuous_at (‚Üøf ‚àò prod.map id (proj_Icc a b h)) (x, c), from
continuous_at.comp hf (continuous_id.prod_map continuous_proj_Icc).continuous_at

end

section -- to topology.path_connected

variables {X Y Z : Type*} [topological_space X] [topological_space Y]
  [topological_space Z] {x y : X}

lemma continuous.extend {Œ≥ : Y ‚Üí path x y} {f : Y ‚Üí ‚Ñù} (hŒ≥ : continuous ‚ÜøŒ≥) (hf : continuous f) :
  continuous (Œª t, (Œ≥ t).extend (f t)) :=
continuous.Icc_extend' hŒ≥ hf

lemma filter.tendsto.extend {X Y : Type*} [topological_space X] [topological_space Y]
  {l r : Y ‚Üí X}
  {y : Y} {l‚ÇÅ : filter ‚Ñù} {l‚ÇÇ : filter X} {Œ≥ : ‚àÄ y, path (l y) (r y)}
  (hŒ≥ : tendsto ‚ÜøŒ≥ (ùìù y √ó·∂† l‚ÇÅ.map (proj_Icc 0 1 zero_le_one)) l‚ÇÇ) :
  tendsto ‚Üø(Œª t, (Œ≥ t).extend) (ùìù y √ó·∂† l‚ÇÅ) l‚ÇÇ :=
filter.tendsto.Icc_extend _ hŒ≥

lemma continuous_at.extend {g : Y ‚Üí ‚Ñù} {l r : Y ‚Üí X} (Œ≥ : ‚àÄ y, path (l y) (r y))
  {y : Y}
  (hŒ≥ : continuous_at ‚ÜøŒ≥ (y, proj_Icc 0 1 zero_le_one (g y)))
  (hg : continuous_at g y) : continuous_at (Œª i, (Œ≥ i).extend (g i)) y :=
show continuous_at
  ((Œª p : Y √ó ‚Ñù, (Icc_extend (@zero_le_one ‚Ñù _) (Œ≥ p.1) p.2)) ‚àò (Œª i, (i, g i))) y, from
continuous_at.comp (continuous_at.Icc_extend (Œª x y, Œ≥ x y) hŒ≥) $ continuous_at_id.prod hg

end
section -- to topology.algebra.group_with_zero

variables {Œ± G‚ÇÄ Œ≤ Œ≥ : Type*} [group_with_zero G‚ÇÄ] [topological_space G‚ÇÄ]
  [has_continuous_inv‚ÇÄ G‚ÇÄ] [has_continuous_mul G‚ÇÄ]

lemma continuous_at.comp_div_cases [topological_space Œ±] [topological_space Œ≤] {a : Œ±}
  {f g : Œ± ‚Üí G‚ÇÄ} (h : Œ± ‚Üí G‚ÇÄ ‚Üí Œ≤)
  (hf : continuous_at f a) (hg : continuous_at g a)
  (hh : g a ‚â† 0 ‚Üí continuous_at ‚Üøh (a, f a / g a))
  (h2h : g a = 0 ‚Üí tendsto ‚Üøh (ùìù a √ó·∂† ‚ä§) (ùìù (h a 0))) :
  continuous_at (Œª x, h x (f x / g x)) a :=
begin
  show continuous_at (‚Üøh ‚àò (Œª x, (x, f x / g x))) a,
  by_cases hga : g a = 0,
  { rw [continuous_at], simp_rw [comp_app, hga, div_zero],
    exact (h2h hga).comp (continuous_at_id.prod_mk tendsto_top) },
  { exact continuous_at.comp (hh hga) (continuous_at_id.prod (hf.div hg hga)) }
end

end

section

section
variables {Œ± : Type*} [uniform_space Œ±]
-- to uniform_space/basic

-- `uniformity_eq_symm` should probably be reformulated in the library
lemma symm_eq_uniformity : map (@prod.swap Œ± Œ±) (ùì§ Œ±) = ùì§ Œ± :=
uniformity_eq_symm.symm

lemma nhds_eq_comap_uniformity_rev {y : Œ±} : ùìù y = (ùì§ Œ±).comap (Œª x, (x, y)) :=
by { rw [uniformity_eq_symm, map_swap_eq_comap_swap, comap_comap], exact nhds_eq_comap_uniformity }


end

-- to logic/basic
/-- We intentionally restrict the type of `Œ±` here so that this is a safer to use in simp. -/
lemma imp_forall_iff {Œ± : Type*} {p : Prop} {q : Œ± ‚Üí Prop} : (p ‚Üí ‚àÄ x, q x) ‚Üî (‚àÄ x, p ‚Üí q x) :=
forall_swap

-- to filter/basic
lemma filter.mem_prod_top {Œ± Œ≤ : Type*} {f : filter Œ±} {s : set (Œ± √ó Œ≤)} :
  s ‚àà f √ó·∂† (‚ä§ : filter Œ≤) ‚Üî {a | ‚àÄ b, (a, b) ‚àà s} ‚àà f :=
begin
  rw [‚Üê @exists_mem_subset_iff _ f],
  simp only [mem_prod_iff, exists_prop, exists_eq_left, mem_top, prod_univ, mem_preimage,
    prod.forall, subset_def, mem_set_of_eq, imp_forall_iff]
end

-- to uniform_convergence
lemma tendsto_prod_top_iff {Œ± Œ≤ Œπ : Type*} [uniform_space Œ≤] {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {c : Œ≤}
  {p : filter Œπ} : tendsto ‚ÜøF (p √ó·∂† ‚ä§) (ùìù c) ‚Üî tendsto_uniformly F (Œª _, c) p :=
let j : Œ≤ ‚Üí Œ≤ √ó Œ≤ := prod.mk c in
calc tendsto ‚ÜøF (p √ó·∂† ‚ä§) (ùìù c)
    ‚Üî map ‚ÜøF (p √ó·∂† ‚ä§) ‚â§ (ùìù c) : iff.rfl
... ‚Üî map ‚ÜøF (p √ó·∂† ‚ä§) ‚â§ comap j (ùì§ Œ≤) : by rw nhds_eq_comap_uniformity
... ‚Üî map j (map ‚ÜøF (p √ó·∂† ‚ä§)) ‚â§ ùì§ Œ≤ : map_le_iff_le_comap.symm
... ‚Üî map (j ‚àò ‚ÜøF) (p √ó·∂† ‚ä§) ‚â§ ùì§ Œ≤ : by rw map_map
... ‚Üî ‚àÄ V ‚àà ùì§ Œ≤, {x | (c, ‚ÜøF x) ‚àà V} ‚àà (p √ó·∂† ‚ä§ : filter $ Œπ √ó Œ±) : iff.rfl
... ‚Üî ‚àÄ V ‚àà ùì§ Œ≤, {i | ‚àÄ a, (c, F i a) ‚àà V} ‚àà p : by simpa [filter.mem_prod_top]

-- can this be shorter?
lemma uniform_continuous_on.tendsto_uniformly {Œ± Œ≤ Œ≥ : Type*}
  [uniform_space Œ±] [uniform_space Œ≤] [uniform_space Œ≥] {x : Œ±} {U : set Œ±} (hU : U ‚àà ùìù x)
  {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (h : uniform_continuous_on ‚Üøf (U.prod univ)) :
  tendsto_uniformly f (f x) (ùìù x) :=
begin
  intros V hV,
  rw [uniform_continuous_on, uniformity_prod_eq_prod] at h,
  specialize h hV,
  rw [mem_map, mem_inf_iff] at h,
  rcases h with ‚ü®s, hs, t, ht, hst‚ü©,
  rw [mem_map, mem_prod_iff] at hs, rcases hs with ‚ü®u, hu, v, hv, huvs‚ü©,
  rw [mem_principal] at ht,
  rw [‚Üê image_subset_iff] at huvs,
  have hU' := mem_nhds_uniformity_iff_right.mp hU,
  rw [nhds_eq_comap_uniformity, eventually_comap],
  apply eventually_of_mem (inter_mem hu hU'),
  rintro ‚ü®x', y'‚ü© ‚ü®hxyu, hxyU‚ü© y hxy b,
  cases hxy,
  show ((x, b), (y, b)) ‚àà (Œª p : _ √ó _, (‚Üøf p.1, ‚Üøf p.2)) ‚Åª¬π' V,
  rw [hst],
  refine ‚ü®huvs ‚ü®((x, y), (b, b)), _, rfl‚ü©, ht _‚ü©,
  exact ‚ü®hxyu, refl_mem_uniformity hv‚ü©,
  refine ‚ü®‚ü®mem_of_mem_nhds hU, mem_univ b‚ü©, ‚ü®hxyU rfl, mem_univ b‚ü©‚ü©
end

lemma uniform_continuous‚ÇÇ.tendsto_uniformly {Œ± Œ≤ Œ≥ : Type*}
  [uniform_space Œ±] [uniform_space Œ≤] [uniform_space Œ≥]
  {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (h : uniform_continuous‚ÇÇ f) {x : Œ±} : tendsto_uniformly f (f x) (ùìù x) :=
uniform_continuous_on.tendsto_uniformly univ_mem $
  by rwa [univ_prod_univ, uniform_continuous_on_univ]

local attribute [instance] uniform_space.separation_setoid

lemma is_separated.eq_of_uniform_continuous {Œ± Œ≤ : Type*} [uniform_space Œ±] [uniform_space Œ≤]
  {f : Œ± ‚Üí Œ≤} {x y : Œ±} {s : set Œ≤} (hs : is_separated s) (hxs : f x ‚àà s) (hys : f y ‚àà s)
  (H : uniform_continuous f) (h : x ‚âà y) : f x = f y :=
(is_separated_def _).mp hs _ _ hxs hys $ Œª _ h', h _ (H h')

lemma is_separated.prod {Œ± Œ≤ : Type*} [uniform_space Œ±] [uniform_space Œ≤] {s : set Œ±} {t : set Œ≤}
  (hs : is_separated s) (ht : is_separated t) : is_separated (s.prod t) :=
(is_separated_def _).mpr $ assume x y hx hy H, prod.ext
  (hs.eq_of_uniform_continuous hx.1 hy.1 uniform_continuous_fst H)
  (ht.eq_of_uniform_continuous hx.2 hy.2 uniform_continuous_snd H)

lemma is_separated.mono {Œ± : Type*} [uniform_space Œ±] {s t : set Œ±}
  (hs : is_separated s) (hts : t ‚äÜ s) : is_separated t :=
Œª x y hx hy, hs x y (hts hx) (hts hy)

lemma continuous_on.tendsto_uniformly {Œ± Œ≤ Œ≥ : Type*}
  [uniform_space Œ±] [uniform_space Œ≤] [uniform_space Œ≥] [locally_compact_space Œ±] [compact_space Œ≤]
  [separated_space Œ≤]
  {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} {x : Œ±} {U : set Œ±} (hxU : U ‚àà ùìù x) (hU : is_separated U)
  (h : continuous_on ‚Üøf (U.prod univ)) :
  tendsto_uniformly f (f x) (ùìù x) :=
begin
  rcases locally_compact_space.local_compact_nhds _ _ hxU with ‚ü®K, hxK, hKU, hK‚ü©,
  have : uniform_continuous_on ‚Üøf (K.prod univ),
  { refine is_compact.uniform_continuous_on_of_continuous' (hK.prod compact_univ) _
      (h.mono $ prod_mono hKU subset.rfl),
    exact (hU.mono hKU).prod (is_separated_of_separated_space _) },
  exact this.tendsto_uniformly hxK
end

lemma continuous.tendsto_uniformly {Œ± Œ≤ Œ≥ : Type*}
  [uniform_space Œ±] [separated_space Œ±] [locally_compact_space Œ±] [uniform_space Œ≤]
  [compact_space Œ≤] [separated_space Œ≤] [uniform_space Œ≥]
  (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (h : continuous ‚Üøf) (x : Œ±) : tendsto_uniformly f (f x) (ùìù x) :=
h.continuous_on.tendsto_uniformly univ_mem $ is_separated_of_separated_space _

end
