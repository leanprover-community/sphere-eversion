import topology.metric_space.hausdorff_distance

/-
TODO: think about versions assuming less than a metric space.
-/

open set metric
open_locale topological_space

variables {Œ± Œ≤ : Type*} [pseudo_metric_space Œ±] [pseudo_metric_space Œ≤]

namespace metric

lemma ball_subset_thickening {x : Œ±} {E : set Œ±} (hx : x ‚àà E) (Œ¥ : ‚Ñù) : ball x Œ¥ ‚äÜ thickening Œ¥ E :=
by simp_rw [thickening_eq_bUnion_ball, subset_bUnion_of_mem hx]

lemma thickening_ball (x : Œ±) (Œµ Œ¥ : ‚Ñù) : thickening Œµ (ball x Œ¥) ‚äÜ ball x (Œµ + Œ¥) :=
begin
  intro y,
  simp only [mem_thickening_iff, mem_ball],
  rintros ‚ü®z, hz, hz'‚ü©,
  calc dist y x ‚â§ dist y z + dist z x : dist_triangle _ _ _
  ... < Œµ + Œ¥ :  add_lt_add hz' hz
end

lemma inf_dist_pos_iff_not_mem_closure {x : Œ±} {s : set Œ±} (hs : s.nonempty) :
  0 < inf_dist x s ‚Üî x ‚àâ closure s :=
by rw [is_closed_closure.not_mem_iff_inf_dist_pos hs.closure, inf_dist_eq_closure]

end metric
open metric

lemma is_compact.exists_thickening_image {f : Œ± ‚Üí Œ≤} {K : set Œ±} {U : set Œ≤}
  (hK : is_compact K) (ho : is_open U) (hf : continuous f) (hKU : maps_to f K U) :
  ‚àÉ (Œµ > 0) (V ‚àà ùìùÀ¢ K), thickening Œµ (f '' V) ‚äÜ U :=
begin
  rcases (hK.image hf).exists_thickening_subset_open ho hKU.image_subset with ‚ü®r, hr‚ÇÄ, hr‚ü©,
  refine ‚ü®r / 2, half_pos hr‚ÇÄ, f ‚Åª¬π' (thickening (r / 2) (f '' K)),
    (is_open_thickening.preimage hf).mem_nhds_set.2 $ image_subset_iff.mp $
      self_subset_thickening (half_pos hr‚ÇÄ) _, _‚ü©,
  calc thickening (r / 2) (f '' (f ‚Åª¬π' thickening (r / 2) (f '' K)))
     ‚äÜ thickening (r / 2) (thickening (r / 2) (f '' K)) :
    thickening_subset_of_subset _ (image_preimage_subset _ _)
  ... ‚äÜ thickening (r / 2 + r / 2) (f '' K) : thickening_thickening_subset _ _ _
  ... = thickening r (f '' K) : by rw [add_halves]
  ... ‚äÜ U : hr
end
