import topology.metric_space.hausdorff_distance

/-
TODO: think about versions assuming less than a metric space.
-/

open set
open_locale topological_space

namespace metric

variables {Œ± Œ≤ : Type*} [pseudo_metric_space Œ±] [pseudo_metric_space Œ≤]
lemma ball_subset_thickening {x : Œ±} {E : set Œ±} (hx : x ‚àà E) (Œ¥ : ‚Ñù) : ball x Œ¥ ‚äÜ thickening Œ¥ E :=
by simp_rw [thickening_eq_bUnion_ball, subset_bUnion_of_mem hx]

lemma thickening_union (Œµ : ‚Ñù) (s t : set Œ±) :
  thickening Œµ (s ‚à™ t) = thickening Œµ s ‚à™ thickening Œµ t :=
by { ext x, simp [mem_thickening_iff, or_and_distrib_right, exists_or_distrib] }

lemma thickening_ball (x : Œ±) (Œµ Œ¥ : ‚Ñù) : thickening Œµ (ball x Œ¥) ‚äÜ ball x (Œµ + Œ¥) :=
begin
  intro y,
  simp only [mem_thickening_iff, mem_ball],
  rintros ‚ü®z, hz, hz'‚ü©,
  calc dist y x ‚â§ dist y z + dist z x : dist_triangle _ _ _
  ... < Œµ + Œ¥ :  add_lt_add hz' hz
end

lemma _root_.is_open.exists_thickening {U K : set Œ±} (hU : is_open U)
  (hK : is_compact K) (hK' : K ‚äÜ U) :
  ‚àÉ Œµ > 0, metric.thickening Œµ K ‚äÜ U :=
begin
  apply hK.induction_on,
  { use [1, zero_lt_one],
    simp },
  { rintros s t hst ‚ü®Œµ, Œµ_pos, h‚ü©,
    use [Œµ, Œµ_pos],
    exact (thickening_subset_of_subset Œµ hst).trans h },
  { rintros s t ‚ü®Œµ, Œµ_pos, hŒµ‚ü© ‚ü®Œ¥, Œ¥_pos, hŒ¥‚ü©,
    refine ‚ü®min Œµ Œ¥, lt_min Œµ_pos Œ¥_pos, _‚ü©,
    rw thickening_union,
    apply union_subset,
    exact (thickening_mono (min_le_left Œµ Œ¥) s).trans hŒµ,
    exact (thickening_mono (min_le_right Œµ Œ¥) t).trans hŒ¥ },
  { intros x hx,
    rcases metric.mem_nhds_iff.mp (hU.mem_nhds (hK' hx)) with ‚ü®Œµ, Œµ_pos, hŒµ‚ü©,
    refine ‚ü®ball x (Œµ/2), mem_nhds_within_of_mem_nhds $ ball_mem_nhds x (half_pos Œµ_pos),
            ‚ü®Œµ/2, half_pos Œµ_pos, _‚ü©‚ü©,
    have := thickening_ball x (Œµ/2) (Œµ/2),
    rw add_halves at this,
    exact this.trans hŒµ }
end

/--
  is this true without the additional assumptions on `Œ±`?
-/
lemma _root_.is_open.exists_thickening_image [locally_compact_space Œ±] [regular_space Œ±]
  {f : Œ± ‚Üí Œ≤} {K : set Œ±} {U : set Œ≤} (hU : is_open U) (hK : is_compact K)
  (hf : continuous f) (hKU : f '' K ‚äÜ U) :
  ‚àÉ (Œµ > 0) (V ‚àà ùìùÀ¢ K), metric.thickening Œµ (f '' V) ‚äÜ U :=
begin
  obtain ‚ü®K‚ÇÇ, hK‚ÇÇ, hKK‚ÇÇ, hK‚ÇÇU‚ü© :=
  exists_compact_between hK (hU.preimage hf) (image_subset_iff.mp hKU),
  obtain ‚ü®Œµ, hŒµ, h2KU‚ü© := hU.exists_thickening (hK‚ÇÇ.image hf) (image_subset_iff.mpr hK‚ÇÇU),
  refine ‚ü®Œµ, hŒµ, K‚ÇÇ, subset_interior_iff_mem_nhds_set.mp hKK‚ÇÇ, h2KU‚ü©,
end

end metric
