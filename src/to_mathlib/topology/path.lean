import topology.path_connected

import to_mathlib.topology.misc

open set function int topological_space
open_locale big_operators topological_space topological_space unit_interval
noncomputable theory

variables {X X' Y Z : Type*} [topological_space X]
variables [topological_space X'] [topological_space Y] [topological_space Z]



namespace path

/-- A loop evaluated at `t / t` is equal to its endpoint. Note that `t / t = 0` for `t = 0`. -/
@[simp] lemma extend_div_self {x : X} (Œ≥ : path x x) (t : ‚Ñù) :
  Œ≥.extend (t / t) = x :=
by by_cases h : t = 0; simp [h]

/-- Concatenation of two loops which moves through the first loop on `[0, t‚ÇÄ]` and
through the second one on `[t‚ÇÄ, 1]`. All endpoints are assumed to be the same so that this
function is also well-defined for `t‚ÇÄ ‚àà {0, 1}`.
`strans` stands either for a *s*kewed transitivity, or a transitivity with different *s*peeds. -/
def strans {x : X} (Œ≥ Œ≥' : path x x) (t‚ÇÄ : I) : path x x :=
{ to_fun := Œª t, if t ‚â§ t‚ÇÄ then Œ≥.extend (t / t‚ÇÄ) else Œ≥'.extend ((t - t‚ÇÄ) / (1 - t‚ÇÄ)),
  continuous_to_fun :=
  begin
    refine continuous.if_le _ _ continuous_id continuous_const (by simp only [extend_div_self,
      unit_interval.mk_zero, zero_le_one, id.def, zero_div, forall_eq, extend_extends, path.source,
      left_mem_Icc, sub_self]),
    -- TODO: the following are provable by `continuity` but it is too slow
    exacts [Œ≥.continuous_extend.comp continuous_subtype_coe.div_const,
      Œ≥'.continuous_extend.comp (continuous_subtype_coe.sub continuous_const).div_const]
  end,
  source' := by simp only [unit_interval.nonneg', unit_interval.coe_zero,
    unit_interval.mk_zero, zero_le_one,
    if_true, zero_div, comp_app, extend_extends, path.source, left_mem_Icc],
  target' := by simp only [unit_interval.le_one'.le_iff_eq.trans eq_comm, extend_div_self,
    unit_interval.coe_one, implies_true_iff, eq_self_iff_true, comp_app, ite_eq_right_iff]
    {contextual := tt}}

/-- Reformulate `strans` without using `extend`. This is useful to not have to prove that the
  arguments to `Œ≥` lie in `I` after this. -/
lemma strans_def {x : X} (Œ≥ Œ≥' : path x x) {t‚ÇÄ t : I} :
  Œ≥.strans Œ≥' t‚ÇÄ t =
  if h : t ‚â§ t‚ÇÄ then Œ≥ ‚ü®t / t‚ÇÄ, unit_interval.div_mem t.2.1 t‚ÇÄ.2.1 h‚ü© else
  Œ≥' ‚ü®(t - t‚ÇÄ) / (1 - t‚ÇÄ), unit_interval.div_mem (sub_nonneg.mpr $ le_of_not_le h)
    (sub_nonneg.mpr t‚ÇÄ.2.2) (sub_le_sub_right t.2.2 t‚ÇÄ)‚ü© :=
by split_ifs; simp [strans, h, ‚Üê extend_extends]

@[simp] lemma strans_zero {x : X} (Œ≥ Œ≥' : path x x) : Œ≥.strans Œ≥' 0 = Œ≥' :=
by { ext t, simp only [strans, path.coe_mk, if_pos, unit_interval.coe_zero,
  div_one, extend_extends',
  unit_interval.nonneg'.le_iff_eq, sub_zero, div_zero, extend_zero, ite_eq_right_iff,
  show (t : ‚Ñù) = 0 ‚Üî t = 0, from (@subtype.ext_iff _ _ t 0).symm, path.source, eq_self_iff_true,
  implies_true_iff] {contextual := tt} }

@[simp] lemma strans_one {x : X} (Œ≥ Œ≥' : path x x) : Œ≥.strans Œ≥' 1 = Œ≥ :=
by { ext t, simp only [strans, unit_interval.le_one', path.coe_mk, if_pos, div_one,
  extend_extends', unit_interval.coe_one] }

@[simp] lemma strans_of_ge {x : X} (Œ≥ Œ≥' : path x x) {t‚ÇÄ t : I} (h : t‚ÇÄ ‚â§ t) :
  Œ≥.strans Œ≥' t‚ÇÄ t = Œ≥'.extend ((t - t‚ÇÄ) / (1 - t‚ÇÄ)) :=
begin
  simp only [path.coe_mk, path.strans, ite_eq_right_iff],
  intro h2, obtain rfl := le_antisymm h h2, simp
end

@[simp] lemma strans_self {x : X} (Œ≥ Œ≥' : path x x) (t‚ÇÄ : I) : Œ≥.strans Œ≥' t‚ÇÄ t‚ÇÄ = x :=
by { simp only [strans, path.coe_mk, extend_div_self, if_pos, le_rfl], }

@[simp] lemma refl_strans_refl {x : X} {t‚ÇÄ : I} : (refl x).strans (refl x) t‚ÇÄ = refl x :=
by { ext s, simp [strans] }

lemma subset_range_strans_left {x : X} {Œ≥ Œ≥' : path x x} {t‚ÇÄ : I} (h : t‚ÇÄ ‚â† 0) :
  range Œ≥ ‚äÜ range (Œ≥.strans Œ≥' t‚ÇÄ) :=
by { rintro _ ‚ü®t, rfl‚ü©, use t * t‚ÇÄ,
  simp [strans, unit_interval.mul_le_right, unit_interval.coe_ne_zero.mpr h] }

lemma subset_range_strans_right {x : X} {Œ≥ Œ≥' : path x x} {t‚ÇÄ : I} (h : t‚ÇÄ ‚â† 1) :
  range Œ≥' ‚äÜ range (Œ≥.strans Œ≥' t‚ÇÄ) :=
begin
  rintro _ ‚ü®t, rfl‚ü©,
  have := mul_nonneg t.2.1 (sub_nonneg.mpr t‚ÇÄ.2.2),
  let t' : I := ‚ü®t‚ÇÄ + t * (1 - t‚ÇÄ), add_nonneg t‚ÇÄ.2.1 this, by { rw [add_comm, ‚Üê le_sub_iff_add_le],
    refine (mul_le_mul_of_nonneg_right t.2.2 $ sub_nonneg.mpr t‚ÇÄ.2.2).trans_eq (one_mul _) }‚ü©,
  have h2 : t‚ÇÄ ‚â§ t' := le_add_of_nonneg_right this,
  have h3 := sub_ne_zero.mpr (unit_interval.coe_ne_one.mpr h).symm,
  use t',
  simp [h2, unit_interval.coe_ne_one.mpr h, h3],
end

lemma range_strans_subset {x : X} {Œ≥ Œ≥' : path x x} {t‚ÇÄ : I} :
  range (Œ≥.strans Œ≥' t‚ÇÄ) ‚äÜ range Œ≥ ‚à™ range Œ≥' :=
begin
  rintro _ ‚ü®t, rfl‚ü©,
  by_cases h : t ‚â§ t‚ÇÄ,
  { rw [strans_def, dif_pos h], exact or.inl (mem_range_self _) },
  { rw [strans_def, dif_neg h], exact or.inr (mem_range_self _) }
end

-- this lemma is easier if we reorder/reassociate the arguments
lemma _root_.continuous.path_strans {X Y : Type*} [uniform_space X] [separated_space X]
  [locally_compact_space X] [uniform_space Y] {f : X ‚Üí Y} {t : X ‚Üí I} {s : X ‚Üí I}
  {Œ≥ Œ≥' : ‚àÄ x, path (f x) (f x)}
  (hŒ≥ : continuous ‚ÜøŒ≥)
  (hŒ≥' : continuous ‚ÜøŒ≥')
  (hŒ≥0 : ‚àÄ ‚¶Éx s‚¶Ñ, t x = 0 ‚Üí Œ≥ x s = f x)
  (hŒ≥'1 : ‚àÄ ‚¶Éx s‚¶Ñ, t x = 1 ‚Üí Œ≥' x s = f x)
  (ht : continuous t)
  (hs : continuous s) :
  continuous (Œª x, strans (Œ≥ x) (Œ≥' x) (t x) (s x)) :=
begin
  have hŒ≥0 : ‚àÄ {x‚ÇÄ}, t x‚ÇÄ = 0 ‚Üí tendsto_uniformly (Œª x, Œ≥ x) (Œª _, f x‚ÇÄ) (ùìù x‚ÇÄ),
  { intros x‚ÇÄ hx‚ÇÄ, convert continuous.tendsto_uniformly (Œª x, Œ≥ x) hŒ≥ _,
    ext t, rw [hŒ≥0 hx‚ÇÄ] },
  have hŒ≥'1 : ‚àÄ {x‚ÇÄ}, t x‚ÇÄ = 1 ‚Üí tendsto_uniformly (Œª x, Œ≥' x) (Œª _, f x‚ÇÄ) (ùìù x‚ÇÄ),
  { intros x‚ÇÄ hx‚ÇÄ, convert continuous.tendsto_uniformly (Œª x, Œ≥' x) hŒ≥' _,
    ext t, rw [hŒ≥'1 hx‚ÇÄ] },
  refine continuous.if_le _ _ hs ht _,
  { rw [continuous_iff_continuous_at],
    intro x,
    refine (continuous_subtype_coe.comp hs).continuous_at.comp_div_cases (Œª x s, (Œ≥ x).extend s)
      (continuous_subtype_coe.comp ht).continuous_at _ _,
    { intro h,
      refine continuous_at.path_extend _ _ continuous_at_snd,
      exact hŒ≥.continuous_at.comp (continuous_at_fst.fst.prod continuous_at_snd) },
    { intro h,
      have ht : t x = 0 := subtype.ext h,
      apply filter.tendsto.path_extend,
      dsimp only, rw [(proj_Icc_surjective _).filter_map_top, extend_zero],
      refine tendsto_prod_top_iff.mpr (hŒ≥0 ht) } },
  { rw [continuous_iff_continuous_at],
    intro x,
    refine ((continuous_subtype_coe.comp hs).sub (continuous_subtype_coe.comp ht))
      .continuous_at.comp_div_cases (Œª x s, (Œ≥' x).extend s)
      (continuous_const.sub $ continuous_subtype_coe.comp ht).continuous_at _ _,
    { intro h,
      refine continuous_at.path_extend _ _ continuous_at_snd,
      exact hŒ≥'.continuous_at.comp (continuous_at_fst.fst.prod continuous_at_snd) },
    { intro h,
      have ht : t x = 1 := subtype.ext (sub_eq_zero.mp h).symm,
      apply filter.tendsto.path_extend,
      dsimp only, rw [(proj_Icc_surjective _).filter_map_top, extend_zero],
      refine tendsto_prod_top_iff.mpr (hŒ≥'1 ht) } },
  { rintro x h, rw [h, sub_self, zero_div, extend_div_self, extend_zero] },
end

end path
