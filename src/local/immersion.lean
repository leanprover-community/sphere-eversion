import to_mathlib.geometry.manifold.sphere
import local.h_principle
-- import global.twist_one_jet_sec
-- maybe parametric global
import global.rotation
import interactive_expr
set_option trace.filter_inst_type true

/-!
This is a stop-gap file to prove sphere eversion from the local verson of the h-principle.
Contents:
parametricity
-/
noncomputable theory

open metric finite_dimensional set function rel_loc
open_locale topological_space

section general

section parametric_h_principle


variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
          {F : Type*} [normed_add_comm_group F] [normed_space ‚Ñù F] [measurable_space F] [borel_space F]
          [finite_dimensional ‚Ñù F]
          {G : Type*} [normed_add_comm_group G] [normed_space ‚Ñù G]

variables [finite_dimensional ‚Ñù E] [finite_dimensional ‚Ñù F]

variables {R : rel_loc E F} (h_op: is_open R) (h_ample: R.is_ample) (L : landscape E)
variables {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)

include h_op h_ample Œµ_pos

/- not the full local h-principle sphere eversion,
but just a homotopy of solutions from a homotopy of formal solutions
We don't use the `L.C` in the statement, since we want a set in `‚Ñù`, not in `E`. -/
lemma rel_loc.htpy_formal_sol.exists_sol (ùìï : R.htpy_formal_sol) (C : set ‚Ñù) (hC : is_closed C)
  (h_hol : ‚àÄ·∂† t near C, ‚àÄ x, (ùìï t).is_holonomic_at x) :
  ‚àÉ f : ‚Ñù ‚Üí E ‚Üí F,
    (ùíû ‚àû $ uncurry f) ‚àß
    (‚àÄ·∂† t near C, ‚àÄ x, f t x = ùìï.f t x) ‚àß
    (‚àÄ x, x ‚àâ L.K‚ÇÅ ‚Üí ‚àÄ t, f t x = ùìï.f t x) ‚àß
    (‚àÄ·∂† x near L.K‚ÇÄ, ‚àÄ t, ‚à•f t x - ùìï.f t x‚à• ‚â§ Œµ) ‚àß
    (‚àÄ·∂† x near L.K‚ÇÄ, ‚àÄ t, (x, f t x, D (f t) x) ‚àà R) :=
begin
  sorry
end

end parametric_h_principle

variables
{E : Type*} [inner_product_space ‚Ñù E]
{E' : Type*} [inner_product_space ‚Ñù E']
{F : Type*} [inner_product_space ‚Ñù F]


/-- A map between vector spaces is a immersion when viewed as a map on the sphere, when its
derivative at `x` near the sphere is injective of the orthogonal complement of `x`
(the tangent space to the sphere).
-/
def sphere_immersion (f : E ‚Üí E') : Prop :=
‚àÄ·∂† x in ùìùÀ¢ (sphere (0 : E) 1), inj_on (D f x) (submodule.span ‚Ñù ({x} : set E))·óÆ

variables (E E')
/-- The relation of immersions for maps between two manifolds. -/
def loc_immersion_rel : rel_loc E E' :=
{w | w.1 ‚â† 0 ‚Üí inj_on w.2.2 (submodule.span ‚Ñù ({w.1} : set E))·óÆ } -- how do we deal exactly with 0?

variables {E E'}

lemma sphere_immersion_iff (f : E ‚Üí E') :
  sphere_immersion f ‚Üî ‚àÄ·∂† x in ùìùÀ¢ (sphere (0 : E) 1), (x, f x, fderiv ‚Ñù f x) ‚àà loc_immersion_rel E E' :=
sorry --by simp_rw [sphere_immersion, loc_immersion_rel, mem_set_of]

variables [finite_dimensional ‚Ñù E] [finite_dimensional ‚Ñù E']

lemma immersion_rel_open :
  is_open (loc_immersion_rel E E') :=
begin
  sorry
  -- simp_rw [charted_space.is_open_iff HJ (immersion_rel I M I' M'), chart_at_image_immersion_rel_eq],
  -- refine Œª œÉ, (œàJ œÉ).open_target.inter _,
  -- convert is_open_univ.prod continuous_linear_map.is_open_injective,
  -- { ext, simp, },
  -- { apply_instance, },
  -- { apply_instance, },
end

lemma immersion_rel_ample (h : finrank ‚Ñù E ‚â§ finrank ‚Ñù E') :
  (loc_immersion_rel E E').is_ample :=
begin
  sorry
  -- rw [rel_mfld.ample_iff],
  -- rintros ‚ü®‚ü®m, m'‚ü©, œÜ : tangent_space I m ‚ÜíL[‚Ñù] tangent_space I' m'‚ü©
  --         (p : dual_pair' (tangent_space I m)) (hœÜ : injective œÜ),
  -- haveI : finite_dimensional ‚Ñù (tangent_space I m) := (by apply_instance : finite_dimensional ‚Ñù E),
  -- have hcodim := p.two_le_rank_of_rank_lt_rank h œÜ,
  -- rw [immersion_rel_slice_eq I I' hœÜ],
  -- exact ample_of_two_le_codim hcodim,
end

end general

section sphere_eversion

variables (E : Type*) [inner_product_space ‚Ñù E] {n : ‚Ñï} [fact (finrank ‚Ñù E = 3)]

local notation `ùïä¬≤` := sphere (0 : E) 1

/- The relation of immersion of a two-sphere into its ambient Euclidean space. -/
local notation `ùì°_imm` := loc_immersion_rel E E

section preparation

variables [finite_dimensional ‚Ñù E] -- no way of inferring this from the `fact`

def sphere_landscape : landscape E :=
{ C := ‚àÖ,
  K‚ÇÄ := ùïä¬≤,
  K‚ÇÅ := closed_ball 0 2,
  hC := is_closed_empty,
  hK‚ÇÄ := is_compact_sphere 0 1,
  hK‚ÇÅ := is_compact_closed_ball 0 2,
  h‚ÇÄ‚ÇÅ := sphere_subset_closed_ball.trans $
    (closed_ball_subset_ball $ show (1 : ‚Ñù) < 2, by norm_num).trans
    (interior_closed_ball _ (show (2 : ‚Ñù) ‚â† 0, by norm_num)).symm.subset }

lemma is_closed_pair : is_closed ({0, 1} : set ‚Ñù) :=
(by simp : ({0, 1} : set ‚Ñù).finite).is_closed

lemma smooth_bs : ùíû ‚àû (Œª p : ‚Ñù √ó E, ((1-p.1) ‚Ä¢ p.2 + p.1 ‚Ä¢ (-p.2) : E)) :=
begin
  sorry
  -- refine (cont_mdiff.smul _ _).add (cont_mdiff_fst.smul _),
  -- { exact (cont_diff_const.sub cont_diff_id).cont_mdiff.comp cont_mdiff_fst },
  -- { exact cont_mdiff_coe_sphere.comp cont_mdiff_snd },
  -- { exact (cont_diff_neg.cont_mdiff.comp cont_mdiff_coe_sphere).comp cont_mdiff_snd },
end

variables {E} (œâ : orientation ‚Ñù E (fin 3))

include œâ
def formal_eversion_aux : htpy_jet_sec E E :=
sorry
-- family_join
--   (smooth_bs E) $
--   family_twist
--     (drop (one_jet_ext_sec ‚ü®(coe : ùïä¬≤ ‚Üí E), cont_mdiff_coe_sphere‚ü©))
--     (Œª p : ‚Ñù √ó ùïä¬≤, rot_aux œâ.volume_form (p.1, p.2))
--     begin
--       intros p,
--       have : smooth_at (ùìò(‚Ñù, ‚Ñù √ó E)) ùìò(‚Ñù, E ‚ÜíL[‚Ñù] E) (rot_aux œâ.volume_form) (p.1, p.2),
--       { rw ‚Üê rot_eq_aux,
--         refine (cont_diff_rot œâ.volume_form _).cont_mdiff_at,
--         exact ne_zero_of_mem_unit_sphere p.2 },
--       refine this.comp p (smooth.smooth_at _),
--       exact smooth_fst.prod_mk (cont_mdiff_coe_sphere.comp smooth_snd),
--     end

/-- A formal eversion of a two-sphere into its ambient Euclidean space. -/
def formal_eversion : htpy_formal_sol ùì°_imm :=
{ is_sol := begin
    sorry
    -- intros t x,
    -- let s : tangent_space (ùì° 2) x ‚ÜíL[‚Ñù] E := mfderiv (ùì° 2) ùìò(‚Ñù, E) (Œª y : ùïä¬≤, (y:E)) x,
    -- change injective (rot_aux œâ.volume_form (t, x) ‚àò s),
    -- have : set.univ.inj_on s,
    -- { rw ‚Üê set.injective_iff_inj_on_univ,
    --   exact mfderiv_coe_sphere_injective E x },
    -- rw set.injective_iff_inj_on_univ,
    -- refine set.inj_on.comp _ this (set.maps_to_range _ _),
    -- rw [‚Üê continuous_linear_map.range_coe, range_mfderiv_coe_sphere E, ‚Üê rot_eq_aux],
    -- exact œâ.inj_on_rot t x,
  end,
  .. formal_eversion_aux œâ }

lemma formal_eversion_zero (x : E) : (formal_eversion œâ).f 0 x = x :=
sorry -- show (1-0 : ‚Ñù) ‚Ä¢ (x : E) + (0 : ‚Ñù) ‚Ä¢ (-x : E) = x, by simp

lemma formal_eversion_one (x : E) : (formal_eversion œâ).f 1 x = -x :=
sorry -- show (1-1 : ‚Ñù) ‚Ä¢ (x : E) + (1 : ‚Ñù) ‚Ä¢ (-x : E) = -x, by simp

lemma formal_eversion_hol_at_zero {x : E} :
  (formal_eversion œâ 0).is_holonomic_at x :=
begin
  sorry
  -- change mfderiv (ùì° 2) ùìò(‚Ñù, E) (Œª y : ùïä¬≤, ((1:‚Ñù) - 0) ‚Ä¢ (y:E) + (0:‚Ñù) ‚Ä¢ -y) x
  --   = (rot_aux œâ.volume_form (0, x)).comp (mfderiv (ùì° 2) ùìò(‚Ñù, E) (Œª y : ùïä¬≤, (y:E)) x),
  -- simp only [‚Üêrot_eq_aux, rot_zero, continuous_linear_map.id_comp],
  -- congr,
  -- ext y,
  -- simp,
end

lemma formal_eversion_hol_at_one {x : E} :
  (formal_eversion œâ 1).is_holonomic_at x :=
begin
  sorry
  -- change mfderiv (ùì° 2) ùìò(‚Ñù, E) (Œª y : ùïä¬≤, ((1:‚Ñù) - 1) ‚Ä¢ (y:E) + (1:‚Ñù) ‚Ä¢ -y) x
  --   = (rot_aux œâ.volume_form (1, x)).comp (mfderiv (ùì° 2) ùìò(‚Ñù, E) (Œª y : ùïä¬≤, (y:E)) x),
  -- transitivity mfderiv (ùì° 2) ùìò(‚Ñù, E) (-(Œª y : ùïä¬≤, (y:E))) x,
  -- { congr' 2,
  --   ext y,
  --   simp, },
  -- ext v,
  -- simp only [mfderiv_neg, ‚Üêrot_eq_aux, continuous_linear_map.coe_comp', comp_app,
  --   continuous_linear_map.neg_apply],
  -- rw rot_one,
  -- convert continuous_linear_map.mem_range_self _ _,
  -- rw range_mfderiv_coe_sphere E,
end

lemma formal_eversion_hol_near_zero_one :
  ‚àÄ·∂† (s : ‚Ñù) near {0, 1}, ‚àÄ x : E, (formal_eversion œâ s).is_holonomic_at x :=
sorry

end preparation

theorem sphere_eversion_of_loc (E : Type*) [inner_product_space ‚Ñù E] [fact (finrank ‚Ñù E = 3)] :
  ‚àÉ f : ‚Ñù ‚Üí E ‚Üí E,
  (ùíû ‚àû (uncurry f)) ‚àß
  (f 0 = Œª x, x) ‚àß
  (f 1 = Œª x, -x) ‚àß
  ‚àÄ t, sphere_immersion (f t) :=
begin
  classical,
  borelize E,
  have rankE := fact.out (finrank ‚Ñù E = 3),
  haveI : finite_dimensional ‚Ñù E := finite_dimensional_of_finrank_eq_succ rankE,
  let œâ : orientation ‚Ñù E (fin 3) :=
    (fin_std_orthonormal_basis (fact.out _ : finrank ‚Ñù E = 3)).to_basis.orientation,
  have ineq_rank : finrank ‚Ñù (euclidean_space ‚Ñù (fin 2)) < finrank ‚Ñù E := by simp [rankE],
  let Œµ : ùïä¬≤ ‚Üí ‚Ñù := Œª x, 1,
  have hŒµ_pos : ‚àÄ x, 0 < Œµ x := Œª x, zero_lt_one,
  have hŒµ_cont : continuous Œµ := continuous_const,
  haveI : nontrivial E := nontrivial_of_finrank_eq_succ (fact.out _ : finrank ‚Ñù E = 3),
  haveI : nonempty ‚Ü•(sphere 0 1 : set E) :=
    (normed_space.sphere_nonempty.mpr zero_le_one).to_subtype,
  obtain ‚ü®f, h‚ÇÅ, h‚ÇÇ, -, h‚ÇÑ, h‚ÇÖ‚ü© :=
    (formal_eversion œâ).exists_sol immersion_rel_open (immersion_rel_ample le_rfl)
    (sphere_landscape E) zero_lt_one _ is_closed_pair (formal_eversion_hol_near_zero_one œâ),
  have := h‚ÇÇ.nhds_set_forall_mem,
  refine ‚ü®f, h‚ÇÅ, _, _, _‚ü©,
  { ext x, rw [this 0 (by simp), formal_eversion_zero] },
  { ext x, rw [this 1 (by simp), formal_eversion_one] },
  { sorry }
end

end sphere_eversion
