import data.real.pi
import has_uncurry

open set function finite_dimensional real
open_locale topological_space

lemma real.exists_cos_eq : (Icc (-1) 1 : set ‚Ñù) ‚äÜ real.cos '' Icc 0 (real.pi) :=
by convert intermediate_value_Icc' (le_of_lt real.pi_pos)
  real.continuous_cos.continuous_on; simp only [real.cos_pi, real.cos_zero]

lemma real.cos_range : range cos = (Icc (-1) 1 : set ‚Ñù) :=
begin
  ext,
  split,
  { rintros ‚ü®y, hxy‚ü©,
    exact hxy ‚ñ∏ ‚ü®y.neg_one_le_cos, y.cos_le_one‚ü© },
  { rintros h,
    rcases real.exists_cos_eq h with ‚ü®y, _, hy‚ü©,
    exact ‚ü®y, hy‚ü© }
end

lemma real.sin_range : range sin = (Icc (-1) 1 : set ‚Ñù) :=
begin
  ext,
  split,
  { rintros ‚ü®y, hxy‚ü©,
    exact hxy ‚ñ∏ ‚ü®y.neg_one_le_sin, y.sin_le_one‚ü© },
  { rintros h,
    rcases real.exists_sin_eq h with ‚ü®y, _, hy‚ü©,
    exact ‚ü®y, hy‚ü© }
end

lemma floor_eq_on_Ico (n : ‚Ñ§) : ‚àÄ x ‚àà (Ico n (n+1) : set ‚Ñù), (n : ‚Ñù) = floor x :=
Œª x ‚ü®h‚ÇÄ, h‚ÇÅ‚ü©, by exact_mod_cast (floor_eq_iff.mpr ‚ü®h‚ÇÄ, h‚ÇÅ‚ü©).symm

lemma continuous_on_floor (n : ‚Ñ§) : continuous_on (Œª x, floor x : ‚Ñù ‚Üí ‚Ñù) (Ico n (n+1) : set ‚Ñù) :=
(continuous_on_congr $ floor_eq_on_Ico n).mp continuous_on_const

lemma tendsto_floor_left (n : ‚Ñ§) : filter.tendsto (Œª x, floor x : ‚Ñù ‚Üí ‚Ñù) (ùìù[Iio n] n) (ùìù[Iic (n-1)] (n-1)) :=
begin
  rw ‚Üê nhds_within_Ico_eq_nhds_within_Iio (sub_one_lt (n : ‚Ñù)),
  convert (tendsto_nhds_within_congr $ floor_eq_on_Ico (n-1)) 
    (tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ tendsto_const_nhds 
      (filter.eventually_of_forall (Œª _, mem_Iic.mpr $ le_refl _)));
  norm_cast,
  ring
end

lemma tendsto_floor_left' (n : ‚Ñ§) : filter.tendsto (Œª x, floor x : ‚Ñù ‚Üí ‚Ñù) (ùìù[Iio n] n) (ùìù (n-1)) :=
begin
  rw ‚Üê nhds_within_univ,
  exact tendsto_nhds_within_mono_right (subset_univ _) (tendsto_floor_left n),
end

lemma continuous_on_fract (n : ‚Ñ§) : continuous_on (fract : ‚Ñù ‚Üí ‚Ñù) (Ico n (n+1) : set ‚Ñù) :=
continuous_on_id.sub (continuous_on_floor n)

lemma tendsto_fract_left (n : ‚Ñ§) : filter.tendsto (fract : ‚Ñù ‚Üí ‚Ñù) (ùìù[Iio n] n) (ùìù[Iio 1] 1) :=
begin
  refine tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ _ (filter.eventually_of_forall fract_lt_one),
  convert (tendsto_nhds_within_of_tendsto_nhds filter.tendsto_id).sub (tendsto_floor_left' n),
  norm_cast,
  ring
end

lemma continuous_on.comp_fract {Œ± : Type*} [topological_space Œ±] {f : ‚Ñù ‚Üí Œ±} 
  (h : continuous_on f (Icc 0 1)) (hf : f 0 = f 1) : continuous (f ‚àò fract) :=
begin
  rw continuous_iff_continuous_at,
  intro x,
  by_cases hx : x = floor x,
  { rw [hx,continuous_at_iff_continuous_left'_right', 
        ‚Üê continuous_within_at_Ioo_iff_Ioi (lt_add_one (floor x : ‚Ñù))],
    split,
    { simp only [continuous_within_at, hf, fract_coe, comp_app],
      refine filter.tendsto.comp _ (tendsto_fract_left _), 
      rw ‚Üê nhds_within_Ioo_eq_nhds_within_Iio real.zero_lt_one,
      exact tendsto_nhds_within_mono_left (Ioo_subset_Icc_self) (h 1 ‚ü®zero_le_one, le_refl _‚ü©) },
    { exact (h (fract _) ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©).comp 
        ((continuous_on_fract _ _ (left_mem_Ico.mpr $ lt_add_one _)).mono Ioo_subset_Ico_self) 
        (Œª x hx, ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©) } },
  { have : x ‚àà Ioo (floor x : ‚Ñù) ((floor x : ‚Ñù) + 1),
      from ‚ü®lt_of_le_of_ne (floor_le x) (ne.symm hx), lt_floor_add_one _‚ü©,
    exact ((h _ ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©).comp 
              ((continuous_on_fract _ _ (Ioo_subset_Ico_self this)).mono Ioo_subset_Ico_self)
              (Œª x hx, ‚ü®fract_nonneg _, (fract_lt_one _).le‚ü©)).continuous_at 
            (Ioo_mem_nhds this.1 this.2) }
end