import global.localisation
import local.h_principle

noncomputable theory

open set filter model_with_corners metric
open_locale topological_space manifold

set_option trace.filter_inst_type true

variables
{EM : Type*} [normed_add_comm_group EM] [normed_space ‚Ñù EM] [finite_dimensional ‚Ñù EM]
{HM : Type*} [topological_space HM] {IM : model_with_corners ‚Ñù EM HM} [boundaryless IM]
{M : Type*} [topological_space M] [charted_space HM M] [smooth_manifold_with_corners IM M]
[t2_space M] [locally_compact_space M] [nonempty M] [sigma_compact_space M]

{EX : Type*} [normed_add_comm_group EX] [normed_space ‚Ñù EX] [finite_dimensional ‚Ñù EX]
  [measurable_space EX] [borel_space EX]
{HX : Type*} [topological_space HX] {IX : model_with_corners ‚Ñù EX HX} [model_with_corners.boundaryless IX]
-- note: X is a metric space
{X : Type*} [metric_space X] [charted_space HX X] [smooth_manifold_with_corners IX X]
[locally_compact_space X]
[sigma_compact_space X]
[nonempty X]

lemma filter.eventually.forall {Œ± Œ≤ : Type*} {P : Œ≤ ‚Üí Œ± ‚Üí Prop} {A : filter Œ±}
  (h : ‚àÄ·∂† a in A, ‚àÄ b, P b a) (b : Œ≤) : ‚àÄ·∂† a in A, P b a :=
begin
  rw [filter.eventually, set_of_forall] at h,
  apply mem_of_superset h,
  intros a ha,
  rw [mem_Inter] at ha,
  exact ha b
end

open_locale unit_interval

lemma open_smooth_embedding.improve_htpy_formal_sol
  (œÜ : open_smooth_embedding ùìò(‚Ñù, EM) EM IM M)
  (œà : open_smooth_embedding ùìò(‚Ñù, EX) EX IX X)
  {R : rel_mfld IM M IX X}
  (hRample : R.ample)
  (hRopen : is_open R)
  {A C : set M}
  (hA : is_closed A)
  (hC : is_closed C)
  {Œ¥ : M ‚Üí ‚Ñù}
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x)
  (hŒ¥_cont : continuous Œ¥)
  {F : htpy_formal_sol R}
  (hFt0 : ‚àÄ·∂† t near Iic (0 : ‚Ñù), F t = F 0)
  (hFt1 : ‚àÄ·∂† t near Ici (1 : ‚Ñù), F t = F 1)
  (hF‚ÇÄA : ‚àÄ·∂† x near A, (F 0).is_holonomic_at x)
  (hFF‚ÇÄŒ¥ : ‚àÄ t x, dist ((F t).bs x) ((F 0).bs x) < Œ¥ x)
  (hFœÜœà : ‚àÄ t, (F t).bs '' (range œÜ) ‚äÜ range œà)
  (hFA : ‚àÄ·∂† x near A, ‚àÄ t, F t x = F 0 x)
  (hFC : ‚àÄ·∂† x near C, (F 1).is_holonomic_at x)
  {K‚ÇÄ K‚ÇÅ : set EM}
  (hK‚ÇÄ : is_compact K‚ÇÄ)
  (hK‚ÇÅ : is_compact K‚ÇÅ)
  (hK‚ÇÄK‚ÇÅ : K‚ÇÄ ‚äÜ interior K‚ÇÅ) :
  ‚àÉ F' : htpy_formal_sol R,
    (‚àÄ·∂† t near Iic (0 : ‚Ñù), F' t = F 0) ‚àß
    (‚àÄ·∂† t near Ici (1 : ‚Ñù), F' t = F' 1) ‚àß
    (‚àÄ·∂† x near A, ‚àÄ t, (F' t) x = F 0 x) ‚àß
    (‚àÄ t, ‚àÄ x ‚àâ œÜ '' K‚ÇÅ, F' t x = F t x) ‚àß
    (‚àÄ t x, dist ((F' t).bs x) ((F 0).bs x) < Œ¥ x) ‚àß
    ‚àÄ·∂† x near A ‚à™ (C ‚à™ œÜ '' K‚ÇÄ), (F' 1).is_holonomic_at x :=
begin
  let Rloc : rel_loc EM EX := (R.localize œÜ œà).rel_loc,
  have hRloc_op : is_open Rloc,
  { exact  is_open_of_is_open _ (hRopen.preimage $ one_jet_bundle.continuous_transfer _ _) },
  have hRloc_ample : Rloc.is_ample,
  { exact ample_of_ample _ (hRample.localize _ _) },
  -- TODO: try to be consistent about how to state the hFœÜœà condition
  replace hFœÜœà : ‚àÄ (t : ‚Ñù), range ((F t).bs ‚àò œÜ) ‚äÜ range œà,
  { intro t,
    rw range_comp,
    exact hFœÜœà t },
  let p : chart_pair IM M IX X :=
  { œÜ := œÜ,
    œà := œà,
    K‚ÇÅ := K‚ÇÅ,
    hK‚ÇÅ := hK‚ÇÅ },
  let Œ¥' : M ‚Üí ‚Ñù := Œª x, Œ¥ x - dist ((F 1).bs x) ((F 0).bs x),
  have Œ¥'_pos : ‚àÄ x, 0 < Œ¥' x,
  { intros x,
    exact sub_pos.mpr (hFF‚ÇÄŒ¥ 1 x) },
  have Œ¥'_cont : continuous Œ¥',
  { exact hŒ¥_cont.sub (continuous.dist (F.smooth_bs.continuous.comp (continuous.prod.mk 1))
                                       (F.smooth_bs.continuous.comp (continuous.prod.mk 0))) },
  rcases p.dist_update Œ¥'_pos Œ¥'_cont hFœÜœà with ‚ü®œÑ, œÑ_pos, hœÑ‚ü©,
  let ùìï : Rloc.htpy_formal_sol := F.localize p hFœÜœà,
  have hùìït0 : ‚àÄ·∂† t near Iic (0 : ‚Ñù), ùìï t = ùìï 0,
  { apply hFt0.mono,
    intros t ht,
    exact htpy_formal_sol.localize_eq_of_eq' _ _ _ ht },
  have hùìït1 : ‚àÄ·∂† t near Ici (1 : ‚Ñù), ùìï t = ùìï 1,
  { apply hFt1.mono,
    intros t ht,
    exact htpy_formal_sol.localize_eq_of_eq' _ _ _ ht },
  have hùìï‚ÇÄA :  ‚àÄ·∂† e near œÜ ‚Åª¬π' A, (ùìï 0).is_holonomic_at e ‚àß ‚àÄ t, ùìï t e = ùìï 0 e,
  { rw eventually_nhds_set_iff at hF‚ÇÄA hFA ‚ä¢,
    intros e he,
    rw [œÜ.inducing.nhds_eq_comap, eventually_comap],
    apply ((hF‚ÇÄA _ he).and $ hFA _ he).mono,
    rintros x hx e rfl,
    exact ‚ü®F.is_holonomic_localize p hFœÜœà e 0 hx.1, Œª t, F.localize_eq_of_eq p hFœÜœà (hx.2 t)‚ü© },
  let L : landscape EM :=
  { C := œÜ ‚Åª¬π' C,
    K‚ÇÄ := K‚ÇÄ,
    K‚ÇÅ := K‚ÇÅ,
    hC := hC.preimage œÜ.continuous,
    hK‚ÇÄ := hK‚ÇÄ,
    hK‚ÇÅ := hK‚ÇÅ,
    h‚ÇÄ‚ÇÅ := hK‚ÇÄK‚ÇÅ },
  have hùìïC : ‚àÄ·∂† (x : EM) near L.C, (ùìï 1).is_holonomic_at x,
  { rw eventually_nhds_set_iff at hFC ‚ä¢,
    intros e he,
    rw [œÜ.inducing.nhds_eq_comap, eventually_comap],
    apply (hFC _ he).mono,
    rintros x hx e rfl,
    exact F.is_holonomic_localize p hFœÜœà e 1 hx },
  rcases ùìï.improve hRloc_op hRloc_ample L œÑ_pos (hA.preimage œÜ.continuous) hùìï‚ÇÄA hùìïC hùìït0 hùìït1
    with ‚ü®ùìï', hùìï't0, hùìï't1, hùìï'relA, hùìï'relK‚ÇÅ, hùìï'dist, hùìï'hol‚ü©,
  have hcompat : p.compat F ùìï', from ‚ü®hFœÜœà, hùìï'relK‚ÇÅ‚ü©,
  let F' : htpy_formal_sol R := p.update F ùìï',
  have hF'relK‚ÇÅ : ‚àÄ t, ‚àÄ x ‚àâ œÜ '' K‚ÇÅ, F' t x = F t x,
  { apply p.update_eq_of_not_mem },
  have hF't0 : ‚àÄ·∂† (t : ‚Ñù) near Iic 0, F' t = F 0,
  { apply (hùìït0.and $ hùìï't0.and hFt0).mono,
    rintros t ‚ü®ht, ht', ht''‚ü©,
    rw p.update_eq_of_forall F ùìï' (Œª _, _),
    exact ht'',
    rw [ht', ‚Üê ht], refl },
  have hF't1 : ‚àÄ·∂† (t : ‚Ñù) near Ici 1, F' t = F' 1,
  { -- TODO: this proofs should use more congruence lemmas
    apply (hFt1.and hùìï't1).mono,
    rintros t ‚ü®ht, ht'‚ü©,
    dsimp only [F', chart_pair.update],
    split_ifs,
    apply formal_sol.coe_inj,
    intros x,
    rcases classical.em (x ‚àà range p.œÜ) with ‚ü®e, rfl‚ü©|hx,
    { simp only [open_smooth_embedding.update_htpy_formal_sol_apply_image],
      rw rel_loc.htpy_formal_sol.unloc_congr,
      rw ht' },
    { simp only [hx, open_smooth_embedding.update_htpy_formal_sol_apply_of_not_mem, not_false_iff],
      rw ht } },
  refine ‚ü®p.update F ùìï', hF't0, hF't1, _, _, _, _‚ü©,
  { intros t,
    apply œÜ.forall_near hK‚ÇÅ hùìï'relA,
    { apply hFA.mono,
      intros x hx hx' t,
      rw hF'relK‚ÇÅ t x hx',
      exact hx t },
    { intros e he t,
      rw p.update_eq_of_eq _ _ hcompat,
      exact he t } },
  { exact hF'relK‚ÇÅ },
  { have key : ‚àÄ (e ‚àà K‚ÇÅ) (t ‚àà I), dist ((F' t).bs (œÜ e)) ((F 0).bs (œÜ e)) < Œ¥ (œÜ e),
    { intros e he t ht,
      rcases hùìï'dist e t with ‚ü®t', ht'‚ü©|h,
      { convert hFF‚ÇÄŒ¥ t' (œÜ e) using 2,
        change ((p.update F ùìï') t _).1.2 = _,
        rw p.update_eq_of_eq F ùìï' hcompat ht',
        refl, },
      calc dist ((F' t).bs (œÜ e)) ((F 0).bs (œÜ e)) ‚â§ dist ((F' t).bs (œÜ e)) ((F 1).bs (œÜ e)) + dist ((F 1).bs (œÜ e)) ((F 0).bs (œÜ e)) : dist_triangle _ _ _
      ... < Œ¥' (œÜ e) + dist ((F 1).bs (œÜ e)) ((F 0).bs (œÜ e)) : add_lt_add_right (hœÑ hcompat e he t ht h) _
      ... = (Œ¥ (œÜ e) - dist ((F 1).bs (œÜ e)) ((F 0).bs (œÜ e))) + dist ((F 1).bs (œÜ e)) ((F 0).bs (œÜ e)) : rfl
      ... = Œ¥ (œÜ e) : sub_add_cancel _ _ },
    intros t x,
    rcases classical.em (x ‚àà œÜ '' K‚ÇÅ) with ‚ü®e, he, rfl‚ü©|hx,
    { by_cases ht : t ‚àà (Icc 0 1 : set ‚Ñù),
      { exact key e he t ht },
      { rw [mem_Icc, not_and_distrib, not_le, not_le] at ht,
        cases ht with ht ht,
        { erw [hF't0.on_set t ht.le, dist_self],
          apply hŒ¥_pos },
        { rw [hF't1.on_set t ht.le],
          exact key e he _ unit_interval.one_mem } } },
    { convert hFF‚ÇÄŒ¥ t x using 2,
      change ((p.update F ùìï') t x).1.2 = _,
      rw p.update_eq_of_not_mem F ùìï' hx,
      refl } },
  { rw [show L.K‚ÇÄ = K‚ÇÄ, from rfl, ‚Üê preimage_image_eq K‚ÇÄ œÜ.injective, ‚Üê preimage_union,
        ‚Üê preimage_union] at hùìï'hol,
    apply œÜ.forall_near hK‚ÇÅ hùìï'hol, clear hùìï'hol,
    rw [nhds_set_union, eventually_sup],
    split,
    { apply ((hFA.eventually_nhds_set).and hF‚ÇÄA).mono,
      rintros x ‚ü®a, b‚ü© c,
      apply (p.update_is_holonomic_at_iff' c hcompat).mpr,
      apply b.congr,
      apply a.mono,
      intros x hx,
      exact (hx 1).symm },
    { apply filter.eventually.union,
      { apply hFC.mono,
        intros x hx hx',
        apply hx.congr,
        symmetry,
        have : ‚àÄ·∂† y in ùìù x, y ‚àà (œÜ '' K‚ÇÅ)·∂ú,
        { exact is_open_iff_mem_nhds.mp (hK‚ÇÅ.image œÜ.continuous).is_closed.is_open_compl x hx' },
        apply this.mono,
        exact hF'relK‚ÇÅ _ },
      { have : ‚àÄ·∂† x near œÜ '' K‚ÇÄ, x ‚àà p.œÜ '' K‚ÇÅ,
      { suffices : ‚àÄ·∂† x near œÜ '' K‚ÇÄ, x ‚àà interior (p.œÜ '' K‚ÇÅ), from this.mono interior_subset,
        apply is_open_interior.forall_near_mem_of_subset,
        exact (image_subset œÜ hK‚ÇÄK‚ÇÅ).trans (œÜ.open_map.image_interior_subset K‚ÇÅ) },
        apply this.mono,
        exact Œª a hx hx', (hx' hx).elim } },
    { exact Œª _, (p.update_is_holonomic_at_iff hcompat).mpr } },
end

lemma open_smooth_embedding.improve_formal_sol
  (œÜ : open_smooth_embedding ùìò(‚Ñù, EM) EM IM M)
  (œà : open_smooth_embedding ùìò(‚Ñù, EX) EX IX X)
  {R : rel_mfld IM M IX X}
  (hRample : R.ample)
  (hRopen : is_open R)
  {C : set M}
  (hC : is_closed C)
  {Œ¥ : M ‚Üí ‚Ñù}
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x)
  (hŒ¥_cont : continuous Œ¥)
  {F : formal_sol R}
  (hFœÜœà : F.bs '' (range œÜ) ‚äÜ range œà)
  (hFC : ‚àÄ·∂† x near C, F.is_holonomic_at x)
  {K‚ÇÄ K‚ÇÅ : set EM}
  (hK‚ÇÄ : is_compact K‚ÇÄ)
  (hK‚ÇÅ : is_compact K‚ÇÅ)
  (hK‚ÇÄK‚ÇÅ : K‚ÇÄ ‚äÜ interior K‚ÇÅ) :
  ‚àÉ F' : htpy_formal_sol R,
    (‚àÄ·∂† t near Iic (0 : ‚Ñù), F' t = F) ‚àß
    (‚àÄ·∂† t near Ici (1 : ‚Ñù), F' t = F' 1) ‚àß
    (‚àÄ·∂† x near C, ‚àÄ t, F' t x = F x) ‚àß
    (‚àÄ t, ‚àÄ x ‚àâ œÜ '' K‚ÇÅ, F' t x = F x) ‚àß
    (‚àÄ t x, dist ((F' t).bs x) (F.bs x) < Œ¥ x) ‚àß
    ‚àÄ·∂† x near C ‚à™ œÜ '' K‚ÇÄ, (F' 1).is_holonomic_at x :=
begin
  let Rloc : rel_loc EM EX := (R.localize œÜ œà).rel_loc,
  have hRloc_op : is_open Rloc,
  { exact  is_open_of_is_open _ (hRopen.preimage $ one_jet_bundle.continuous_transfer _ _) },
  have hRloc_ample : Rloc.is_ample,
  { exact ample_of_ample _ (hRample.localize _ _) },
  -- TODO: try to be consistent about how to state the hFœÜœà condition
  replace hFœÜœà : range (F.bs ‚àò œÜ) ‚äÜ range œà,
  { rw range_comp,
    exact hFœÜœà },
  let p : chart_pair IM M IX X :=
  { œÜ := œÜ,
    œà := œà,
    K‚ÇÅ := K‚ÇÅ,
    hK‚ÇÅ := hK‚ÇÅ },
  rcases p.dist_update' hŒ¥_pos hŒ¥_cont hFœÜœà with ‚ü®œÑ, œÑ_pos, hœÑ‚ü©,
  let ùìï := F.localize p hFœÜœà,
  let L : landscape EM :=
  { C := œÜ ‚Åª¬π' C,
    K‚ÇÄ := K‚ÇÄ,
    K‚ÇÅ := K‚ÇÅ,
    hC := hC.preimage œÜ.continuous,
    hK‚ÇÄ := hK‚ÇÄ,
    hK‚ÇÅ := hK‚ÇÅ,
    h‚ÇÄ‚ÇÅ := hK‚ÇÄK‚ÇÅ },
  have hùìïC : ‚àÄ·∂† (x : EM) near L.C, ùìï.is_holonomic_at x,
  sorry { rw eventually_nhds_set_iff at hFC ‚ä¢,
    intros e he,
    rw [œÜ.inducing.nhds_eq_comap, eventually_comap],
    apply (hFC _ he).mono,
    rintros x hx e rfl,
    exact F.is_holonomic_localize p hFœÜœà e hx },
  rcases ùìï.improve_htpy' hRloc_op hRloc_ample L œÑ_pos hùìïC
    with ‚ü®ùìï', hùìï't0, hùìï't1, hùìï'relC, hùìï'relK‚ÇÅ, hùìï'dist, hùìï'hol‚ü©,
  have hcompat : p.compat' F ùìï', sorry, --from ‚ü®hFœÜœà, hùìï'relK‚ÇÅ‚ü©,
  let F' : htpy_formal_sol R := p.mk_htpy F ùìï',
  have hF'relK‚ÇÅ : ‚àÄ t, ‚àÄ x ‚àâ œÜ '' K‚ÇÅ, F' t x = F x,
  {
    sorry },
  have hF't0 : ‚àÄ·∂† (t : ‚Ñù) near Iic 0, F' t = F,
  /-FIXME-/sorry { apply (hùìït0.and $ hùìï't0.and hFt0).mono,
    rintros t ‚ü®ht, ht', ht''‚ü©,
    rw p.update_eq_of_forall F ùìï' (Œª _, _),
    exact ht'',
    rw [ht', ‚Üê ht], refl },
  have hF't1 : ‚àÄ·∂† (t : ‚Ñù) near Ici 1, F' t = F' 1,
  /-FIXME-/sorry { -- TODO: this proofs should use more congruence lemmas
    apply (hFt1.and hùìï't1).mono,
    rintros t ‚ü®ht, ht'‚ü©,
    dsimp only [F', chart_pair.update],
    split_ifs,
    apply formal_sol.coe_inj,
    intros x,
    rcases classical.em (x ‚àà range p.œÜ) with ‚ü®e, rfl‚ü©|hx,
    { simp only [open_smooth_embedding.update_htpy_formal_sol_apply_image],
      rw rel_loc.htpy_formal_sol.unloc_congr,
      rw ht' },
    { simp only [hx, open_smooth_embedding.update_htpy_formal_sol_apply_of_not_mem, not_false_iff],
      rw ht } },
  sorry /- refine ‚ü®F', hF't0, hF't1, _, _, _, _‚ü©,
  { apply œÜ.forall_near hK‚ÇÅ hùìï'relC (eventually_of_forall $ Œª x hx t, hF'relK‚ÇÅ t x hx),
    { intros e he t,
      rw p.mk_htpy_eq_of_eq _ _ hcompat,
      exact he t } },
  { exact hF'relK‚ÇÅ },
  { intros t x,
    rcases classical.em (x ‚àà œÜ '' K‚ÇÅ) with ‚ü®e, he, rfl‚ü©|hx,
    { by_cases ht : t ‚àà (Icc 0 1 : set ‚Ñù),
      { exact hœÑ e he t ht (hùìï'dist e t) },
      { rw [mem_Icc, not_and_distrib, not_le, not_le] at ht,
        cases ht with ht ht,
        { erw [hF't0.on_set t ht.le, dist_self],
          apply hŒ¥_pos },
        { rw [hF't1.on_set t ht.le],
          exact hœÑ e he 1 (right_mem_Icc.mpr zero_le_one) (hùìï'dist e 1) } } },
    { change dist ((F' t x).1.2) (F.bs x) < Œ¥ x,
      erw [p.mk_htpy_eq_of_not_mem _ _ hx, dist_self],
      apply hŒ¥_pos } },
  { have hùìï'holC : ‚àÄ·∂† (x : EM) near L.C, (ùìï' 1).is_holonomic_at x,
    { apply (hùìï'relC.eventually_nhds_set.and hùìïC).mono,
      rintros x ‚ü®hx, hx'‚ü©,
      exact jet_sec.is_holonomic_at.congr hx' (hx.mono $ Œª x' hx', (hx' 1).symm) },
    have : ‚àÄ·∂† x near œÜ ‚Åª¬π' C  ‚à™ K‚ÇÄ, (ùìï' 1).is_holonomic_at x := hùìï'holC.union hùìï'hol,
    rw [‚Üê preimage_image_eq K‚ÇÄ œÜ.injective, ‚Üê preimage_union] at this,
    apply œÜ.forall_near hK‚ÇÅ this,
    { apply filter.eventually.union,
      { apply hFC.mono,
        intros x hx hx',
        apply hx.congr,
        symmetry,
        have : ‚àÄ·∂† y in ùìù x, y ‚àà (œÜ '' K‚ÇÅ)·∂ú,
        { exact is_open_iff_mem_nhds.mp (hK‚ÇÅ.image œÜ.continuous).is_closed.is_open_compl x hx' },
        apply this.mono,
        exact hF'relK‚ÇÅ _ },
      { have : ‚àÄ·∂† x near œÜ '' K‚ÇÄ, x ‚àà p.œÜ '' K‚ÇÅ,
      { suffices : ‚àÄ·∂† x near œÜ '' K‚ÇÄ, x ‚àà interior (p.œÜ '' K‚ÇÅ), from this.mono interior_subset,
        apply is_open_interior.forall_near_mem_of_subset,
        exact (image_subset œÜ hK‚ÇÄK‚ÇÅ).trans (œÜ.open_map.image_interior_subset K‚ÇÅ) },
        apply this.mono,
        exact Œª a hx hx', (hx' hx).elim } },
    { exact Œª _, (p.mk_htpy_is_holonomic_at_iff hcompat).mpr } }, -/
end
