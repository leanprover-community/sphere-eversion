import global.relation
import global.localisation_data

/-!
# Gromov's theorem

We prove the h-principle for open and ample first order differential relations.
-/

noncomputable theory

open set
open_locale topological_space manifold

variables
{E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
{H : Type*} [topological_space H] {I : model_with_corners ‚Ñù E H} [model_with_corners.boundaryless I]
{M : Type*} [topological_space M] [charted_space H M] [smooth_manifold_with_corners I M]
[t2_space M]
[locally_compact_space M] -- investigate how to deduce this from finite-dimensional
[nonempty M] -- investigate how to remove this
[sigma_compact_space M]

{EX : Type*} [normed_add_comm_group EX] [normed_space ‚Ñù EX]  [finite_dimensional ‚Ñù EX]
{HX : Type*} [topological_space HX] {IX : model_with_corners ‚Ñù EX HX} [model_with_corners.boundaryless IX]
-- note: X is a metric space
{X : Type*} [metric_space X] [charted_space HX X] [smooth_manifold_with_corners IX X]
[locally_compact_space X] -- investigate how to deduce this from finite-dimensional
[sigma_compact_space X]
[nonempty X] -- investigate how to remove this

{R : rel_mfld I M IX X}
{A : set M} {Œµ : M ‚Üí ‚Ñù}

lemma univ_prod_inter_univ_prod {Œ± Œ≤ : Type*} {s t : set Œ≤} :
  (univ : set Œ±) √óÀ¢ s ‚à© (univ : set Œ±) √óÀ¢ t = (univ : set Œ±) √óÀ¢ (s ‚à© t) :=
begin
  ext ‚ü®a, b‚ü©,
  simp
end

@[simp] lemma univ_prod_nonempty_iff {Œ± Œ≤ : Type*} [nonempty Œ±] {s : set Œ≤} :
  ((univ : set Œ±) √óÀ¢ s).nonempty ‚Üî s.nonempty :=
begin
  inhabit Œ±,
  split,
  { rintro ‚ü®‚ü®-, b‚ü©, ‚ü®-, h : b ‚àà s‚ü©‚ü©,
    exact ‚ü®b, h‚ü© },
  { rintro ‚ü®b, h‚ü©,
    exact ‚ü®‚ü®default, b‚ü©, ‚ü®trivial, h‚ü©‚ü© }
end

/- The next two instances are evil but temporary
We need to sort out whether we can drop `encodable` from localisation_data.lean
-/
instance bar (Œπ : Type*) [encodable Œπ] : linear_order Œπ := sorry
instance baz (Œπ : Type*) [encodable Œπ] : indexing Œπ := sorry


/-- The non-parametric version of Gromov's theorem -/
lemma rel_mfld.ample.satisfies_h_principle (h1 : R.ample) (h2 : is_open R)
  (hC‚ÇÇ : is_closed A)
  (hŒµ_pos : ‚àÄ x, 0 < Œµ x) (hŒµ_cont : continuous Œµ) :
  R.satisfies_h_principle A Œµ :=
begin
  intros ùìï‚ÇÄ hùìï‚ÇÄ,
  have cont : continuous ùìï‚ÇÄ.bs,
  {
    sorry },
  let L : localisation_data I IX ùìï‚ÇÄ.bs := std_localisation_data E I EX IX cont,
  letI := L.hŒπ,
  let œÄ : ‚Ñï ‚Üí L.Œπ := indexing.from_nat,
  rcases localisation_stability E I EX IX cont L with ‚ü®Œµ, Œµ_pos, Œµ_cont, hŒµ‚ü©,
  suffices : ‚àÉ F : ‚Ñï ‚Üí htpy_formal_sol R,
    (‚àÄ t, F 0 t = ùìï‚ÇÄ) ‚àß
    (‚àÄ n t, ‚àÄ·∂† x near A, F n t x = ùìï‚ÇÄ x) ‚àß
    (‚àÄ n t x, dist ((F n t).bs x) (ùìï‚ÇÄ.bs x) < Œµ x) ‚àß
    (‚àÄ n, œÄ (n+1) = œÄ n ‚Üí F (n+2) = F (n + 1)) ‚àß
    (‚àÄ n, ‚àÄ x ‚àà ‚ãÉ i < œÄ n, L.œÜ i '' metric.closed_ball (0 : E) 1,
             (F (n+1) 1).to_one_jet_sec.is_holonomic_at x) ‚àß
    (‚àÄ n t, ‚àÄ x ‚àâ range (L.œÜ $ œÄ n), F (n+1) t x = F n t x),
  { rcases this with ‚ü®F, hF‚ÇÄ, hfA, hFŒµ, hFœÄ, hFhol, hFultim‚ü©,
    let FF := Œª n : ‚Ñï, Œª p : ‚Ñù √ó M, F n p.1 p.2,
    have h : ‚àÄ n : ‚Ñï, ‚àÄ x ‚àâ (univ : set ‚Ñù) √óÀ¢ range (L.œÜ $ œÄ n), FF (n+1) x = FF n x,
    sorry { rintros n ‚ü®t, x‚ü© H,
      exact hFultim _ _ _ (Œª hx, H ‚ü®trivial, hx‚ü©) },
    have h' : ‚àÄ (n : ‚Ñï), œÄ (n + 1) = œÄ n ‚Üí FF (n + 2) = FF (n + 1),
    sorry { intros n hn,
      ext1 ‚ü®t, x‚ü©,
      dsimp [FF],
      rw hFœÄ n hn },
    have loc_fin : locally_finite (Œª i : L.Œπ, (univ √óÀ¢ range (L.œÜ i) : set $ ‚Ñù √ó M)),
    sorry { rintros ‚ü®t, x‚ü©,
      rcases L.lf_œÜ x with ‚ü®s, s_in, hs‚ü©,
      refine ‚ü®univ √óÀ¢ s, _, _‚ü©,
      { rw nhds_prod_eq,
        exact filter.prod_mem_prod filter.univ_mem s_in },
      { convert hs,
        ext i,
        simp [univ_prod_inter_univ_prod] } },
    cases loc_fin.exists_forall_eventually_of_indexing h h' with G hG,
    choose n hn using Œª x, (hG x).exists,
    let ùìï : htpy_formal_sol R := {
      bs := Œª t x, (G (t, x)).1.2,
      œï := Œª t x, (G (t, x)).2,
      smooth' := sorry /- begin
        intro x,
        apply ((F (n x)).smooth' x).congr_of_eventually_eq,
        /- The following goal will probably come back
        (Œª (p : ‚Ñù √ó M), one_jet_bundle.mk p.2 (G (p.1, p.2)).1.2 (G (p.1, p.2)).2)
          =·∂†[ùìù x]
         Œª (p : ‚Ñù √ó M), one_jet_bundle.mk p.2 ((F (n x)).bs p.1 p.2) ((F (n x)).œï p.1 p.2)
        -/
        apply (hn x).mono,
        intros p hp,
        dsimp only,
        rw [show (p.1, p.2) = p, from prod.ext rfl rfl, ‚Üê hp],
        refl
      end -/,
      is_sol' := /- begin
        intros t x,
        change one_jet_bundle.mk x (G (t, x)).1.2 (G (t, x)).2 ‚àà R,
        rw ‚Üê (hn (t, x)).eq_of_nhds,
        exact (F (n (t, x))).is_sol' t x,
      end -/sorry },
    refine ‚ü®ùìï, _, _, _, _‚ü©,
    {
      sorry },
    {
      sorry },
    {
      sorry },
    {
      sorry }, },
  sorry
end

variables
{EP : Type*} [normed_add_comm_group EP] [normed_space ‚Ñù EP]  [finite_dimensional ‚Ñù EP]
{HP : Type*} [topological_space HP] {IP : model_with_corners ‚Ñù EP HP} [model_with_corners.boundaryless IP]
{P : Type*} [topological_space P] [charted_space HP P] [smooth_manifold_with_corners IP P]
[locally_compact_space P] -- investigate how to deduce this from finite-dimensional
[sigma_compact_space P]
[t2_space P]
[nonempty P] -- investigate how to remove this
{C‚ÇÅ : set P} {C‚ÇÇ : set M}

/-- **Gromov's Theorem** -/
theorem rel_mfld.ample.satisfies_h_principle_with (h1 : R.ample) (h2 : is_open R)
  (hC‚ÇÅ : is_closed C‚ÇÅ) (hC‚ÇÇ : is_closed C‚ÇÇ)
  (hŒµ_pos : ‚àÄ x, 0 < Œµ x) (hŒµ_cont : continuous Œµ) :
  R.satisfies_h_principle_with IP C‚ÇÅ C‚ÇÇ Œµ :=
begin
  have hŒµ_pos' : ‚àÄ (x : P √ó M), 0 < Œµ x.2 := Œª (x : P √ó M), hŒµ_pos x.snd,
  have hŒµ_cont' : continuous (Œª (x : P √ó M), Œµ x.2) := hŒµ_cont.comp continuous_snd,
  have is_op : is_open (rel_mfld.relativize IP P R) := R.is_open_relativize IP P h2,
  apply rel_mfld.satisfies_h_principle.satisfies_h_principle_with,
  exact (h1.relativize IP P).satisfies_h_principle is_op (hC‚ÇÅ.prod hC‚ÇÇ) hŒµ_pos' hŒµ_cont',
end

variables
{E' : Type*} [normed_add_comm_group E'] [normed_space ‚Ñù E'] [finite_dimensional ‚Ñù E']
{H' : Type*} [topological_space H'] {I' : model_with_corners ‚Ñù E' H'} [model_with_corners.boundaryless I']
{M' : Type*} [topological_space M'] [charted_space H' M'] [smooth_manifold_with_corners I' M']
[locally_compact_space M'] -- investigate how to deduce this from finite-dimensional
[sigma_compact_space M']
[t2_space M']
[nonempty M'] -- investigate how to remove this

include IP

/-- Gromov's Theorem without metric space assumption -/
theorem rel_mfld.ample.satisfies_h_principle_with' {R : rel_mfld I M I' M'}
  (h1 : R.ample) (h2 : is_open R) (hC‚ÇÅ : is_closed C‚ÇÅ) (hC‚ÇÇ : is_closed C‚ÇÇ)
  (hŒµ_pos : ‚àÄ x, 0 < Œµ x) (hŒµ_cont : continuous Œµ) :
  by letI := (@topological_space.metrizable_space_metric _ _
    (manifold_with_corners.metrizable_space I' M')); exact
  R.satisfies_h_principle_with IP C‚ÇÅ C‚ÇÇ Œµ :=
begin
  haveI := (@topological_space.metrizable_space_metric _ _
    (manifold_with_corners.metrizable_space I' M')),
  apply rel_mfld.ample.satisfies_h_principle_with; assumption
end
