import to_mathlib.data.set.prod
import to_mathlib.data.nat.basic
import local.h_principle
import global.parametricity_for_free
import global.localisation

import interactive_expr

/-!
# Gromov's theorem

We prove the h-principle for open and ample first order differential relations.
-/

noncomputable theory

open set filter model_with_corners
open_locale topological_space manifold

variables
{EM : Type*} [normed_add_comm_group EM] [normed_space ‚Ñù EM] [finite_dimensional ‚Ñù EM]
{HM : Type*} [topological_space HM] {IM : model_with_corners ‚Ñù EM HM} [boundaryless IM]
{M : Type*} [topological_space M] [charted_space HM M] [smooth_manifold_with_corners IM M]
[t2_space M]
[locally_compact_space M] -- FIXME: investigate how to deduce this from finite-dimensional
[nonempty M] -- FIXME: investigate how to remove this
[sigma_compact_space M]

{EX : Type*} [normed_add_comm_group EX] [normed_space ‚Ñù EX] [finite_dimensional ‚Ñù EX]
{HX : Type*} [topological_space HX] {IX : model_with_corners ‚Ñù EX HX} [model_with_corners.boundaryless IX]
-- note: X is a metric space
{X : Type*} [metric_space X] [charted_space HX X] [smooth_manifold_with_corners IX X]
[locally_compact_space X] -- FIXME: investigate how to deduce this from finite-dimensional
[sigma_compact_space X]
[nonempty X] -- FIXME: investigate how to remove this

{R : rel_mfld IM M IX X}
{A : set M} {Œ¥ : M ‚Üí ‚Ñù}

set_option trace.filter_inst_type true

lemma rel_mfld.ample.satisfies_h_principle_core
  (hRample : R.ample) (hRopen : is_open R)
  (hA : is_closed A)
  (hŒ¥_pos : ‚àÄ (x : M), 0 < Œ¥ x)
  (hŒ¥_cont : continuous Œ¥)
  (F‚ÇÄ : formal_sol R)
  (hF‚ÇÄA : ‚àÄ·∂† x near A, F‚ÇÄ.is_holonomic_at x)
  (L : localisation_data IM IX F‚ÇÄ.bs) :
  ‚àÉ F : ‚Ñï ‚Üí htpy_formal_sol R, ‚àÄ n : ‚Ñï,
    ((F n 0 = F‚ÇÄ) ‚àß
    (‚àÄ t, ‚àÄ·∂† x near A, F n t x = F‚ÇÄ x) ‚àß
    (‚àÄ t x, dist ((F n t).bs x) (F‚ÇÄ.bs x) < Œ¥ x) ‚àß

    (‚àÄ x ‚àà ‚ãÉ i ‚â§ L.index n, (L.œÜ i) '' metric.closed_ball 0 1,
      ((F n) 1).to_one_jet_sec.is_holonomic_at x)) ‚àß
    ((L.index (n + 1)  = L.index n ‚Üí F (n + 1) = F n) ‚àß
     ‚àÄ t (x ‚àâ range (L.œÜ $ L.index $ n+1)), F (n + 1) t x = F n t x) :=
begin
  classical,
  letI : measurable_space EX := sorry,
  haveI : borel_space EX := sorry,
  have cont_bs : continuous F‚ÇÄ.bs, from F‚ÇÄ.smooth_bs.continuous,
  have := L.Œµ_spec,
  let P : ‚Ñï ‚Üí htpy_formal_sol R ‚Üí Prop := Œª n Fn,
    (Fn 0 = F‚ÇÄ) ‚àß
    (‚àÄ t, ‚àÄ·∂† x near A, Fn t x = F‚ÇÄ x) ‚àß
    (‚àÄ t x, dist ((Fn t).bs x) (F‚ÇÄ.bs x) < Œ¥ x) ‚àß
    (‚àÄ t x, dist ((Fn t).bs x) (F‚ÇÄ.bs x) < L.Œµ x) ‚àß
    (‚àÄ x ‚àà ‚ãÉ i ‚â§ L.index n, (L.œÜ i) '' metric.closed_ball 0 1,
      (Fn 1).is_holonomic_at x),
  let Q : ‚Ñï ‚Üí htpy_formal_sol R ‚Üí htpy_formal_sol R ‚Üí Prop := Œª n Fn Fnp1,
    (L.index (n + 1)  = L.index n ‚Üí Fnp1 = Fn) ‚àß
     ‚àÄ t, ‚àÄ x ‚àâ range (L.œÜ $ L.index $ n+1), Fnp1 t x = Fn t x,
  suffices : ‚àÉ F : ‚Ñï ‚Üí htpy_formal_sol R, ‚àÄ n, P n (F n) ‚àß Q n (F n) (F $ n+1),
  sorry { rcases this with ‚ü®F, hF‚ü©,
    use F,
    intro n,
    cases hF n,
    tauto },
  apply exists_by_induction' P Q,
  { dsimp only [P],
    have Union_eq : ‚àÄ s : L.Œπ ‚Üí set M, (‚ãÉ i ‚â§ L.index 0, s i) = s 0,
    {
      sorry },
    let ùìï‚ÇÄ := L.loc_formal_sol (L.rg_subset_rg 0),
    have : ‚àÄ·∂† (x : EM) near (L.landscape hA 0).C, ùìï‚ÇÄ.is_holonomic_at x,
    {
      sorry },
    let Id := open_smooth_embedding.id ùìò(‚Ñù, ‚Ñù) ‚Ñù,
    have foo := (Id.prod (L.œÜ 0)).smooth_update (L.œàj 0) (Œª p : ‚Ñù √ó M, F‚ÇÄ.bs p.2),
    let œÑ : ‚Ñù √ó M ‚Üí ‚Ñù := Œª p, min (Œ¥ p.2) (L.Œµ p.2),
    have œÑ_pos : ‚àÄ p, 0 < œÑ p, sorry,
    have œÑ_cont : continuous œÑ, sorry,
    have cpct : is_compact ((Icc 0 1 : set ‚Ñù) √óÀ¢ (metric.closed_ball 0 2 : set EM)), sorry,
    have smth : smooth (ùìò(‚Ñù, ‚Ñù).prod IM) IX (Œª (p : ‚Ñù √ó M), F‚ÇÄ.to_one_jet_sec.bs p.snd), sorry,
    have sub : (Œª (p : ‚Ñù √ó M), F‚ÇÄ.bs p.2) '' range (Id.prod (L.œÜ 0)) ‚äÜ range (L.œàj 0), sorry,
    rcases (Id.prod (L.œÜ 0)).dist_update (L.œàj 0) (Œª p : ‚Ñù √ó M, F‚ÇÄ.bs p.2)
      cpct smth sub œÑ_pos œÑ_cont with ‚ü®Œ∑, Œ∑_pos, hŒ∑‚ü©,

    rcases rel_loc.formal_sol.improve_htpy (L.is_open_loc_rel 0 hRopen) (L.is_ample 0 hRample) Œ∑_pos this
      with ‚ü®ùìó, hùìó‚ÇÄ, hùìóC, hùìóK‚ÇÅ, hùìóŒ¥, hùìóK‚ÇÄ‚ü©,
    let H := L.unloc_htpy_formal_sol 0 ùìó,
    refine ‚ü®H, _, _, _, _, _‚ü©,
    sorry { apply L.unloc_loc,
      rw hùìó‚ÇÄ },
    sorry { apply L.foobar _ _ hùìóC,
      apply subset_union_left ((L.œÜ 0) ‚Åª¬π' A) },
    { suffices : ‚àÄ p : ‚Ñù √ó M, dist ((H p.1).bs p.2) (F‚ÇÄ.bs p.2) < min (Œ¥ p.2) (L.Œµ p.2),
      sorry { exact Œª t x, (this (t, x)).trans_le (min_le_left _ _) },
      rintros ‚ü®t, x‚ü©,
      convert hŒ∑ _ _ _ (t, x),
      dsimp,
      all_goals { sorry } },
    {
      sorry },
    sorry { apply L.barbaz' (L.rg_subset_rg 0) _ hùìóK‚ÇÄ,
      dsimp [localisation_data.landscape],
      rw [Union_eq, preimage_image_eq],
      exact (L.œÜ 0).injective } },
  sorry { rintros n F ‚ü®hF‚ÇÄ, hfA, hFŒ¥, hFhol‚ü©,
    sorry },
end

/-- The non-parametric version of Gromov's theorem -/
lemma rel_mfld.ample.satisfies_h_principle (hRample : R.ample) (hRopen : is_open R)
  (hA : is_closed A)
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x) (hŒ¥_cont : continuous Œ¥) :
  R.satisfies_h_principle A Œ¥ :=
begin
  apply rel_mfld.satisfies_h_principle_of_weak hA,
  unfreezingI { clear_dependent A },
  intros A hA ùìï‚ÇÄ hùìï‚ÇÄ,
  have cont : continuous ùìï‚ÇÄ.bs, from ùìï‚ÇÄ.smooth_bs.continuous,
  let L : localisation_data IM IX ùìï‚ÇÄ.bs := std_localisation_data EM IM EX IX cont,
  let œÄ := L.index,

  suffices : ‚àÉ F : ‚Ñï ‚Üí htpy_formal_sol R, ‚àÄ n,
    ((F n 0 = ùìï‚ÇÄ) ‚àß
    (‚àÄ t, ‚àÄ·∂† x near A, F n t x = ùìï‚ÇÄ x) ‚àß
    (‚àÄ t x, dist ((F n t).bs x) (ùìï‚ÇÄ.bs x) < Œ¥ x) ‚àß

    (‚àÄ x ‚àà ‚ãÉ i ‚â§ œÄ n, L.œÜ i '' metric.closed_ball (0 : EM) 1,
             (F n 1).is_holonomic_at x)) ‚àß
    ((œÄ (n+1) = œÄ n ‚Üí F (n+1) = F n) ‚àß
     (‚àÄ t, ‚àÄ x ‚àâ range (L.œÜ $ œÄ (n+1)), F (n+1) t x = F n t x)),
  { clear_dependent hRample hRopen,
    simp_rw [and_assoc, forall_and_distrib] at this,
    rcases this with ‚ü®F, hF‚ÇÄ, hfA, hFŒ¥, hFhol, hFœÄ, hFultim‚ü©,
    let FF := Œª n : ‚Ñï, Œª p : ‚Ñù √ó M, F n p.1 p.2,
    have h : ‚àÄ n : ‚Ñï, ‚àÄ x ‚àâ (univ : set ‚Ñù) √óÀ¢ range (L.œÜ $ œÄ $ n+1), FF (n+1) x = FF n x,
    { rintros n ‚ü®t, x‚ü© H,
      exact hFultim _ _ _ (Œª hx, H ‚ü®trivial, hx‚ü©) },
    have h' : ‚àÄ (n : ‚Ñï), œÄ (n + 1) = œÄ n ‚Üí FF (n + 1) = FF n,
    { intros n hn,
      ext1 ‚ü®t, x‚ü©,
      dsimp [FF],
      rw hFœÄ n hn },
    have loc_fin : locally_finite (Œª i, (univ √óÀ¢ range (L.œÜ i) : set $ ‚Ñù √ó M)),
    { rintros ‚ü®t, x‚ü©,
      rcases L.lf_œÜ x with ‚ü®s, s_in, hs‚ü©,
      refine ‚ü®univ √óÀ¢ s, _, _‚ü©,
      { rw nhds_prod_eq,
        exact filter.prod_mem_prod filter.univ_mem s_in },
      { convert hs,
        ext i,
        simp [univ_prod_inter_univ_prod] } },
    have : ‚àÄ x : ‚Ñù √ó M, ‚àÄ·∂† n in at_top, x.2 ‚àà ‚ãÉ i ‚â§ œÄ n, (L.œÜ i) '' metric.ball 0 1,
    { rintros ‚ü®t, x‚ü©,
      rw [eventually_at_top],
      rcases (mem_top.mpr L.h‚ÇÅ x) with ‚ü®-, ‚ü®i, rfl‚ü©, hi : x ‚àà (L.œÜ i) '' metric.ball 0 1‚ü©,
      refine ‚ü®indexing.to_nat i, Œª n hn, _‚ü©,
      have : i ‚â§ œÄ n,
      { rw ‚Üê indexing.from_to i,
        exact indexing.mono_from hn },
      exact mem_bUnion this hi },
    cases loc_fin.exists_forall_eventually_of_indexing h h' with G hG, clear h h' loc_fin,
    choose n hn' hn using Œª x, eventually_at_top.mp ((this x).and (hG x)), clear hG this,
    have G_eq : ‚àÄ t x, G (t, x) = F (n (t, x)) t x,
    { exact Œª t x, ((hn (t, x) _ le_rfl).eq_of_nhds).symm },
    have hG11 : ‚àÄ t x, (G (t, x)).1.1 = x,
    { intros t x,
      rw G_eq,
      refl },
    let ùìï : htpy_formal_sol R := {
      bs := Œª t x, (G (t, x)).1.2,
      œï := Œª t x, (G (t, x)).2,
      smooth' := begin
        intro x,
        apply ((F (n x)).smooth' x).congr_of_eventually_eq,
        apply (hn x _ le_rfl).mono,
        intros p hp,
        dsimp only,
        rw [show (p.1, p.2) = p, from prod.ext rfl rfl, ‚Üê hp],
        refl
      end,
      is_sol' := begin
        intros t x,
        change one_jet_bundle.mk x (G (t, x)).1.2 (G (t, x)).2 ‚àà R,
        rw ‚Üê (hn (t, x) _ le_rfl).eq_of_nhds,
        exact (F (n (t, x))).is_sol' t x,
      end },
    refine ‚ü®ùìï, _, _, _, _‚ü©,
    { clear_dependent Œ¥ hfA hFhol hFœÄ hFultim,
      intro x,
      ext,
      { refl },
      { change (G (0, x)).1.2 = _,
        rw [G_eq, hF‚ÇÄ] },
      { apply heq_of_eq,
        change (G (0, x)).2 = _,
        rw [G_eq, hF‚ÇÄ] } },
    { clear_dependent Œ¥ hF‚ÇÄ hfA hFœÄ hFultim,
      intro x,
      have : x ‚àà ‚ãÉ i ‚â§ œÄ (n (1, x)), (L.œÜ i) '' metric.closed_ball 0 1,
      { have : x ‚àà _ := hn' (1, x) _ le_rfl,
        apply set.bUnion_mono subset_rfl _ this,
        rintros i -,
        exact image_subset _ metric.ball_subset_closed_ball, },
      apply (hFhol (n (1, x)) x this).congr, clear this,
      have : F (n (1, x)) 1 =·∂†[ùìù x] (Œª x, G (1, x)),
      { exact (hn (1, x) (n(1, x)) le_rfl).slice },
      apply this.mono, clear this,
      rintros y (hy : F (n (1, x)) 1 y = G (1, y)),
      change F (n (1, x)) 1 y = ùìï 1 y,
      rw hy,
      change G (1, y) = ùìï 1 y,
      ext ; try { refl },
      rw hG11,
      refl },
    { clear_dependent Œ¥ hF‚ÇÄ hFhol hFœÄ hFultim,
      intros x x_in t,
      rw [‚Üê (hfA (n (t, x)) t).nhds_set_forall_mem x x_in, ‚Üê G_eq],
      ext ; try { refl },
      rw hG11, refl, },
    { clear_dependent hF‚ÇÄ hFhol hFœÄ hFultim hfA,
      intros t x,
      apply le_of_lt,
      change dist (G (t, x)).1.2 (ùìï‚ÇÄ.bs x) < Œ¥ x,
      rw ‚Üê (hn (t, x) _ le_rfl).eq_of_nhds,
      exact hFŒ¥ (n (t, x)) t x } },
  exact hRample.satisfies_h_principle_core hRopen hA hŒ¥_pos hŒ¥_cont ùìï‚ÇÄ hùìï‚ÇÄ L,
end

variables
{EP : Type*} [normed_add_comm_group EP] [normed_space ‚Ñù EP]  [finite_dimensional ‚Ñù EP]
{HP : Type*} [topological_space HP] {IP : model_with_corners ‚Ñù EP HP} [model_with_corners.boundaryless IP]
{P : Type*} [topological_space P] [charted_space HP P] [smooth_manifold_with_corners IP P]
[locally_compact_space P] -- investigate how to deduce this from finite-dimensional
[sigma_compact_space P]
[t2_space P]
[nonempty P] -- investigate how to remove this
{C : set (P √ó M)}

/-- **Gromov's Theorem** -/
theorem rel_mfld.ample.satisfies_h_principle_with (hRample : R.ample) (hRopen : is_open R)
  (hC : is_closed C)
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x) (hŒ¥_cont : continuous Œ¥) :
  R.satisfies_h_principle_with IP C Œ¥ :=
begin
  have hŒ¥_pos' : ‚àÄ (x : P √ó M), 0 < Œ¥ x.2 := Œª (x : P √ó M), hŒ¥_pos x.snd,
  have hŒ¥_cont' : continuous (Œª (x : P √ó M), Œ¥ x.2) := hŒ¥_cont.comp continuous_snd,
  have is_op : is_open (rel_mfld.relativize IP P R) := R.is_open_relativize IP P hRopen,
  apply rel_mfld.satisfies_h_principle.satisfies_h_principle_with,
  exact (hRample.relativize IP P).satisfies_h_principle is_op hC hŒ¥_pos' hŒ¥_cont',
end

variables
{E' : Type*} [normed_add_comm_group E'] [normed_space ‚Ñù E'] [finite_dimensional ‚Ñù E']
  [measurable_space E'] [borel_space E']
{H' : Type*} [topological_space H'] {I' : model_with_corners ‚Ñù E' H'} [model_with_corners.boundaryless I']
{M' : Type*} [topological_space M'] [charted_space H' M'] [smooth_manifold_with_corners I' M']
[locally_compact_space M'] -- investigate how to deduce this from finite-dimensional
[sigma_compact_space M']
[t2_space M']
[nonempty M'] -- investigate how to remove this

include IP

/-- Gromov's Theorem without metric space assumption -/
theorem rel_mfld.ample.satisfies_h_principle_with' {R : rel_mfld IM M I' M'}
  (hRample : R.ample) (hRopen : is_open R) (hC : is_closed C)
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x) (hŒ¥_cont : continuous Œ¥) :
  by letI := (@topological_space.metrizable_space_metric _ _
    (manifold_with_corners.metrizable_space I' M')); exact
  R.satisfies_h_principle_with IP C Œ¥ :=
begin
  haveI := (@topological_space.metrizable_space_metric _ _
    (manifold_with_corners.metrizable_space I' M')),
  apply rel_mfld.ample.satisfies_h_principle_with; assumption
end
