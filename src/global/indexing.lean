import tactic.linarith
import topology.basic

/-!
# Indexing types

This is a stupid file introducing a type class for types that will index
locally finite covers of (paracompact) manifolds without having
to discuss according to compactness. The only intended instances
are `‚Ñï` and `fin (n+1)`.

It also includes a lemma about locally finite cover that doesn't require an indexing
index type but will be used with one.
-/

class indexing (Œ± : Type*) [linear_order Œ±] :=
(from_nat : ‚Ñï ‚Üí Œ±)
(to_nat : Œ± ‚Üí ‚Ñï)
(mono_from : monotone from_nat)
(from_to : ‚àÄ a, from_nat (to_nat a) = a)

instance indexing.has_coe (Œ± : Type*) [linear_order Œ±] [indexing Œ±] : has_coe ‚Ñï Œ± :=
‚ü®indexing.from_nat‚ü©

instance : indexing ‚Ñï :=
{ from_nat := id,
  to_nat := id,
  mono_from := monotone_id,
  from_to := Œª n, rfl }

instance (n : ‚Ñï) : indexing (fin $ n + 1) :=
{ from_nat := Œª k, if h : k < n + 1 then ‚ü®k, h‚ü© else fin.last n,
  to_nat := coe,
  mono_from := Œª k l hkl, begin
    dsimp [fin.of_nat],
    split_ifs ; try { simp [fin.le_last] };
    linarith,
  end,
  from_to := begin
    rintros ‚ü®k, hk‚ü©,
    erw dif_pos hk,
    refl
  end }

open_locale topological_space

lemma foo {X : Type*} [topological_space X] {Œπ : Type*} [linear_order Œπ] [nonempty Œπ]
  {s : Œπ ‚Üí set X} (h : locally_finite s) :
  ‚àÉ ind : X ‚Üí Œπ, ‚àÉ U : X ‚Üí set X, ‚àÄ x, U x ‚àà ùìù x ‚àß ‚àÄ i > ind x, s i ‚à© U x = ‚àÖ :=
begin
  choose V V_in hV using h,
  choose ind hind using (Œª x, (hV x).bdd_above),
  refine ‚ü®ind, V, Œª  x, ‚ü®V_in x, _‚ü©‚ü©,
  intros i hi,
  by_contra,
  exact lt_irrefl i (gt_of_gt_of_ge hi $ hind x (set.ne_empty_iff_nonempty.mp h))
end

/-- Our model indexing type depending on `n : ‚Ñï` is `‚Ñï` if `n = 0` and `fin n` otherwise-/
def index_type (n : ‚Ñï) : Type :=
nat.cases_on n ‚Ñï (Œª k, fin $ k + 1)

instance (n : ‚Ñï) : linear_order (index_type n) :=
nat.cases_on n nat.linear_order (Œª _, fin.linear_order)

instance (n : ‚Ñï) : indexing (index_type n) :=
nat.cases_on n nat.indexing (Œª _, fin.indexing _)
