import tactic.linarith
import algebra.order.with_zero
import topology.basic

import to_mathlib.set_theory.cardinal.basic

/-!
# Indexing types

This is a stupid file introducing a type class for types that will index
locally finite covers of (paracompact) manifolds without having
to discuss according to compactness. The only intended instances
are `‚Ñï` and `fin (n+1)`.

It also includes a lemma about locally finite cover that doesn't require an indexing
index type but will be used with one.
-/

class indexing (Œ± : Type*) [linear_order Œ±] :=
(from_nat : ‚Ñï ‚Üí Œ±)
(to_nat : Œ± ‚Üí ‚Ñï)
(mono_from : monotone from_nat)
(from_to : ‚àÄ a, from_nat (to_nat a) = a)

instance indexing.has_coe (Œ± : Type*) [linear_order Œ±] [indexing Œ±] : has_coe ‚Ñï Œ± :=
‚ü®indexing.from_nat‚ü©

instance : indexing ‚Ñï :=
{ from_nat := id,
  to_nat := id,
  mono_from := monotone_id,
  from_to := Œª n, rfl }

instance (n : ‚Ñï) : indexing (fin $ n + 1) :=
{ from_nat := Œª k, if h : k < n + 1 then ‚ü®k, h‚ü© else fin.last n,
  to_nat := coe,
  mono_from := Œª k l hkl, begin
    dsimp [fin.of_nat],
    split_ifs ; try { simp [fin.le_last] };
    linarith,
  end,
  from_to := begin
    rintros ‚ü®k, hk‚ü©,
    erw dif_pos hk,
    refl
  end }

open_locale topological_space

lemma foo {X : Type*} [topological_space X] {Œπ : Type*} [linear_order Œπ] [nonempty Œπ]
  {s : Œπ ‚Üí set X} (h : locally_finite s) :
  ‚àÉ ind : X ‚Üí Œπ, ‚àÉ U : X ‚Üí set X, ‚àÄ x, U x ‚àà ùìù x ‚àß ‚àÄ i > ind x, s i ‚à© U x = ‚àÖ :=
begin
  choose V V_in hV using h,
  choose ind hind using (Œª x, (hV x).bdd_above),
  refine ‚ü®ind, V, Œª  x, ‚ü®V_in x, _‚ü©‚ü©,
  intros i hi,
  by_contra,
  exact lt_irrefl i (gt_of_gt_of_ge hi $ hind x (set.ne_empty_iff_nonempty.mp h))
end

/-- Our model indexing type depending on `n : ‚Ñï` is `‚Ñï` if `n = 0` and `fin n` otherwise-/
def index_type (n : ‚Ñï) : Type :=
nat.cases_on n ‚Ñï (Œª k, fin $ k + 1)

@[simp] lemma index_type_zero : index_type 0 = ‚Ñï := rfl

@[simp] lemma index_type_succ (n : ‚Ñï) : index_type (n + 1) = fin (n + 1) := rfl

@[simp] lemma index_type_of_zero_lt {n : ‚Ñï} (h : 0 < n) : index_type n = fin n :=
by rw [‚Üê nat.succ_pred_eq_of_pos h, index_type_succ]

instance (n : ‚Ñï) : linear_order (index_type n) :=
nat.cases_on n nat.linear_order (Œª _, fin.linear_order)

instance (n : ‚Ñï) : indexing (index_type n) :=
nat.cases_on n nat.indexing (Œª _, fin.indexing _)

def index_type_encodable : Œ† n : ‚Ñï, encodable (index_type n)
| 0 := nat.encodable
| (n + 1) := fin.encodable (n + 1)

lemma set.countable_iff_exists_nonempty_index_type_equiv
  {Œ± : Type*} {s : set Œ±} (hne : s.nonempty) :
  s.countable ‚Üî ‚àÉ n, nonempty (index_type n ‚âÉ s) :=
begin
  -- Huge golfing opportunity.
  cases @set.finite_or_infinite _ s,
  { refine ‚ü®Œª hh, ‚ü®h.to_finset.card, _‚ü©, Œª _, h.countable‚ü©,
    have : 0 < h.to_finset.card,
    { rw finset.card_pos, exact (set.finite.nonempty_to_finset h).mpr hne},
    simp only [this, index_type_of_zero_lt],
    have e‚ÇÅ := fintype.equiv_fin h.to_finset,
    rw [fintype.card_coe, h.coe_sort_to_finset] at e‚ÇÅ,
    exact ‚ü®e‚ÇÅ.symm‚ü©, },
  { refine ‚ü®Œª hh, ‚ü®0, _‚ü©, _‚ü©,
    { simp only [index_type_zero],
      obtain ‚ü®_i‚ü© := set.countable_infinite_iff_nonempty_denumerable.mp ‚ü®hh, h‚ü©,
      haveI := _i,
      exact ‚ü®(denumerable.eqv s).symm‚ü©, },
    { rintros ‚ü®n, ‚ü®fn‚ü©‚ü©,
      have hn : n = 0,
      { by_contra hn,
        replace hn : 0 < n := zero_lt_iff.mpr hn,
        simp only [hn, index_type_of_zero_lt] at fn,
        exact set.not_infinite.mpr ‚ü®fintype.of_equiv (fin n) fn‚ü© h, },
      simp only [hn, index_type_zero] at fn,
      exact set.countable_iff_exists_injective.mpr ‚ü®fn.symm, fn.symm.injective‚ü©, }, },
end
