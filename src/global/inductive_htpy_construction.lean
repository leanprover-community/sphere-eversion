import analysis.special_functions.pow

import to_mathlib.logic.basic
import to_mathlib.data.nat.basic
import to_mathlib.topology.germ
import to_mathlib.order.filter.basic

import notations
import global.indexing

noncomputable theory

open set filter
open_locale topological_space

private def T : ‚Ñï ‚Üí ‚Ñù := Œª n, nat.rec 0 (Œª k x, x + 1/(2 : ‚Ñù)^(k+1)) n

open_locale big_operators

-- Note this is more painful than Patrick hoped for. Maybe this should be the definition of T.
private lemma T_eq (n : ‚Ñï) : T n = 1- (1/(2: ‚Ñù))^n :=
begin
  have : T n = ‚àë k in finset.range n, 1/(2: ‚Ñù)^(k+1),
  { induction n with n hn,
    { simp only [T, finset.range_zero, finset.sum_empty] },
    change T n + _ = _,
    rw [hn, finset.sum_range_succ] },
  simp_rw [this, ‚Üê one_div_pow, pow_succ, ‚Üê finset.mul_sum, geom_sum_eq (by norm_num : 1/(2:‚Ñù) ‚â† 1) n],
  field_simp,
  norm_num,
  apply div_eq_of_eq_mul,
  apply neg_ne_zero.mpr,
  apply ne_of_gt,
  positivity,
  ring
end

private lemma T_lt (n : ‚Ñï) : T n < 1 :=
begin
  rw T_eq,
  have : (0 : ‚Ñù) < (1 / 2) ^ n, by positivity,
  linarith
end

private lemma T_lt_succ (n : ‚Ñï) : T n < T (n+1) :=
lt_add_of_le_of_pos le_rfl (one_div_pos.mpr (pow_pos zero_lt_two _))

private lemma T_le_succ (n : ‚Ñï) : T n ‚â§ T (n+1) := (T_lt_succ n).le

private lemma T_succ_sub (n : ‚Ñï) : T (n+1) - T n = 1/2^(n+1) :=
begin
  change T n + _ - T n = _,
  simp
end

private lemma mul_T_succ_sub (n : ‚Ñï) : 2^(n+1)*(T (n+1) - T n) = 1 :=
begin
  rw T_succ_sub,
  field_simp
end

private lemma T_one : T 1 = 1/2 :=
by simp [T]

private lemma not_T_succ_le (n : ‚Ñï) : ¬¨ T (n + 1) ‚â§ 0 :=
begin
  rw [T_eq, not_le],
  have : (1 / (2 : ‚Ñù)) ^ (n + 1) < 1,
  apply pow_lt_one ; norm_num,
  linarith,
end

lemma inductive_htpy_construction_aux {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U K : index_type N ‚Üí set X}
  (P‚ÇÄ P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop) (P‚ÇÇ : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop)
  (hP‚ÇÇ : ‚àÄ a b (p : ‚Ñù √ó X) (f : ‚Ñù √ó X ‚Üí Y), P‚ÇÇ (a*p.1+b, p.2) f ‚Üí P‚ÇÇ p (Œª p : ‚Ñù √ó X, f (a*p.1+b, p.2)))
  {f‚ÇÄ : X ‚Üí Y} (init : ‚àÄ x, P‚ÇÄ x f‚ÇÄ)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ·∂† x near ‚ãÉ j < i, K j, P‚ÇÅ x f) ‚Üí
    ‚àÉ F : ‚Ñù ‚Üí X ‚Üí Y, (‚àÄ t, ‚àÄ x, P‚ÇÄ x $ F t) ‚àß (‚àÄ·∂† x near ‚ãÉ j ‚â§ i, K j, P‚ÇÅ x $ F 1) ‚àß
                     (‚àÄ p, P‚ÇÇ p ‚ÜøF) ‚àß (‚àÄ t, ‚àÄ x ‚àâ U i, F t x = f x) ‚àß
                     (‚àÄ·∂† t near Iic 0, F t = f) ‚àß (‚àÄ·∂† t near Ici 1, F t = F 1)) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù √ó X ‚Üí Y, ‚àÄ n,
    ((‚àÄ p : ‚Ñù √ó X, P‚ÇÄ p.2 (filter.germ.slice_right (f n)) ‚àß P‚ÇÇ p (f n)) ‚àß
    (‚àÄ·∂† x near (‚ãÉ i ‚â§ (n : index_type N) , K i), P‚ÇÅ x (filter.germ.slice_right (f n : (ùìù (T (n+1), x)).germ Y))) ‚àß
    (‚àÄ t ‚â• T (n+1), ‚àÄ x, f n (t, x) = f n (T (n+1), x)) ‚àß (‚àÄ x, f n (0, x) = f‚ÇÄ x) ‚àß
    (‚àÄ·∂† t in ùìù (T $ n+1), ‚àÄ x, f n (t, x) = f n (T (n+1), x))) ‚àß
    (((((n+1:‚Ñï) : index_type N) = n) ‚Üí f (n+1) = f n) ‚àß
      ‚àÄ x ‚àâ U (n + 1 : ‚Ñï), ‚àÄ t, f (n+1) (t, x) = f n (t, x))
   :=
begin
  let P‚ÇÄ' : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop := Œª p œÜ, P‚ÇÄ p.2 œÜ.slice_right ‚àß P‚ÇÇ p œÜ,
  let P‚ÇÅ' : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop := Œª p œÜ, P‚ÇÅ p.2 œÜ.slice_right,
  let P : ‚Ñï ‚Üí (‚Ñù √ó X ‚Üí Y) ‚Üí Prop :=
    Œª n f, (‚àÄ p, P‚ÇÄ' p f) ‚àß (‚àÄ·∂† x near (‚ãÉ i ‚â§ (n : index_type N) , K i), P‚ÇÅ' (T (n+1), x) f) ‚àß
           (‚àÄ t ‚â• T (n+1), ‚àÄ x, f (t, x) = f (T (n+1), x)) ‚àß (‚àÄ x, f (0, x) = f‚ÇÄ x) ‚àß
           (‚àÄ·∂† t in ùìù (T $ n+1), ‚àÄ x, f (t, x) = f (T (n+1), x)),
  let Q : ‚Ñï ‚Üí (‚Ñù √ó X ‚Üí Y) ‚Üí (‚Ñù √ó X ‚Üí Y) ‚Üí Prop :=
    Œª n f f', ((((n+1:‚Ñï) : index_type N) = n) ‚Üí f' = f) ‚àß
              (‚àÄ x ‚àâ U (n + 1 : ‚Ñï), ‚àÄ t, f' (t, x) = f (t, x)),
  change ‚àÉ f : ‚Ñï ‚Üí ‚Ñù √ó X ‚Üí Y, ‚àÄ n, P n (f n) ‚àß Q n (f n) (f $ n + 1),
  apply exists_by_induction',
  { dsimp only [P],
    rcases ind 0 f‚ÇÄ init _ with ‚ü®f', h‚ÇÄf', h‚ÇÅf', hf'‚ÇÇ, hf'not, hf'0, hf'1‚ü©,
    refine ‚ü®Œª p, f' (2*p.1) p.2, Œª p, ‚ü®_, _‚ü©, _, _, _, _‚ü©,
    { exact h‚ÇÄf' (2*p.1) p.2 },
    { simpa using hP‚ÇÇ 2 0 p ‚Üøf' (hf'‚ÇÇ _) },
    { apply h‚ÇÅf'.mono,
      intros x hx,
      change P‚ÇÅ x (Œª x' : X, f' (2*T (0 + 1)) x'),
      simpa [T] using hx },
    { simp only [T, zero_add, one_div, nat.rec_add_one, algebra_map.coe_zero, nat.rec_zero,
                  pow_one, real.rpow_one, ge_iff_le, mul_inv_cancel_of_invertible],
      intros t ht x,
      rw ‚Üê hf'1.on_set (2*t) _,
      change 1 ‚â§ 2*t,
      field_simp at ht,
      linarith only [ht] },
    { intros x,
      rw hf'0.on_set,
      simp },
    { dsimp only,
      have : 2 * T (0 + 1) = 1, by simp [T_one],
      rw [this, zero_add],
      have : ùìù (1 : ‚Ñù) ‚â§ ùìùÀ¢ (Ici 1),
            { exact nhds_le_nhds_set left_mem_Ici },
      have : f' =·∂†[ùìù 1] Œª t, f' 1 := hf'1.filter_mono this,
      have lim : tendsto (Œª t : ‚Ñù, 2*t) (ùìù $ T 1) (ùìù 1),
      { rw [T_one],
        convert tendsto_id.const_mul (2 : ‚Ñù),
        simp },
      apply (this.comp_fun lim).mono (Œª t ht, _),
      intro x',
      apply congr_fun ht },
    { simp [index_type.not_lt_zero] } },
  { rintros n f ‚ü®h‚ÇÄ'f, h‚ÇÅf, hinvf, hf0, hfTn1‚ü©,
    rcases index_type.lt_or_eq_succ N n with hn | hn,
    { simp_rw index_type.le_or_lt_succ hn at h‚ÇÅf,
      rcases ind (n+1 : ‚Ñï) (Œª x, f (T (n+1), x)) (Œª x, (h‚ÇÄ'f (T (n+1), x)).1) h‚ÇÅf with
        ‚ü®f', h‚ÇÄf', h‚ÇÅf', hf'‚ÇÇ, hf'not, hf'0, hf'1‚ü©,
      refine ‚ü®Œª p, if p.1 ‚â• T (n+1) then f' (2^(n+2)*(p.1 - T (n+1))) p.2 else f p, ‚ü®Œª p, ‚ü®_, _‚ü©, _, _, _, _‚ü©, _, _‚ü©,
      { by_cases ht : (T $ n+1) ‚â§ p.1,
        { convert h‚ÇÄf' (2^(n+2)*(p.1-T (n+1))) p.2 using 1,
          apply quotient.sound,
          simp [ht] },
        { convert (h‚ÇÄ'f p).1 using 1,
          apply quotient.sound,
          simp [ht] } },
      { rcases lt_trichotomy (T $ n+1) p.1 with ht|ht|ht,
        { convert hP‚ÇÇ (2^(n+2)) (-2^(n+2)*T (n+1)) p ‚Üøf' (hf'‚ÇÇ _) using 1,
          apply quotient.sound,
          have hp : ‚àÄ·∂† (q : ‚Ñù √ó X) in ùìù p, T (n+1) ‚â§ q.1,
          { cases p with t x,
            apply mem_of_superset (prod_mem_nhds (Ioi_mem_nhds ht) univ_mem),
            rintros ‚ü®t', x'‚ü© ‚ü®ht', hx'‚ü©,
            exact le_of_lt ht' },
          apply hp.mono (Œª q hq, _),
          simp [if_pos hq, mul_sub, neg_mul],
          refl },
        { let g : ‚Ñù √ó X ‚Üí Y := Œª p, f' (2 ^ (n + 2) * (p.fst - T (n + 1))) p.snd,
          have hg : P‚ÇÇ p g,
          { convert hP‚ÇÇ (2^(n+2)) (-2^(n+2)*T (n+1)) p ‚Üøf' (hf'‚ÇÇ _) using 2,
            ext q,
            dsimp only [g],
            ring_nf },
          convert hg using 1,
          apply quotient.sound,
          apply filter.eventually_eq.eventually_eq_ite,
          cases p with t x,
          have hf : f =·∂†[ùìù (t, x)] Œª q : ‚Ñù √ó X, f (T (n + 1), q.2),
          { change T (n+1) = t at ht,
            rw ‚Üê ht,
            apply mem_of_superset (prod_mem_nhds hfTn1 univ_mem),
            rintros ‚ü®t', x'‚ü© ‚ü®ht', hx'‚ü©,
            exact ht' x' },
          replace hf'0 : ‚Üøf' =·∂†[ùìù (0, x)] Œª q : ‚Ñù √ó X, f (T (n + 1), q.2),
          { have : ùìù (0 : ‚Ñù) ‚â§ ùìùÀ¢ (Iic 0),
            { exact nhds_le_nhds_set right_mem_Iic },
            apply mem_of_superset (prod_mem_nhds (hf'0.filter_mono this) univ_mem),
            rintros ‚ü®t', x'‚ü© ‚ü®ht', hx'‚ü©,
            exact (congr_fun ht' x' : _) },
          have : tendsto (Œª (x : ‚Ñù √ó X), (2 ^ (n + 2) * (x.1 - T (n + 1)), x.2)) (ùìù (t, x)) (ùìù (0, x)),
          { rw [nhds_prod_eq, nhds_prod_eq],
            have limt : tendsto (Œª t, 2 ^ (n + 2) * (t - T (n + 1))) (ùìù t) (ùìù 0),
            { rw [show (0 : ‚Ñù) = 2^(n+2)*(T (n+1) - T (n+1)), by simp, ht],
              apply tendsto.const_mul,
              exact tendsto_id.sub_const _ },
            exact limt.prod_map tendsto_id },
          have := hf'0.comp_fun this,
          rw show (Œª (q : ‚Ñù √ó X), f (T (n + 1), q.2)) ‚àò
            (Œª (x : ‚Ñù √ó X), (2 ^ (n + 2) * (x.1 - T (n + 1)), x.2)) =
            Œª q : ‚Ñù √ó X, f (T (n + 1), q.2),
          by { ext, refl } at this,
          exact this.trans hf.symm },
        { have hp : ‚àÄ·∂† (q : ‚Ñù √ó X) in ùìù p, ¬¨ T (n+1) ‚â§ q.1,
          { cases p with t x,
            apply mem_of_superset (prod_mem_nhds (Iio_mem_nhds ht) univ_mem),
            rintros ‚ü®t', x'‚ü© ‚ü®ht', hx'‚ü©,
            simpa using ht' },
          convert (h‚ÇÄ'f p).2 using 1,
          apply quotient.sound,
          apply hp.mono (Œª q hq, _),
          simp [if_neg hq] } },
      { apply h‚ÇÅf'.mono,
        intros x hx,
        change P‚ÇÅ x (Œª x', if T (n+2) ‚â• T (n+1) then f' (2^(n+2)*(T (n+2) - T (n+1))) x' else _),
        convert hx using 2,
        ext x',
        simp [if_pos (T_le_succ $ n+1), T_succ_sub] },
      { rintros t ht x,
        dsimp only,
        simp only [if_pos ((T_le_succ $ n+1).trans ht), if_pos (T_le_succ $ n+1),
                    T_succ_sub, one_div, mul_inv_cancel_of_invertible],
        replace ht : 1 / 2 ^ (n + 2) ‚â§ t - T (n+1) := le_sub_iff_add_le'.mpr ht,
        rw ‚Üê hf'1.on_set _ _,
        exact (div_le_iff' (by positivity)).mp ht },
      { intros x,
        simp [not_T_succ_le, hf0] },
      { suffices : (Œª t x, f' (2 ^ (n + 2) * (t - T (n + 1))) x) =·∂†[ùìù (T (n + 2))] (Œª t x, f' (2 ^ (n + 2) * (T (n+2) - T (n + 1))) x),
        { have hle : ‚àÄ·∂† (t : ‚Ñù) in ùìù (T (n + 1 + 1)), t ‚â• T (n+1),
            from eventually_ge_of_tendsto_gt (T_lt_succ _) tendsto_id,
          apply (hle.and this).mono,
          rintros t ‚ü®ht, ht'‚ü© x,
          dsimp only,
          rw [if_pos ht, if_pos (T_le_succ _)],
          apply congr_fun ht' },
        have : ùìù (1 : ‚Ñù) ‚â§ ùìùÀ¢ (Ici 1),
            { exact nhds_le_nhds_set left_mem_Ici },
        rw mul_T_succ_sub,
        have : f' =·∂†[ùìù 1] Œª t, f' 1 := hf'1.filter_mono this,
        apply this.comp_fun,
        conv { congr, congr, skip, rw ‚Üê mul_T_succ_sub (n+1) },
        exact (tendsto_id.sub_const _).const_mul _ },
      { exact Œª hn', (hn.ne hn'.symm).elim },
      { intros x hx t,
        dsimp only,
        split_ifs with ht,
        { rw [hf'not _ _ hx, hinvf _ ht] },
        { refl }, } },
    { simp only [hn] at h‚ÇÅf,
      refine ‚ü®f, ‚ü®h‚ÇÄ'f, _, _, hf0, _‚ü©, _, _‚ü©,
      { apply h‚ÇÅf.mono,
        intros x hx,
        change P‚ÇÅ x (Œª x, f (T (n+2), x)),
        convert hx using 2,
        ext x',
        apply  hinvf,
        apply T_le_succ },
      { intros t ht x,
        rw [hinvf (T $ n+1+1) (T_le_succ _), hinvf _ ((T_le_succ $ n+1).trans ht)] },
      { have hle : ‚àÄ·∂† (t : ‚Ñù) in ùìù (T (n + 1 + 1)), t ‚â• T (n+1),
            from eventually_ge_of_tendsto_gt (T_lt_succ _) tendsto_id,
        apply hle.mono (Œª t ht, _),
        intro x,
        rw [hinvf t ht, hinvf (T $ n+2) (T_le_succ _)] },
      { simp },
      { simp } } }
end

/- TODO: think whether `‚àÄ x ‚àà ‚ãÉ j < i, K j, P‚ÇÅ x f` should be something more general. -/
lemma inductive_htpy_construction {X Y : Type*} [topological_space X]
  {N : ‚Ñï} {U K : index_type N ‚Üí set X}
  (P‚ÇÄ P‚ÇÅ : Œ† x : X, germ (ùìù x) Y ‚Üí Prop) (P‚ÇÇ : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop)
  (hP‚ÇÇ : ‚àÄ a b (p : ‚Ñù √ó X) (f : ‚Ñù √ó X ‚Üí Y), P‚ÇÇ (a*p.1+b, p.2) f ‚Üí P‚ÇÇ p (Œª p : ‚Ñù √ó X, f (a*p.1+b, p.2)))
  (U_fin : locally_finite U) (K_cover : (‚ãÉ i, K i) = univ)
  {f‚ÇÄ : X ‚Üí Y} (init : ‚àÄ x, P‚ÇÄ x f‚ÇÄ)
  (ind : ‚àÄ (i : index_type N) (f : X ‚Üí Y), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ·∂† x near ‚ãÉ j < i, K j, P‚ÇÅ x f) ‚Üí
    ‚àÉ F : ‚Ñù ‚Üí X ‚Üí Y, (‚àÄ t, ‚àÄ x, P‚ÇÄ x $ F t) ‚àß (‚àÄ·∂† x near ‚ãÉ j ‚â§ i, K j, P‚ÇÅ x $ F 1) ‚àß
                     (‚àÄ p, P‚ÇÇ p ‚ÜøF) ‚àß (‚àÄ t, ‚àÄ x ‚àâ U i, F t x = f x) ‚àß
                     (‚àÄ·∂† t near Iic 0, F t = f) ‚àß (‚àÄ·∂† t near Ici 1, F t = F 1)) :
  ‚àÉ F : ‚Ñù ‚Üí X ‚Üí Y, F 0 = f‚ÇÄ ‚àß (‚àÄ t x, P‚ÇÄ x (F t)) ‚àß (‚àÄ x, P‚ÇÅ x (F 1)) ‚àß (‚àÄ p, P‚ÇÇ p ‚ÜøF) :=
begin
  let P‚ÇÄ' : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop := Œª p œÜ, P‚ÇÄ p.2 œÜ.slice_right ‚àß P‚ÇÇ p œÜ,
  let P‚ÇÅ' : Œ† p : ‚Ñù √ó X, germ (ùìù p) Y ‚Üí Prop := Œª p œÜ, P‚ÇÅ p.2 œÜ.slice_right,
  let P : ‚Ñï ‚Üí (‚Ñù √ó X ‚Üí Y) ‚Üí Prop :=
    Œª n f, (‚àÄ p, P‚ÇÄ' p f) ‚àß (‚àÄ·∂† x near (‚ãÉ i ‚â§ (n : index_type N) , K i), P‚ÇÅ' (T (n+1), x) f) ‚àß
           (‚àÄ t ‚â• T (n+1), ‚àÄ x, f (t, x) = f (T (n+1), x)) ‚àß (‚àÄ x, f (0, x) = f‚ÇÄ x) ‚àß
           (‚àÄ·∂† t in ùìù (T $ n+1), ‚àÄ x, f (t, x) = f (T (n+1), x)),
  let Q : ‚Ñï ‚Üí (‚Ñù √ó X ‚Üí Y) ‚Üí (‚Ñù √ó X ‚Üí Y) ‚Üí Prop :=
    Œª n f f', ((((n+1:‚Ñï) : index_type N) = n) ‚Üí f' = f) ‚àß
              (‚àÄ x ‚àâ U (n + 1 : ‚Ñï), ‚àÄ t, f' (t, x) = f (t, x)),
  obtain ‚ü®f, hf‚ü© : ‚àÉ f : ‚Ñï ‚Üí ‚Ñù √ó X ‚Üí Y, ‚àÄ n, P n (f n) ‚àß Q n (f n) (f $ n + 1),
  { apply inductive_htpy_construction_aux; assumption },
  simp only [P, Q, forall_and_distrib, forall‚ÇÇ_and_distrib] at hf,
  rcases hf with ‚ü®‚ü®‚ü®h‚ÇÄf, h‚ÇÇf‚ü©, h‚ÇÅf, hinvf, hf0, hfTsucc‚ü©, hf‚ÇÅ, hf‚ÇÉ‚ü©,
  choose W W_in hW using U_fin,
  choose i‚ÇÄ hi‚ÇÄ using Œª x, (hW x).bdd_above,
  have : ‚àÄ x, ‚àÉ n : ‚Ñï, x ‚àà K n,
  { intros x,
    rcases eq_univ_iff_forall.mp K_cover x with ‚ü®-, ‚ü®i, rfl‚ü©, hi‚ü©,
    use indexing.to_nat i,
    simpa using hi },
  choose nK hnK using this,
  let n‚ÇÄ : X ‚Üí ‚Ñï := Œª x, max (nK x) (indexing.to_nat (i‚ÇÄ x)),
  have key : ‚àÄ {x : X} {n}, n ‚â• n‚ÇÄ x ‚Üí ‚àÄ {q : ‚Ñù √ó X}, q.2 ‚àà W x ‚Üí f n q = f (n‚ÇÄ x) q,
  { intros x‚ÇÄ n hn,
    rcases le_iff_exists_add.mp hn with ‚ü®k, rfl‚ü©, clear hn,
    rintros ‚ü®t, x‚ü© (hx : x ‚àà _),
    induction k with k hk,
    { rw add_zero },
    rw ‚Üê hk, clear hk,
    let œÄ :  ‚Ñï ‚Üí index_type N := indexing.from_nat,
    have : ‚àÄ n, œÄ n < œÄ (n+1) ‚à® œÄ n = œÄ (n+1),
    exact Œª n, lt_or_eq_of_le (indexing.mono_from n.le_succ),
    rcases this (n‚ÇÄ x‚ÇÄ + k) with H | H ; clear this,
    { have ineq : i‚ÇÄ x‚ÇÄ < œÄ (n‚ÇÄ x‚ÇÄ + k + 1),
      { suffices : i‚ÇÄ x‚ÇÄ ‚â§ œÄ (n‚ÇÄ x‚ÇÄ + k), from lt_of_le_of_lt this H,
        rw ‚Üê indexing.from_to (i‚ÇÄ x‚ÇÄ),
        exact indexing.mono_from ((le_max_right _ _).trans le_self_add) },
      apply hf‚ÇÉ,
      intros hx',
      exact lt_irrefl _ (ineq.trans_le $ hi‚ÇÄ x‚ÇÄ ‚ü®x, ‚ü®hx', hx‚ü©‚ü©) },
    { rw [‚Üê nat.add_one, ‚Üê add_assoc, hf‚ÇÅ _ H.symm] } },
  have key' : ‚àÄ p : ‚Ñù √ó X, ‚àÄ n ‚â• n‚ÇÄ p.2, f n =·∂†[ùìù p] Œª q, f (n‚ÇÄ q.2) q,
  { rintros ‚ü®t, x‚ü© n hn,
    apply mem_of_superset (prod_mem_nhds univ_mem $ W_in x) (Œª p hp, _),
    dsimp only [mem_set_of],
    calc f n p = f (n‚ÇÄ x) p : key hn hp.2
    ... = f (max (n‚ÇÄ x) (n‚ÇÄ p.2)) p : (key (le_max_left (n‚ÇÄ x) _) hp.2).symm
    ... = f (n‚ÇÄ p.2) p : key (le_max_right _ _) (mem_of_mem_nhds $ W_in _) },
  have key'' : ‚àÄ p : ‚Ñù √ó X, ‚àÄ·∂† (n : ‚Ñï) in at_top, f n =·∂†[ùìù p] Œª q, f (n‚ÇÄ q.2) q,
  { exact Œª p, (eventually_ge_at_top (n‚ÇÄ p.2)).mono (Œª n hn, key' p n hn) },
  refine ‚ü®Œª t x, f (n‚ÇÄ x) (t, x), _, _, _, _‚ü©,
  { ext x,
    rw hf0 },
  { intros t x,
    convert h‚ÇÄf (n‚ÇÄ x) (t, x) using 1,
    apply quotient.sound,
    exact ((key' (t, x) _ le_rfl).comp_fun (continuous.prod.mk t).continuous_at).symm },
  { intro x,
    convert (h‚ÇÅf (n‚ÇÄ x)).on_set x (mem_Union‚ÇÇ_of_mem (indexing.coe_mono $ le_max_left _ _) $ hnK x) using 1,
    apply quotient.sound,
    change (Œª x', f (n‚ÇÄ x') (1, x')) =·∂†[ùìù x] Œª (x' : X), f (n‚ÇÄ x) (T (n‚ÇÄ x + 1), x'),
    simp_rw ‚Üê hinvf (n‚ÇÄ x) 1 (T_lt _).le,
    exact ((key' (1, x) _ le_rfl).comp_fun (continuous.prod.mk 1).continuous_at).symm },
  { rintros p,
    convert h‚ÇÇf (n‚ÇÄ p.2) p using 1,
    apply quotient.sound,
    rw show ‚Üø(Œª t x, f (n‚ÇÄ x) (t, x)) = Œª p : ‚Ñù √ó X, f (n‚ÇÄ p.2) p, by ext ‚ü®s, y‚ü© ; refl,
    exact (key' p _ le_rfl).symm }
end
