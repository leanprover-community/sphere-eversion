import global.inductive_htpy_construction
import global.localized_construction
import global.localisation_data
/-!
# Gromov's theorem

We prove the h-principle for open and ample first order differential relations.
-/

noncomputable theory

open set filter model_with_corners metric
open_locale topological_space manifold

variables
{EM : Type*} [normed_add_comm_group EM] [normed_space ‚Ñù EM] [finite_dimensional ‚Ñù EM]
{HM : Type*} [topological_space HM] {IM : model_with_corners ‚Ñù EM HM} [boundaryless IM]
{M : Type*} [topological_space M] [charted_space HM M] [smooth_manifold_with_corners IM M]
[t2_space M] [sigma_compact_space M]

{EX : Type*} [normed_add_comm_group EX] [normed_space ‚Ñù EX] [finite_dimensional ‚Ñù EX]
{HX : Type*} [topological_space HX] {IX : model_with_corners ‚Ñù EX HX} [model_with_corners.boundaryless IX]
-- note: X is a metric space
{X : Type*} [metric_space X] [charted_space HX X] [smooth_manifold_with_corners IX X]
[sigma_compact_space X]

{R : rel_mfld IM M IX X}
{A : set M} {Œ¥ : M ‚Üí ‚Ñù}

set_option trace.filter_inst_type true

variables [nonempty M] [nonempty X] [locally_compact_space M] [locally_compact_space X]

local notation `J¬π` := one_jet_bundle IM M IX X

lemma rel_mfld.ample.satisfies_h_principle (hRample : R.ample) (hRopen : is_open R)
  (hA : is_closed A)
  (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x) (hŒ¥_cont : continuous Œ¥) :
  R.satisfies_h_principle A Œ¥ :=
begin
  borelize EX,
  refine rel_mfld.satisfies_h_principle_of_weak hA _,
  unfreezingI { clear_dependent A },
  intros A hA ùìï‚ÇÄ hùìï‚ÇÄ,

  have cont : continuous ùìï‚ÇÄ.bs, from ùìï‚ÇÄ.smooth_bs.continuous,
  let L : localisation_data IM IX ùìï‚ÇÄ.bs := std_localisation_data EM IM EX IX cont,
  let K : index_type L.N ‚Üí set M := Œª i, (L.œÜ i) '' (closed_ball (0:EM) 1),
  let U : index_type L.N ‚Üí set M := Œª i, range (L.œÜ i),
  have K_cover : (‚ãÉ i, K i) = univ,
    from eq_univ_of_subset (Union_mono (Œª i, image_subset _ ball_subset_closed_ball)) L.h‚ÇÅ,
  let œÑ := Œª x : M, min (Œ¥ x) (L.Œµ x),
  have œÑ_pos : ‚àÄ x, 0 < œÑ x, from Œª x, lt_min (hŒ¥_pos x) (L.Œµ_pos x),
  have œÑ_cont : continuous œÑ, from hŒ¥_cont.min L.Œµ_cont,
  have := (Œª (x : M) (F' : germ (ùìù x) J¬π), F'.value = ùìï‚ÇÄ x),
  let P‚ÇÄ : Œ† x : M, germ (ùìù x) J¬π ‚Üí Prop := Œª x F,
    F.value.1.1 = x ‚àß
    F.value ‚àà R ‚àß
    F.cont_mdiff_at' IM ((IM.prod IX).prod ùìò(‚Ñù, EM ‚ÜíL[‚Ñù] EX)) ‚àû ‚àß
    restrict_germ_predicate (Œª x F', F'.value = ùìï‚ÇÄ x) A x F ‚àß
    dist (F.value.1.2) (ùìï‚ÇÄ.bs x) < œÑ x,

  let P‚ÇÅ : Œ† x : M, germ (ùìù x) J¬π ‚Üí Prop := Œª x F, is_holonomic_germ F,
  let P‚ÇÇ : Œ† p : ‚Ñù √ó M, germ (ùìù p) J¬π ‚Üí Prop := Œª p F,
    F.cont_mdiff_at' (ùìò(‚Ñù).prod IM) ((IM.prod IX).prod ùìò(‚Ñù, EM ‚ÜíL[‚Ñù] EX)) ‚àû,
  have hP‚ÇÇ : ‚àÄ (a b : ‚Ñù) (p : ‚Ñù √ó M) (f : ‚Ñù √ó M ‚Üí one_jet_bundle IM M IX X),
    P‚ÇÇ (a*p.1+b, p.2) f ‚Üí P‚ÇÇ p (Œª p : ‚Ñù √ó M, f (a*p.1+b, p.2)),
  { rintros a b ‚ü®t, x‚ü© f h,
    change cont_mdiff_at _ _ _ (f ‚àò Œª (p : ‚Ñù √ó M), (a * p.1 + b, p.2)) (t, x),
    change cont_mdiff_at _ _ _ f ((Œª (p : ‚Ñù √ó M), (a * p.1 + b, p.2)) (t, x)) at h,
    have : cont_mdiff_at (ùìò(‚Ñù, ‚Ñù).prod IM) (ùìò(‚Ñù, ‚Ñù).prod IM) ‚àû (Œª (p : ‚Ñù √ó M), (a * p.1 + b, p.2)) (t, x),
    { have h‚ÇÅ : cont_mdiff_at ùìò(‚Ñù, ‚Ñù) ùìò(‚Ñù, ‚Ñù) ‚àû (Œª t, a * t + b) t,
      from cont_mdiff_at_iff_cont_diff_at.mpr
        (((cont_diff_at_id : cont_diff_at ‚Ñù ‚àû id t).const_smul a).add cont_diff_at_const),
      exact h‚ÇÅ.prod_map cont_mdiff_at_id },
    exact h.comp (t, x) this },
  have init : ‚àÄ x : M, P‚ÇÄ x (ùìï‚ÇÄ : M ‚Üí J¬π),
  { refine Œª x, ‚ü®rfl, ùìï‚ÇÄ.is_sol x, ùìï‚ÇÄ.smooth x, _, _‚ü©,
    { revert x,
      exact forall_restrict_germ_predicate_of_forall (Œª x, rfl) },
    { erw dist_self,
      exact œÑ_pos x } },
  have ind : ‚àÄ (i : index_type L.N) (f : M ‚Üí J¬π), (‚àÄ x, P‚ÇÄ x f) ‚Üí (‚àÄ·∂† x near ‚ãÉ j < i, K j, P‚ÇÅ x f) ‚Üí
    ‚àÉ F : ‚Ñù ‚Üí M ‚Üí J¬π, (‚àÄ t, ‚àÄ x, P‚ÇÄ x $ F t) ‚àß (‚àÄ·∂† x near ‚ãÉ j ‚â§ i, K j, P‚ÇÅ x $ F 1) ‚àß
                     (‚àÄ p, P‚ÇÇ p ‚ÜøF) ‚àß (‚àÄ t, ‚àÄ x ‚àâ U i, F t x = f x) ‚àß
                     (‚àÄ·∂† t near Iic 0, F t = f) ‚àß (‚àÄ·∂† t near Ici 1, F t = F 1),
  { intros i f hf‚ÇÄ hf‚ÇÅ,
    let K‚ÇÄ : set EM := closed_ball 0 1,
    have hK‚ÇÄ : is_compact K‚ÇÄ, from is_compact_closed_ball 0 1,
    let K‚ÇÅ : set EM := closed_ball 0 2,
    have hK‚ÇÅ : is_compact K‚ÇÅ, from is_compact_closed_ball 0 2,
    have hK‚ÇÄK‚ÇÅ : K‚ÇÄ ‚äÜ interior K‚ÇÅ,
    { dsimp [K‚ÇÄ, K‚ÇÅ],
      rw interior_closed_ball (0 : EM) (by norm_num : (2 : ‚Ñù) ‚â† 0),
      exact closed_ball_subset_ball (by norm_num) },
    let C := ‚ãÉ j < i, (L.œÜ j) '' closed_ball 0 1,
    have hC : is_closed C,
    { -- TODO: rewrite localization_data.is_closed_Union to match this.
      exact is_closed_bUnion (finite_Iio _) (Œª j hj, (hK‚ÇÄ.image $ (L.œÜ j).continuous).is_closed) },
    simp only [P‚ÇÄ, forall_and_distrib] at hf‚ÇÄ,
    rcases hf‚ÇÄ with ‚ü®hf_sec, hf_sol, hf_smooth, hf_A, hf_dist‚ü©,
    rw forall_restrict_germ_predicate_iff at hf_A,
    let F : formal_sol R := mk_formal_sol f hf_sec hf_sol hf_smooth,
    have hFAC : ‚àÄ·∂† x near A ‚à™ C, F.is_holonomic_at x,
    { rw eventually_nhds_set_union,
      refine ‚ü®_, hf‚ÇÅ‚ü©,
      apply (hf_A.and hùìï‚ÇÄ).eventually_nhds_set.mono (Œª x hx, _),
      rw eventually_and at hx,
      apply hx.2.self_of_nhds.congr,
      apply hx.1.mono (Œª x' hx', _),
      simp [F],
      exact hx'.symm },
    have hFœÜœà : F.bs '' (range $ L.œÜ i) ‚äÜ range (L.œàj i),
    { rw ‚Üê range_comp,
      apply L.Œµ_spec,
      intro x,
      calc dist (F.bs x) (ùìï‚ÇÄ.bs x) = dist (f x).1.2 (ùìï‚ÇÄ.bs x) : by simp only [F, mk_formal_sol_bs_apply]
      ... < œÑ x : hf_dist x
      ... ‚â§ L.Œµ x : min_le_right _ _ },
    let Œ∑ : M ‚Üí ‚Ñù := Œª x, œÑ x - dist (f x).1.2 (ùìï‚ÇÄ.bs x),
    have Œ∑_pos : ‚àÄ x, 0 < Œ∑ x,
    { exact Œª x, sub_pos.mpr (hf_dist x) },
    have Œ∑_cont : continuous Œ∑,
    { have : cont_mdiff IM ((IM.prod IX).prod ùìò(‚Ñù, EM ‚ÜíL[‚Ñù] EX)) ‚àû f, from Œª x, hf_smooth x,
      apply œÑ_cont.sub,
      exact ((one_jet_bundle_proj_continuous IM M IX X).comp this.continuous).snd.dist
        ùìï‚ÇÄ.smooth_bs.continuous },
    rcases (L.œÜ i).improve_formal_sol (L.œàj i) hRample hRopen (hA.union hC) Œ∑_pos Œ∑_cont hFœÜœà hFAC
      hK‚ÇÄ hK‚ÇÅ hK‚ÇÄK‚ÇÅ with ‚ü®F', hF'‚ÇÄ, hF'‚ÇÅ, hF'AC, hF'K‚ÇÅ, hF'Œ∑, hF'hol‚ü©,
    refine ‚ü®Œª t x, F' t x, _, _, _, _, _, _‚ü©,
    { refine Œª t x, ‚ü®rfl, F'.is_sol, (F' t).smooth x, _, _‚ü©,
      { revert x,
        rw forall_restrict_germ_predicate_iff,
        rw [eventually_nhds_set_union] at hF'AC,
        apply (hF'AC.1.and hf_A).mono,
        rintros x ‚ü®hx, hx'‚ü©,
        change F' t x = _,
        rw [hx t, ‚Üê hx', mk_formal_sol_apply],
        refl },
      { calc dist (F' t x).1.2 (ùìï‚ÇÄ.bs x) ‚â§ dist (F' t x).1.2 (F.bs x) + dist (F.bs x) (ùìï‚ÇÄ.bs x) : dist_triangle _ _ _
        ... < Œ∑ x + dist (F.bs x) (ùìï‚ÇÄ.bs x) : add_lt_add_right (hF'Œ∑ t x) _
        ... = œÑ x : by simp [Œ∑] } },
    { rw [union_assoc, eventually_nhds_set_union] at hF'hol,
      replace hF'hol := hF'hol.2,
      simp_rw [‚Üê L.Union_succ'] at hF'hol,
      exact hF'hol },
    { exact F'.smooth },
    { intros t x hx,
      rw hF'K‚ÇÅ t x ((mem_range_of_mem_image _ _).mt hx),
      simp [F] },
    { apply hF'‚ÇÄ.mono (Œª x hx, _),
      erw hx,
      ext1 y,
      simp [F] },
    { apply hF'‚ÇÅ.mono (Œª x hx, _),
      rw hx } },
  rcases inductive_htpy_construction P‚ÇÄ P‚ÇÅ P‚ÇÇ hP‚ÇÇ L.lf_œÜ K_cover init ind with ‚ü®F, hF‚ÇÄ, hFP‚ÇÄ, hFP‚ÇÅ, hFP‚ÇÇ‚ü©,
  simp only [P‚ÇÄ, forall‚ÇÇ_and_distrib] at hFP‚ÇÄ,
  rcases hFP‚ÇÄ with ‚ü®hF_sec, hF_sol, hF_smooth, hF_A, hF_dist‚ü©,
  refine ‚ü®mk_htpy_formal_sol F hF_sec hF_sol hFP‚ÇÇ, _, _, _, _‚ü©,
  { intros x,
    rw [mk_htpy_formal_sol_apply, hF‚ÇÄ] },
  { exact hFP‚ÇÅ },
  { intros x hx t,
    rw mk_htpy_formal_sol_apply,
    exact (forall_restrict_germ_predicate_iff.mp $ hF_A t).on_set x hx },
  { intros t x,
    change dist (mk_htpy_formal_sol F hF_sec hF_sol hFP‚ÇÇ t x).1.2 (ùìï‚ÇÄ.bs x) ‚â§ Œ¥ x,
    rw mk_htpy_formal_sol_apply,
    exact (hF_dist t x).le.trans (min_le_left _ _) }
end
