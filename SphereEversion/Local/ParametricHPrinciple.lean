import SphereEversion.Local.HPrinciple
import SphereEversion.ToMathlib.Topology.Algebra.Module

/-!
In this file we prove the parametric version of the local h-principle.

We will not use this to prove the global version of the h-principle, but we do use this to conclude
the existence of sphere eversion from the local h-principle, which is proven in `Local.HPrinciple`.

The parametric h-principle states the following: Suppose that `R` is a local relation,
`ùìï‚ÇÄ : P ‚Üí J¬π(E, F)` is a family of formal solutions of `R` that is holonomic near some set
`C ‚äÜ P √ó E`, `K ‚äÜ P √ó E` is compact and `Œµ : ‚Ñù`,
then there exists a homotopy `ùìï : ‚Ñù √ó P ‚Üí J¬π(E, F)` between `ùìï` and a solution that is holonomic
near `K`, that agrees with `ùìï‚ÇÄ` near `C` and is everywhere `Œµ`-close to `ùìï‚ÇÄ`
-/


noncomputable section

open Metric FiniteDimensional Set Function RelLoc

open LinearMap (ker)

open scoped Topology Pointwise ContDiff

section ParameterSpace

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  -- `G` will be `‚Ñù` in the proof of the parametric h-principle.
  -- It indicates the homotopy variable `t`.
  {G : Type*}
  [NormedAddCommGroup G] [NormedSpace ‚Ñù G] {P : Type*} [NormedAddCommGroup P] [NormedSpace ‚Ñù P]

variable {R : RelLoc E F}

/-- The projection `J¬π(P √ó E, F) ‚Üí J¬π(E, F)`. -/
def oneJetSnd : OneJet (P √ó E) F ‚Üí OneJet E F := fun p ‚Ü¶
  (p.1.2, p.2.1, p.2.2 ‚àòL fderiv ‚Ñù (fun y ‚Ü¶ (p.1.1, y)) p.1.2)

theorem continuous_oneJetSnd : Continuous (oneJetSnd : OneJet (P √ó E) F ‚Üí OneJet E F) :=
  continuous_fst.snd.prodMk <|
    continuous_snd.fst.prodMk <|
      continuous_snd.snd.clm_comp <|
        Continuous.fderiv (contDiff_fst.fst.prodMap contDiff_id) continuous_fst.snd le_top

theorem oneJetSnd_eq (p : OneJet (P √ó E) F) :
    oneJetSnd p = (p.1.2, p.2.1, p.2.2 ‚àòL ContinuousLinearMap.inr ‚Ñù P E) := by
  simp_rw [oneJetSnd, fderiv_prod_right]

variable (P)

/-- The relation `R.relativize P` (`ùì° ^ P` in the blueprint) is the relation on `J¬π(P √ó E, F)`
induced by `R`. -/
def RelLoc.relativize (R : RelLoc E F) : RelLoc (P √ó E) F :=
  oneJetSnd ‚Åª¬π' R

variable {P} (R)

theorem RelLoc.mem_relativize (w : OneJet (P √ó E) F) :
    w ‚àà R.relativize P ‚Üî (w.1.2, w.2.1, w.2.2 ‚àòL ContinuousLinearMap.inr ‚Ñù P E) ‚àà R := by
  simp_rw [RelLoc.relativize, mem_preimage, oneJetSnd_eq]

theorem RelLoc.isOpen_relativize (R : RelLoc E F) (h2 : IsOpen R) : IsOpen (R.relativize P) :=
  h2.preimage continuous_oneJetSnd

variable {R}

theorem relativize_slice_loc {œÉ : OneJet (P √ó E) F} {p : DualPair (P √ó E)} (q : DualPair E)
    (hpq : p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù P E) = q.œÄ) :
    (R.relativize P).slice p œÉ = œÉ.2.2 (p.v - (0, q.v)) +·µ• R.slice q (oneJetSnd œÉ) := by
  have h2pq : ‚àÄ x : E, p.œÄ ((0 : P), x) = q.œÄ x := fun x ‚Ü¶ congr_arg (fun f : E ‚ÜíL[‚Ñù] ‚Ñù ‚Ü¶ f x) hpq
  ext1 w
  have h1 :
    (p.update œÉ.2.2 w).comp (ContinuousLinearMap.inr ‚Ñù P E) =
      q.update (oneJetSnd œÉ).2.2 (-œÉ.2.2 (p.v - (0, q.v)) +·µ• w) := by
    ext1 x
    simp_rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply]
    rw [‚Üê ContinuousLinearMap.map_neg, neg_sub]
    obtain ‚ü®u, hu, t, rfl‚ü© := q.decomp x
    have hv : (0, q.v) - p.v ‚àà ker p.œÄ := by
      rw [LinearMap.mem_ker, map_sub, p.pairing, h2pq, q.pairing, sub_self]
    have hup : ((0 : P), u) ‚àà ker p.œÄ := (h2pq u).trans hu
    rw [q.update_apply _ hu, ‚Üê Prod.zero_mk_add_zero_mk, map_add, p.update_ker_pi _ _ hup, ‚Üê
      Prod.smul_zero_mk, map_smul, vadd_eq_add]
    conv_lhs => { rw [‚Üê sub_add_cancel (0, q.v) p.v] }
    rw [map_add, p.update_ker_pi _ _ hv, p.update_v, oneJetSnd_eq]
    rfl
  have := preimage_vadd_neg (show F from œÉ.2.2 (p.v - (0, q.v))) (R.slice q (oneJetSnd œÉ))
  dsimp only at this
  simp_rw [‚Üê this, mem_preimage, mem_slice, R.mem_relativize, h1]
  rfl

theorem relativize_slice_eq_univ_loc {œÉ : OneJet (P √ó E) F} {p : DualPair (P √ó E)}
    (hp : p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù P E) = 0) :
    ((R.relativize P).slice p œÉ).Nonempty ‚Üî (R.relativize P).slice p œÉ = univ := by
  have h2p : ‚àÄ x : E, p.œÄ ((0 : P), x) = 0 := fun x ‚Ü¶ congr_arg (fun f : E ‚ÜíL[‚Ñù] ‚Ñù ‚Ü¶ f x) hp
  have : ‚àÄ y : F,
      (p.update œÉ.2.2 y).comp (ContinuousLinearMap.inr ‚Ñù P E) =
        œÉ.2.2.comp (ContinuousLinearMap.inr ‚Ñù P E) := by
    intro y
    ext1 x
    simp_rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply,
      p.update_ker_pi _ _ (h2p x)]
  simp_rw [Set.Nonempty, eq_univ_iff_forall, mem_slice, R.mem_relativize, this, exists_const,
           forall_const]

variable (P)

theorem RelLoc.IsAmple.relativize (hR : R.IsAmple) : (R.relativize P).IsAmple := by
  intro p œÉ
  let p2 := p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù P E)
  rcases eq_or_ne p2 0 with (h | h)
  ¬∑ intro w hw
    rw [(relativize_slice_eq_univ_loc h).mp ‚ü®w, hw‚ü©, connectedComponentIn_univ,
      PreconnectedSpace.connectedComponent_eq_univ, convexHull_univ]
  obtain ‚ü®u', hu'‚ü© := ContinuousLinearMap.exists_ne_zero h
  let u := (p2 u')‚Åª¬π ‚Ä¢ u'
  let q : DualPair E := ‚ü®p2, u, by rw [p2.map_smul, smul_eq_mul, inv_mul_cancel‚ÇÄ hu']‚ü©
  rw [relativize_slice_loc q rfl]
  exact (hR q _).vadd

variable {P}

/-- Turn a family of sections of `J¬π(E, E')` parametrized by `P` into a section of `J¬π(P √ó E, E')`.
-/
@[simps]
def FamilyJetSec.uncurry (S : FamilyJetSec E F P) : JetSec (P √ó E) F where
  f p := S.f p.1 p.2
  œÜ p := fderiv ‚Ñù (fun z : P √ó E ‚Ü¶ S.f z.1 p.2) p + S.œÜ p.1 p.2 ‚àòL fderiv ‚Ñù Prod.snd p
  f_diff := S.f_diff
  œÜ_diff := by
    refine (ContDiff.fderiv ?_ contDiff_id (m := ‚àû) le_rfl).add (S.œÜ_diff.clm_comp ?_)
    ¬∑ exact S.f_diff.comp (contDiff_snd.fst.prodMk contDiff_fst.snd)
    ¬∑ exact ContDiff.fderiv contDiff_snd.snd contDiff_id le_top

theorem FamilyJetSec.uncurry_œÜ' (S : FamilyJetSec E F P) (p : P √ó E) :
    S.uncurry.œÜ p =
      fderiv ‚Ñù (fun z ‚Ü¶ S.f z p.2) p.1 ‚àòL ContinuousLinearMap.fst ‚Ñù P E +
        S.œÜ p.1 p.2 ‚àòL ContinuousLinearMap.snd ‚Ñù P E := by
  simp_rw [S.uncurry_œÜ, fderiv_snd, add_left_inj]
  refine (fderiv_comp p ((S.f_diff.comp (contDiff_id.prodMk contDiff_const)).differentiable
    (mod_cast le_top) p.1) differentiableAt_fst).trans ?_
  rw [fderiv_fst]
  rfl

open ContinuousLinearMap
theorem FamilyJetSec.uncurry_mem_relativize (S : FamilyJetSec E F P) {s : P} {x : E} :
    ((s, x), S.uncurry (s, x)) ‚àà R.relativize P ‚Üî (x, S s x) ‚àà R := by
  rw [RelLoc.relativize, mem_preimage, oneJetSnd_eq, JetSec.coe_apply, JetSec.coe_apply,
    S.uncurry_f, S.uncurry_œÜ']
  suffices ((D (fun z ‚Ü¶ f S z x) s).comp (fst ‚Ñù P E) + (œÜ S s x).comp (snd ‚Ñù P E)).comp
      (ContinuousLinearMap.inr ‚Ñù P E) = JetSec.œÜ (S s) x by
    rw [this]; rfl
  ext v
  simp_rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.add_apply,
    ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply, ContinuousLinearMap.coe_fst',
    ContinuousLinearMap.coe_snd', ContinuousLinearMap.map_zero, zero_add]
  rfl

theorem FamilyJetSec.isHolonomicAt_uncurry (S : FamilyJetSec E F P) {p : P √ó E} :
    S.uncurry.IsHolonomicAt p ‚Üî (S p.1).IsHolonomicAt p.2 := by
  simp_rw [JetSec.IsHolonomicAt, S.uncurry_œÜ]
  rw [show S.uncurry.f = fun x ‚Ü¶ S.uncurry.f x from rfl, funext S.uncurry_f,
    show (fun x : P √ó E ‚Ü¶ S.f x.1 x.2) = ‚ÜøS.f from rfl]
  rw [fderiv_prod_eq_add (S.f_diff.differentiable (mod_cast le_top) _), fderiv_snd]
  refine (add_right_inj _).trans ?_
  have := fderiv_comp p ((S p.1).f_diff.contDiffAt.differentiableAt (mod_cast le_top))
    differentiableAt_snd
  rw [show D (fun z : P √ó E ‚Ü¶ (‚ÜøS.f) (p.fst, z.snd)) p = _ from this, fderiv_snd,
    (show Surjective (ContinuousLinearMap.snd ‚Ñù P E) from
          Prod.snd_surjective).clm_comp_injective.eq_iff]
  rfl

/-- Turn a family of formal solutions of `R ‚äÜ J¬π(E, E')` parametrized by `P` into a formal solution
of `R.relativize P`. -/
def RelLoc.FamilyFormalSol.uncurry (S : R.FamilyFormalSol P) : FormalSol (R.relativize P) := by
  refine ‚ü®S.toFamilyJetSec.uncurry, ?_‚ü©
  rintro ‚ü®s, x‚ü©
  exact S.toFamilyJetSec.uncurry_mem_relativize.mpr (S.is_sol s x)

theorem RelLoc.FamilyFormalSol.uncurry_œÜ' (S : R.FamilyFormalSol P) (p : P √ó E) :
    (S.uncurry p).2 =
      fderiv ‚Ñù (fun z ‚Ü¶ S.f z p.2) p.1 ‚àòL ContinuousLinearMap.fst ‚Ñù P E +
        S.œÜ p.1 p.2 ‚àòL ContinuousLinearMap.snd ‚Ñù P E :=
  S.toFamilyJetSec.uncurry_œÜ' p

/-- Turn a family of sections of `J¬π(P √ó E, F)` parametrized by `G` into a family of sections of
`J¬π(E, F)` parametrized by `G √ó P`. -/
def FamilyJetSec.curry (S : FamilyJetSec (P √ó E) F G) : FamilyJetSec E F (G √ó P) where
  f p x := (S p.1).f (p.2, x)
  œÜ p x := (S p.1).œÜ (p.2, x) ‚àòL fderiv ‚Ñù (fun x ‚Ü¶ (p.2, x)) x
  f_diff := S.f_diff.comp ((contDiff_prodAssoc : ContDiff ‚Ñù œâ (Equiv.prodAssoc G P E)).of_le le_top)
  œÜ_diff := by
    refine (S.œÜ_diff.comp
      ((contDiff_prodAssoc : ContDiff ‚Ñù œâ (Equiv.prodAssoc G P E)).of_le le_top)).clm_comp ?_
    refine ContDiff.fderiv ?_ contDiff_snd le_top
    exact contDiff_fst.fst.snd.prodMk contDiff_snd

theorem FamilyJetSec.curry_f (S : FamilyJetSec (P √ó E) F G) (p : G √ó P) (x : E) :
    (S.curry p).f x = (S p.1).f (p.2, x) :=
  rfl

theorem FamilyJetSec.curry_œÜ (S : FamilyJetSec (P √ó E) F G) (p : G √ó P) (x : E) :
    (S.curry p).œÜ x = (S p.1).œÜ (p.2, x) ‚àòL fderiv ‚Ñù (fun x ‚Ü¶ (p.2, x)) x :=
  rfl

theorem FamilyJetSec.curry_œÜ' (S : FamilyJetSec (P √ó E) F G) (p : G √ó P) (x : E) :
    (S.curry p).œÜ x = (S p.1).œÜ (p.2, x) ‚àòL ContinuousLinearMap.inr ‚Ñù P E := by
  rw [S.curry_œÜ]
  congr 1
  refine ((differentiableAt_const _).fderiv_prodMk differentiableAt_id).trans ?_
  rw [fderiv_id, fderiv_fun_const]
  rfl

theorem FamilyJetSec.isHolonomicAt_curry (S : FamilyJetSec (P √ó E) F G) {t : G} {s : P} {x : E}
    (hS : (S t).IsHolonomicAt (s, x)) : (S.curry (t, s)).IsHolonomicAt x := by
  simp_rw [JetSec.IsHolonomicAt, S.curry_œÜ] at hS ‚ä¢
  rw [show (S.curry (t, s)).f = fun x ‚Ü¶ (S.curry (t, s)).f x from rfl, funext (S.curry_f _)]
  refine (fderiv_comp x ((S t).f_diff.contDiffAt.differentiableAt (mod_cast le_top))
    ((differentiableAt_const _).prodMk differentiableAt_id)).trans ?_
  rw [_root_.id, hS]
  rfl

theorem FamilyJetSec.curry_mem (S : FamilyJetSec (P √ó E) F G) {p : G √ó P} {x : E}
    (hR : ((p.2, x), S p.1 (p.2, x)) ‚àà R.relativize P) : (x, S.curry p x) ‚àà R := by
  unfold RelLoc.relativize at hR
  rwa [mem_preimage, JetSec.coe_apply, oneJetSnd_eq, ‚Üê S.curry_œÜ'] at hR

/-- Turn a family of formal solutions of `R.relativize P` parametrized by `G` into a family of
formal solutions of `R` parametrized by `G √ó P`. -/
def RelLoc.FamilyFormalSol.curry (S : FamilyFormalSol G (R.relativize P)) :
    FamilyFormalSol (G √ó P) R :=
  ‚ü®S.toFamilyJetSec.curry, fun _ _ ‚Ü¶ S.toFamilyJetSec.curry_mem (S.is_sol _ _)‚ü©

theorem RelLoc.FamilyFormalSol.curry_œÜ (S : FamilyFormalSol G (R.relativize P)) (p : G √ó P)
    (x : E) : (S.curry p).œÜ x = (S p.1).œÜ (p.2, x) ‚àòL fderiv ‚Ñù (fun x ‚Ü¶ (p.2, x)) x :=
  rfl

theorem RelLoc.FamilyFormalSol.curry_œÜ' (S : FamilyFormalSol G (R.relativize P)) (p : G √ó P)
    (x : E) : (S.curry p x).2 = (S p.1 (p.2, x)).2 ‚àòL ContinuousLinearMap.inr ‚Ñù P E :=
  S.toFamilyJetSec.curry_œÜ' p x

theorem curry_eq_iff_eq_uncurry_loc {ùìï : FamilyFormalSol G (R.relativize P)}
    {ùìï‚ÇÄ : R.FamilyFormalSol P} {t : G} {x : E} {s : P} (h : ùìï t (s, x) = ùìï‚ÇÄ.uncurry (s, x)) :
    (ùìï.curry (t, s)) x = ùìï‚ÇÄ s x := by
  simp_rw [Prod.ext_iff] at h ‚ä¢
  refine ‚ü®h.1, ?_‚ü©
  simp_rw [ùìï.curry_œÜ', h.2, ùìï‚ÇÄ.uncurry_œÜ']
  change ((D (fun (z : P) ‚Ü¶ ùìï‚ÇÄ.toFamilyJetSec.f z x) s).comp (fst ‚Ñù P E)
    + (ùìï‚ÇÄ.toFamilyJetSec.œÜ s x).comp (snd ‚Ñù P E)).comp (inr ‚Ñù P E) = ((ùìï‚ÇÄ s) x).snd
  ext v
  simp_rw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.add_apply,
    ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply, ContinuousLinearMap.coe_fst',
    ContinuousLinearMap.coe_snd', ContinuousLinearMap.map_zero, zero_add]
  rfl

end ParameterSpace

section ParametricHPrinciple

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {F : Type*}
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [FiniteDimensional ‚Ñù F] {G : Type*}
  [NormedAddCommGroup G] [NormedSpace ‚Ñù G] {P : Type*} [NormedAddCommGroup P] [NormedSpace ‚Ñù P]
  [FiniteDimensional ‚Ñù P]

variable {R : RelLoc E F} (h_op : IsOpen R) (h_ample : R.IsAmple) (L : Landscape E)

include h_op h_ample in
-- The local parametric h-principle.
theorem RelLoc.FamilyFormalSol.improve_htpy {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ) (C : Set (P √ó E))
    (hC : IsClosed C) (K : Set (P √ó E)) (hK : IsCompact K) (ùìï‚ÇÄ : FamilyFormalSol P R)
    (h_hol : ‚àÄ·∂† p : P √ó E near C, (ùìï‚ÇÄ p.1).IsHolonomicAt p.2) :
    ‚àÉ ùìï : FamilyFormalSol (‚Ñù √ó P) R,
      (‚àÄ s x, ùìï (0, s) x = ùìï‚ÇÄ s x) ‚àß
        (‚àÄ·∂† p : P √ó E near C, ‚àÄ t, ùìï (t, p.1) p.2 = ùìï‚ÇÄ p.1 p.2) ‚àß
          (‚àÄ s x t, ‚Äñ(ùìï (t, s)).f x - ùìï‚ÇÄ.f s x‚Äñ ‚â§ Œµ) ‚àß
            ‚àÄ·∂† p : P √ó E near K, (ùìï (1, p.1)).IsHolonomicAt p.2 := by
  let parametric_landscape : Landscape (P √ó E) :=
    { C
      K‚ÇÄ := K
      K‚ÇÅ := (exists_compact_superset hK).choose
      hC
      hK‚ÇÄ := hK
      hK‚ÇÅ := (exists_compact_superset hK).choose_spec.1
      h‚ÇÄ‚ÇÅ := (exists_compact_superset hK).choose_spec.2 }
  obtain ‚ü®ùìï, h‚ÇÅ, -, h‚ÇÇ, -, h‚ÇÑ, h‚ÇÖ‚ü© :=
    ùìï‚ÇÄ.uncurry.improve_htpy' (R.isOpen_relativize h_op) (h_ample.relativize P) parametric_landscape
      Œµ_pos (h_hol.mono fun p hp ‚Ü¶ ùìï‚ÇÄ.isHolonomicAt_uncurry.mpr hp)
  have h‚ÇÅ : ‚àÄ p, ùìï 0 p = ùìï‚ÇÄ.uncurry p := by intro p; rw [h‚ÇÅ.self_of_nhdsSet 0 right_mem_Iic]; rfl
  refine ‚ü®ùìï.curry, ?_, ?_, ?_, ?_‚ü©
  ¬∑ intro s x; exact curry_eq_iff_eq_uncurry_loc (h‚ÇÅ (s, x))
  ¬∑ refine h‚ÇÇ.mono ?_; rintro ‚ü®s, x‚ü© hp t; exact curry_eq_iff_eq_uncurry_loc (hp t)
  ¬∑ intro s x t; exact (h‚ÇÑ (s, x) t).le
  ¬∑ refine h‚ÇÖ.mono ?_; rintro ‚ü®s, x‚ü© hp; exact ùìï.toFamilyJetSec.isHolonomicAt_curry hp

open Filter

open scoped unitInterval

include h_op h_ample in
/-- A corollary of the local parametric h-principle, forgetting the homotopy and `Œµ`-closeness,
and just stating the existence of a solution that is holonomic near `K`.
Furthermore, we assume that `P = ‚Ñù` and `K` is of the form `compact set √ó I`.
This is sufficient to prove sphere eversion. -/
theorem RelLoc.HtpyFormalSol.exists_sol (ùìï‚ÇÄ : R.HtpyFormalSol) (C : Set (‚Ñù √ó E)) (hC : IsClosed C)
    (K : Set E) (hK : IsCompact K) (h_hol : ‚àÄ·∂† p : ‚Ñù √ó E near C, (ùìï‚ÇÄ p.1).IsHolonomicAt p.2) :
    ‚àÉ f : ‚Ñù ‚Üí E ‚Üí F,
      (ùíû ‚àû <| uncurry f) ‚àß
        (‚àÄ p ‚àà C, f (p : ‚Ñù √ó E).1 p.2 = (ùìï‚ÇÄ p.1).f p.2) ‚àß
          ‚àÄ x ‚àà K, ‚àÄ t ‚àà I, (x, f t x, D (f t) x) ‚àà R := by
  obtain ‚ü®ùìï, _, h‚ÇÇ, -, h‚ÇÑ‚ü© :=
    ùìï‚ÇÄ.improve_htpy h_op h_ample zero_lt_one C hC (I √óÀ¢ K) (isCompact_Icc.prod hK) h_hol
  refine ‚ü®fun s ‚Ü¶ (ùìï (1, s)).f, ?_, ?_, ?_‚ü©
  ¬∑ exact ùìï.f_diff.comp ((contDiff_const.prodMk contDiff_id).prodMap contDiff_id)
  ¬∑ intro p hp
    exact (Prod.ext_iff.mp ((h‚ÇÇ.forall_mem principal_le_nhdsSet) p hp 1)).1
  ¬∑ intro x hx t ht
    rw [show D (ùìï (1, t)).f x = (ùìï (1, t)).œÜ x from
        (h‚ÇÑ.forall_mem principal_le_nhdsSet) (t, x) (mk_mem_prod ht hx)]
    exact ùìï.is_sol (1, t) x

end ParametricHPrinciple
