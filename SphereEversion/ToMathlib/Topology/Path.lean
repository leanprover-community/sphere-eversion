import Mathlib.Analysis.Normed.Field.Basic
import Mathlib.Analysis.Normed.Order.Lattice
import Mathlib.Topology.Connected.PathConnected

open Set Function

open scoped Topology unitInterval

noncomputable section

variable {X X' Y Z : Type*} [TopologicalSpace X]
  [TopologicalSpace X'] [TopologicalSpace Y] [TopologicalSpace Z]

namespace Path

variable {x : X} {Œ≥ Œ≥' : Path x x}

/-- A loop evaluated at `t / t` is equal to its endpoint. Note that `t / t = 0` for `t = 0`. -/
@[simp]
theorem extend_div_self (Œ≥ : Path x x) (t : ‚Ñù) : Œ≥.extend (t / t) = x := by
  by_cases h : t = 0 <;> simp [h]

/-- Concatenation of two loops which moves through the first loop on `[0, t‚ÇÄ]` and
through the second one on `[t‚ÇÄ, 1]`. All endpoints are assumed to be the same so that this
function is also well-defined for `t‚ÇÄ ‚àà {0, 1}`.
`strans` stands either for a *s*kewed transitivity, or a transitivity with different *s*peeds. -/
def strans (Œ≥ Œ≥' : Path x x) (t‚ÇÄ : I) : Path x x where
  toFun t := if t ‚â§ t‚ÇÄ then Œ≥.extend (t / t‚ÇÄ) else Œ≥'.extend ((t - t‚ÇÄ) / (1 - t‚ÇÄ))
  continuous_toFun := by
    refine Continuous.if_le ?_ ?_ continuous_id continuous_const ?_
    ¬∑ continuity
    ¬∑ continuity
    ¬∑ simp only [extend_div_self, Icc.mk_zero, zero_le_one, zero_div, forall_eq,
        extend_extends, Path.source, left_mem_Icc, sub_self]
  source' := by simp
  target' := by
    simp +contextual only [unitInterval.le_one'.le_iff_eq.trans eq_comm,
      extend_div_self, Icc.coe_one, imp_true_iff, ite_eq_right_iff]

/-- Reformulate `strans` without using `extend`. This is useful to not have to prove that the
  arguments to `Œ≥` lie in `I` after this. -/
theorem strans_def {x : X} {t‚ÇÄ t : I} (Œ≥ Œ≥' : Path x x) :
    Œ≥.strans Œ≥' t‚ÇÄ t =
      if h : t ‚â§ t‚ÇÄ then Œ≥ ‚ü®t / t‚ÇÄ, unitInterval.div_mem t.2.1 t‚ÇÄ.2.1 h‚ü©
      else Œ≥' ‚ü®(t - t‚ÇÄ) / (1 - t‚ÇÄ),
        unitInterval.div_mem (sub_nonneg.mpr <| le_of_not_ge h) (sub_nonneg.mpr t‚ÇÄ.2.2)
          (sub_le_sub_right t.2.2 t‚ÇÄ)‚ü© := by
  split_ifs with h <;> simp [strans, h, ‚Üê extend_extends]

@[simp]
theorem strans_of_ge {t t‚ÇÄ : I} (h : t‚ÇÄ ‚â§ t) :
    Œ≥.strans Œ≥' t‚ÇÄ t = Œ≥'.extend ((t - t‚ÇÄ) / (1 - t‚ÇÄ)) := by
  simp only [Path.coe_mk_mk, Path.strans, ite_eq_right_iff]
  intro h2; obtain rfl := le_antisymm h h2; simp

theorem unitInterval.zero_le (x : I) : 0 ‚â§ x :=
  x.prop.1

@[simp]
theorem strans_zero (Œ≥ Œ≥' : Path x x) : Œ≥.strans Œ≥' 0 = Œ≥' := by
  ext t
  simp +contextual only [strans_of_ge (unitInterval.zero_le t), Icc.coe_zero, div_one,
    extend_extends', sub_zero]

@[simp]
theorem strans_one {x : X} (Œ≥ Œ≥' : Path x x) : Œ≥.strans Œ≥' 1 = Œ≥ := by
  ext t
  simp only [strans, unitInterval.le_one', Path.coe_mk_mk, if_pos, div_one, extend_extends',
    Icc.coe_one]

theorem strans_self {x : X} (Œ≥ Œ≥' : Path x x) (t‚ÇÄ : I) : Œ≥.strans Œ≥' t‚ÇÄ t‚ÇÄ = x := by
  simp only [strans, Path.coe_mk_mk, extend_div_self, if_pos, le_rfl]

@[simp]
theorem refl_strans_refl {x : X} {t‚ÇÄ : I} : (refl x).strans (refl x) t‚ÇÄ = refl x := by
  ext s
  simp [strans]

theorem subset_range_strans_left {x : X} {Œ≥ Œ≥' : Path x x} {t‚ÇÄ : I} (h : t‚ÇÄ ‚â† 0) :
    range Œ≥ ‚äÜ range (Œ≥.strans Œ≥' t‚ÇÄ) := by
  rintro _ ‚ü®t, rfl‚ü©
  use t * t‚ÇÄ
  field_simp [strans, unitInterval.mul_le_right, unitInterval.coe_ne_zero.mpr h]

theorem subset_range_strans_right {x : X} {Œ≥ Œ≥' : Path x x} {t‚ÇÄ : I} (h : t‚ÇÄ ‚â† 1) :
    range Œ≥' ‚äÜ range (Œ≥.strans Œ≥' t‚ÇÄ) := by
  rintro _ ‚ü®t, rfl‚ü©
  have := mul_nonneg t.2.1 (sub_nonneg.mpr t‚ÇÄ.2.2)
  let t' : I := ‚ü®t‚ÇÄ + t * (1 - t‚ÇÄ), add_nonneg t‚ÇÄ.2.1 this, by
      rw [add_comm, ‚Üê le_sub_iff_add_le]
      exact (mul_le_mul_of_nonneg_right t.2.2 <| sub_nonneg.mpr t‚ÇÄ.2.2).trans_eq (one_mul _)‚ü©
  have h2 : t‚ÇÄ ‚â§ t' := le_add_of_nonneg_right this
  have h3 := sub_ne_zero.mpr (unitInterval.coe_ne_one.mpr h).symm
  use t'
  simp [h2, h3, t']

theorem range_strans_subset {x : X} {Œ≥ Œ≥' : Path x x} {t‚ÇÄ : I} :
    range (Œ≥.strans Œ≥' t‚ÇÄ) ‚äÜ range Œ≥ ‚à™ range Œ≥' := by
  rintro _ ‚ü®t, rfl‚ü©
  by_cases h : t ‚â§ t‚ÇÄ
  ¬∑ rw [strans_def, dif_pos h]; exact Or.inl (mem_range_self _)
  ¬∑ rw [strans_def, dif_neg h]; exact Or.inr (mem_range_self _)

theorem Continuous.path_strans {X Y : Type*} [UniformSpace X]
    [LocallyCompactSpace X] [UniformSpace Y] {f : X ‚Üí Y} {t : X ‚Üí I} {s : X ‚Üí I}
    {Œ≥ Œ≥' : ‚àÄ x, Path (f x) (f x)} (hŒ≥ : Continuous ‚ÜøŒ≥) (hŒ≥' : Continuous ‚ÜøŒ≥')
    (hŒ≥0 : ‚àÄ ‚¶Éx s‚¶Ñ, t x = 0 ‚Üí Œ≥ x s = f x) (hŒ≥'1 : ‚àÄ ‚¶Éx s‚¶Ñ, t x = 1 ‚Üí Œ≥' x s = f x)
    (ht : Continuous t) (hs : Continuous s) :
    Continuous fun x ‚Ü¶ strans (Œ≥ x) (Œ≥' x) (t x) (s x) := by
  have hŒ≥0 : ‚àÄ {x‚ÇÄ}, t x‚ÇÄ = 0 ‚Üí
      TendstoUniformly (fun x ‚Ü¶ Œ≥ x) (fun _ ‚Ü¶ f x‚ÇÄ) (ùìù x‚ÇÄ) := fun h‚ÇÄ ‚Ü¶ by
    convert Continuous.tendstoUniformly (fun x ‚Ü¶ Œ≥ x) hŒ≥ _; rw [hŒ≥0 h‚ÇÄ]
  have hŒ≥'1 : ‚àÄ {x‚ÇÄ}, t x‚ÇÄ = 1 ‚Üí
      TendstoUniformly (fun x ‚Ü¶ Œ≥' x) (fun _ ‚Ü¶ f x‚ÇÄ) (ùìù x‚ÇÄ) := fun h‚ÇÄ ‚Ü¶ by
    convert Continuous.tendstoUniformly (fun x ‚Ü¶ Œ≥' x) hŒ≥' _; rw [hŒ≥'1 h‚ÇÄ]
  refine Continuous.if_le ?_ ?_ hs ht ?_
  ¬∑ rw [continuous_iff_continuousAt]
    intro x
    refine (continuous_subtype_val.comp hs).continuousAt.comp_div_cases (fun x s ‚Ü¶ (Œ≥ x).extend s)
      (continuous_subtype_val.comp ht).continuousAt ?_ ?_
    ¬∑ intro _
      refine ContinuousAt.pathExtend _ ?_ continuousAt_snd
      exact hŒ≥.continuousAt.comp (continuousAt_fst.fst.prodMk continuousAt_snd)
    ¬∑ intro h
      have ht : t x = 0 := Subtype.ext h
      apply Filter.Tendsto.pathExtend
      dsimp only; rw [(projIcc_surjective _).filter_map_top, extend_zero]
      exact tendsto_prod_top_iff.mpr (hŒ≥0 ht)
  ¬∑ rw [continuous_iff_continuousAt]
    intro x
    refine (continuous_subtype_val.comp hs).sub (continuous_subtype_val.comp ht)
      |>.continuousAt.comp_div_cases (fun x s ‚Ü¶ (Œ≥' x).extend s)
      (continuous_const.sub <| continuous_subtype_val.comp ht).continuousAt ?_ ?_
    ¬∑ intro _
      refine ContinuousAt.pathExtend _ ?_ continuousAt_snd
      exact hŒ≥'.continuousAt.comp (continuousAt_fst.fst.prodMk continuousAt_snd)
    ¬∑ intro h
      have ht : t x = 1 := Subtype.ext (sub_eq_zero.mp h).symm
      apply Filter.Tendsto.pathExtend
      dsimp only; rw [(projIcc_surjective _).filter_map_top, extend_zero]
      exact tendsto_prod_top_iff.mpr (hŒ≥'1 ht)
  ¬∑ rintro x h; rw [h, sub_self, zero_div, extend_div_self, extend_zero]

end Path
