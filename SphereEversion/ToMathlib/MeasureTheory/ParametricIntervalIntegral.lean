import Mathlib.Analysis.Calculus.ParametricIntegral
import Mathlib.Analysis.Calculus.ContDiff.FiniteDimension
import Mathlib.MeasureTheory.Integral.IntervalIntegral.FundThmCalculus
import SphereEversion.ToMathlib.Analysis.Calculus

open TopologicalSpace MeasureTheory Filter FirstCountableTopology Metric Set Function
open scoped Topology

section

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
  {H : Type*} [NormedAddCommGroup H] [NormedSpace ‚Ñù H]

/-!
We could weaken `FiniteDimensional ‚Ñù H` with `SecondCountable (H ‚ÜíL[‚Ñù] E)` if needed,
but that is less convenient to work with.
-/

open Real ContinuousLinearMap Asymptotics Interval

/-- This statement is a new version using the continuity note in mathlib.
See commit `39e3f3f` for an older version
Maybe todo: let `a` depend on `x`.
-/
theorem hasFDerivAt_parametric_primitive_of_lip' (F : H ‚Üí ‚Ñù ‚Üí E) (F' : ‚Ñù ‚Üí H ‚ÜíL[‚Ñù] E) {x‚ÇÄ : H}
    {G' : H ‚ÜíL[‚Ñù] E} {bound : ‚Ñù ‚Üí ‚Ñù} {s : H ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ) {a a‚ÇÄ b‚ÇÄ : ‚Ñù}
    {s' : H ‚ÜíL[‚Ñù] ‚Ñù} (ha : a ‚àà Ioo a‚ÇÄ b‚ÇÄ) (hsx‚ÇÄ : s x‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ)
    (hF_meas : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, AEStronglyMeasurable (F x) (volume.restrict (Ioo a‚ÇÄ b‚ÇÄ)))
    (hF_int : IntegrableOn (F x‚ÇÄ) (Ioo a‚ÇÄ b‚ÇÄ)) (hF_cont : ContinuousAt (F x‚ÇÄ) (s x‚ÇÄ))
    (hF'_meas : AEStronglyMeasurable F' (volume.restrict <| Œô a (s x‚ÇÄ)))
    (h_lipsch :
      ‚àÄ·µê t ‚àÇvolume.restrict <| Ioo a‚ÇÄ b‚ÇÄ,
        LipschitzOnWith (nnabs <| bound t) (fun x ‚Ü¶ F x t) (ball x‚ÇÄ Œµ))
    (bound_integrable : IntegrableOn bound (Ioo a‚ÇÄ b‚ÇÄ)) (bound_cont : ContinuousAt bound (s x‚ÇÄ))
    (bound_nonneg : ‚àÄ t, 0 ‚â§ bound t)
    -- this is not really needed, but much more convenient
    (h_diff : ‚àÄ·µê a ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)), HasFDerivAt (fun x ‚Ü¶ F x a) (F' a) x‚ÇÄ)
    (s_diff : HasFDerivAt s s' x‚ÇÄ)
    (hG' : (‚à´ t in a..s x‚ÇÄ, F' t) + (toSpanSingleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s' = G') :
    IntervalIntegrable F' volume a (s x‚ÇÄ) ‚àß
      HasFDerivAt (fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t) G' x‚ÇÄ := by
  subst hG'
  let œÜ : H ‚Üí ‚Ñù ‚Üí E := fun x t ‚Ü¶ ‚à´ s in a..t, F x s
  have Ioo_nhds : Ioo a‚ÇÄ b‚ÇÄ ‚àà ùìù (s x‚ÇÄ) := Ioo_mem_nhds hsx‚ÇÄ.1 hsx‚ÇÄ.2
  have bound_int : ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
      IntervalIntegrable bound volume s u := fun hs hu ‚Ü¶
    (bound_integrable.mono_set <| ordConnected_Ioo.uIcc_subset hs hu).intervalIntegrable
  have mem_nhds : ball x‚ÇÄ Œµ ‚à© s ‚Åª¬π' Ioo a‚ÇÄ b‚ÇÄ ‚àà ùìù x‚ÇÄ :=
    Filter.inter_mem (ball_mem_nhds x‚ÇÄ Œµ_pos) (s_diff.continuousAt.preimage_mem_nhds Ioo_nhds)
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos
  have hF_meas_ball : ‚àÄ {x}, x ‚àà ball x‚ÇÄ Œµ ‚Üí ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
      AEStronglyMeasurable (F x) (volume.restrict <| Œô s u) := fun hx s u hs hu ‚Ü¶
    (hF_meas _ hx).mono_set (ordConnected_Ioo.uIoc_subset hs hu)
  have hF_int_ball : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
      IntervalIntegrable (F x) volume s u := fun x hx s u hs hu ‚Ü¶ by
    have : IntegrableOn (F x) (Ioo a‚ÇÄ b‚ÇÄ) := by
      apply integrable_of_norm_sub_le (hF_meas x hx) hF_int (bound_integrable.mul_const ‚Äñx - x‚ÇÄ‚Äñ)
      apply h_lipsch.mono
      intro t ht
      rw [norm_sub_rev]
      rw [lipschitzOnWith_iff_norm_sub_le] at ht
      simpa [bound_nonneg t] using ht hx x‚ÇÄ_in
    exact (this.mono_set <| ordConnected_Ioo.uIcc_subset hs hu).intervalIntegrable
  constructor
  ¬∑ apply (bound_int ha hsx‚ÇÄ).mono_fun' hF'_meas _
    replace h_lipsch : ‚àÄ·µê t ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)),
        LipschitzOnWith (nnabs (bound t)) (fun x : H ‚Ü¶ F x t) (ball x‚ÇÄ Œµ) :=
      ae_restrict_of_ae_restrict_of_subset (ordConnected_Ioo.uIoc_subset ha hsx‚ÇÄ) h_lipsch
    filter_upwards [h_lipsch, h_diff]
    intro t ht_lip ht_diff
    rw [show bound t = nnabs (bound t) by simp [bound_nonneg t] ]
    exact ht_diff.le_of_lipschitzOn (ball_mem_nhds x‚ÇÄ Œµ_pos) ht_lip
  ¬∑ have D‚ÇÅ : HasFDerivAt (fun x ‚Ü¶ œÜ x (s x‚ÇÄ)) (‚à´ t in a..s x‚ÇÄ, F' t) x‚ÇÄ := by
      replace hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, AEStronglyMeasurable (F x) (volume.restrict (Œô a (s x‚ÇÄ))) :=
        Eventually.mono (ball_mem_nhds x‚ÇÄ Œµ_pos) fun x hx ‚Ü¶ hF_meas_ball hx ha hsx‚ÇÄ
      replace hF_int : IntervalIntegrable (F x‚ÇÄ) volume a (s x‚ÇÄ) := hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ
      exact (hasFDerivAt_integral_of_dominated_loc_of_lip_interval Œµ_pos hF_meas hF_int hF'_meas
        (ae_restrict_of_ae_restrict_of_subset (ordConnected_Ioo.uIoc_subset ha hsx‚ÇÄ) h_lipsch)
        (bound_int ha hsx‚ÇÄ) h_diff).2
    have D‚ÇÇ : HasFDerivAt (fun x ‚Ü¶ œÜ x‚ÇÄ (s x)) ((toSpanSingleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s') x‚ÇÄ := by
      suffices HasFDerivAt (œÜ x‚ÇÄ) (toSpanSingleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))) (s x‚ÇÄ) from this.comp _ s_diff
      rw [hasFDerivAt_iff_hasDerivAt, toSpanSingleton_apply, one_smul]
      exact intervalIntegral.integral_hasDerivAt_right (hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ)
        ‚ü®Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, hF_meas x‚ÇÄ x‚ÇÄ_in‚ü© hF_cont
    have D‚ÇÉ : HasFDerivAt (ùïú := ‚Ñù) (fun x ‚Ü¶ ‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) 0 x‚ÇÄ := by
      refine IsBigO.hasFDerivAt (ùïú := ‚Ñù) ?_ one_lt_two
      have O‚ÇÅ : (fun x ‚Ü¶ ‚à´ s in s x‚ÇÄ..s x, bound s) =O[ùìù x‚ÇÄ] fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ := by
        have : (fun x ‚Ü¶ s x - s x‚ÇÄ) =O[ùìù x‚ÇÄ] fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ := s_diff.isBigO_sub.norm_right
        refine IsBigO.trans ?_ this
        show ((fun t ‚Ü¶ ‚à´ s in s x‚ÇÄ..t, bound s) ‚àò s) =O[ùìù x‚ÇÄ] ((fun t ‚Ü¶ t - s x‚ÇÄ) ‚àò s)
        refine IsBigO.comp_tendsto ?_ s_diff.continuousAt
        have M : StronglyMeasurableAtFilter bound (ùìù (s x‚ÇÄ)) volume :=
          ‚ü®Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, bound_integrable.1‚ü©
        refine (intervalIntegral.integral_hasDerivAt_right (bound_int ha hsx‚ÇÄ)
          M bound_cont).hasFDerivAt.isBigO_sub.congr' ?_ EventuallyEq.rfl
        filter_upwards [Ioo_nhds]
        rintro t ht
        rw [intervalIntegral.integral_interval_sub_left (bound_int ha ht) (bound_int ha hsx‚ÇÄ)]
      have O‚ÇÇ : (fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ) =O[ùìù x‚ÇÄ] fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ := isBigO_refl _ _
      have O‚ÇÉ : (fun x ‚Ü¶ ‚à´ t : ‚Ñù in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) =O[ùìù x‚ÇÄ] fun x ‚Ü¶
          (‚à´ t' in s x‚ÇÄ..s x, bound t') * ‚Äñx - x‚ÇÄ‚Äñ := by
        have bdd : ‚àÄ·∂† x in ùìù x‚ÇÄ,
            ‚Äñ‚à´ s in s x‚ÇÄ..s x, F x s - F x‚ÇÄ s‚Äñ ‚â§ |‚à´ s in s x‚ÇÄ..s x, bound s| * ‚Äñx - x‚ÇÄ‚Äñ := by
          filter_upwards [mem_nhds]
          rintro x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©
          rw [‚Üê abs_of_nonneg (norm_nonneg <| x - x‚ÇÄ), ‚Üê abs_mul, ‚Üê
            intervalIntegral.integral_mul_const]
          apply intervalIntegral.norm_integral_le_abs_of_norm_le _
            ((bound_int hsx‚ÇÄ hsx).mul_const _)
          apply ae_restrict_of_ae_restrict_of_subset (ordConnected_Ioo.uIoc_subset hsx‚ÇÄ hsx)
          apply h_lipsch.mono
          intro t ht
          rw [lipschitzOnWith_iff_norm_sub_le] at ht
          simp only [coe_nnabs] at ht
          rw [‚Üê abs_of_nonneg (bound_nonneg t)]
          exact ht hx (mem_ball_self Œµ_pos)
        rw [‚Üê isBigO_norm_right]
        simp only [norm_eq_abs, abs_mul, abs_norm]
        exact bdd.isBigO
      simp_rw [pow_two]
      exact O‚ÇÉ.trans (O‚ÇÅ.mul O‚ÇÇ)
    have : ‚àÄ·∂† x in ùìù x‚ÇÄ,
        ‚à´ t in a..s x, F x t =
          (œÜ x (s x‚ÇÄ) + œÜ x‚ÇÄ (s x) + ‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) - œÜ x‚ÇÄ (s x‚ÇÄ) := by
      filter_upwards [mem_nhds]
      rintro x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©
      have int‚ÇÅ : IntervalIntegrable (F x‚ÇÄ) volume a (s x‚ÇÄ) := hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ
      have int‚ÇÇ : IntervalIntegrable (F x‚ÇÄ) volume (s x‚ÇÄ) (s x) := hF_int_ball x‚ÇÄ x‚ÇÄ_in hsx‚ÇÄ hsx
      have int‚ÇÉ : IntervalIntegrable (F x) volume a (s x‚ÇÄ) := hF_int_ball x hx ha hsx‚ÇÄ
      have int‚ÇÑ : IntervalIntegrable (F x) volume (s x‚ÇÄ) (s x) := hF_int_ball x hx hsx‚ÇÄ hsx
      dsimp [œÜ]
      rw [intervalIntegral.integral_sub int‚ÇÑ int‚ÇÇ, add_sub, add_right_comm, sub_sub,
        intervalIntegral.integral_add_adjacent_intervals int‚ÇÉ int‚ÇÑ,
        ‚Üê intervalIntegral.integral_add_adjacent_intervals int‚ÇÅ int‚ÇÇ]
      abel
    apply HasFDerivAt.congr_of_eventuallyEq _ this
    simpa using ((D‚ÇÅ.add D‚ÇÇ).add D‚ÇÉ).sub (hasFDerivAt_const (œÜ x‚ÇÄ (s x‚ÇÄ)) x‚ÇÄ)

@[inherit_doc] local notation:70 u " ‚¨ù " œÜ =>
  ContinuousLinearMap.comp (ContinuousLinearMap.toSpanSingleton ‚Ñù u) œÜ

variable [FiniteDimensional ‚Ñù H]

theorem hasFDerivAt_parametric_primitive_of_contDiff' {F : H ‚Üí ‚Ñù ‚Üí E} (hF : ContDiff ‚Ñù 1 ‚ÜøF)
    {s : H ‚Üí ‚Ñù} (hs : ContDiff ‚Ñù 1 s) (x‚ÇÄ : H) (a : ‚Ñù) :
    (IntervalIntegrable (fun t ‚Ü¶ fderiv ‚Ñù (fun x ‚Ü¶ F x t) x‚ÇÄ) volume a <| s x‚ÇÄ) ‚àß
      HasFDerivAt (fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t)
        ((‚à´ t in a..s x‚ÇÄ, fderiv ‚Ñù (fun x ‚Ü¶ F x t) x‚ÇÄ) + F x‚ÇÄ (s x‚ÇÄ) ‚¨ù fderiv ‚Ñù s x‚ÇÄ) x‚ÇÄ := by
  set a‚ÇÄ := min a (s x‚ÇÄ) - 1
  set b‚ÇÄ := max a (s x‚ÇÄ) + 1
  have ha : a ‚àà Ioo a‚ÇÄ b‚ÇÄ := by
    dsimp [a‚ÇÄ, b‚ÇÄ]
    constructor
    linarith [min_le_left a (s x‚ÇÄ)]
    linarith [le_max_left a (s x‚ÇÄ)]
  have ht‚ÇÄ : s x‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ := by
    dsimp [a‚ÇÄ, b‚ÇÄ]
    constructor
    linarith [min_le_right a (s x‚ÇÄ)]
    linarith [le_max_right a (s x‚ÇÄ)]
  have cpct : IsCompact (closedBall x‚ÇÄ 1 √óÀ¢ Icc a‚ÇÄ b‚ÇÄ) :=
    (ProperSpace.isCompact_closedBall x‚ÇÄ 1).prod isCompact_Icc
  obtain ‚ü®K, F_lip‚ü© : ‚àÉ K, ‚àÄ t ‚àà Ioo a‚ÇÄ b‚ÇÄ, LipschitzOnWith K (fun x ‚Ü¶ F x t) (ball x‚ÇÄ 1) := by
    have conv : Convex ‚Ñù (closedBall x‚ÇÄ 1 √óÀ¢ Icc a‚ÇÄ b‚ÇÄ) :=
      (convex_closedBall x‚ÇÄ 1).prod (convex_Icc a‚ÇÄ b‚ÇÄ)
    rcases hF.lipschitzOnWith le_rfl conv cpct with ‚ü®K, hK‚ü©
    use K
    intro t t_in
    rw [show (fun x : H ‚Ü¶ F x t) = uncurry F ‚àò fun x : H ‚Ü¶ (x, t) by ext; simp, ‚Üê mul_one K]
    apply hK.comp (LipschitzWith.prodMk_right t).lipschitzOnWith
    rw [mapsTo']
    rintro ‚ü®x, s‚ü© ‚ü®x', hx, h‚ü©; cases h
    exact ‚ü®ball_subset_closedBall hx, mem_Icc_of_Ioo t_in‚ü©
  have cont_x (x) : Continuous (F x) := hF.continuous.comp (Continuous.prodMk_right x)
  have int_Icc (x) : IntegrableOn (F x) (Icc a‚ÇÄ b‚ÇÄ) := (cont_x x).continuousOn.integrableOn_Icc
  have int_Ioo (x) : IntegrableOn (F x) (Ioo a‚ÇÄ b‚ÇÄ) := (int_Icc x).mono_set Ioo_subset_Icc_self
  apply
    hasFDerivAt_parametric_primitive_of_lip' _ _ zero_lt_one ha ht‚ÇÄ
      (fun x _hx ‚Ü¶ (cont_x x).aestronglyMeasurable) (int_Ioo x‚ÇÄ) (cont_x x‚ÇÄ).continuousAt _ _ _
      (continuousAt_const : (ContinuousAt fun _ : ‚Ñù ‚Ü¶ (K : ‚Ñù)) <| s x‚ÇÄ) fun _t ‚Ü¶
      NNReal.coe_nonneg K
  ¬∑ apply ae_of_all
    intro t
    apply (ContDiff.hasStrictFDerivAt _ le_rfl).hasFDerivAt
    rw [show (fun x ‚Ü¶ F x t) = uncurry F ‚àò fun x ‚Ü¶ (x, t) by ext; simp]
    exact hF.comp ((contDiff_prodMk_left t).of_le le_top)
  ¬∑ exact (ContDiff.hasStrictFDerivAt hs le_rfl).hasFDerivAt
  ¬∑ rfl
  ¬∑ apply Continuous.aestronglyMeasurable
    have :
      (fun t ‚Ü¶ fderiv ‚Ñù (fun x : H ‚Ü¶ F x t) x‚ÇÄ) =
        (fun œÜ : H √ó ‚Ñù ‚ÜíL[‚Ñù] E ‚Ü¶ œÜ.comp (inl ‚Ñù H ‚Ñù)) ‚àò
          (fderiv ‚Ñù <| uncurry F) ‚àò fun t ‚Ü¶ (x‚ÇÄ, t) := by
      ext t
      have : HasFDerivAt (fun e ‚Ü¶ F e t) ((fderiv ‚Ñù (uncurry F) (x‚ÇÄ, t)).comp (inl ‚Ñù H ‚Ñù)) x‚ÇÄ :=
        (hF.hasStrictFDerivAt le_rfl).hasFDerivAt.comp _ (hasFDerivAt_prodMk_left _ _)
      rw [this.fderiv]
      rfl
    rw [this]
    exact (inl ‚Ñù H ‚Ñù).compRightL.continuous.comp
      ((hF.continuous_fderiv le_rfl).comp <| Continuous.prodMk_right x‚ÇÄ)
  ¬∑ simp_rw [ae_restrict_iff' measurableSet_Ioo]
    filter_upwards with t t_in
    rw [nnabs_coe K]
    exact F_lip t t_in
  ¬∑ exact integrableOn_const measure_Ioo_lt_top.ne

end

section

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
  {H : Type*} [NormedAddCommGroup H] [NormedSpace ‚Ñù H] [FiniteDimensional ‚Ñù H]

open Real ContinuousLinearMap Asymptotics

@[inherit_doc] local notation:70 u " ‚¨ù " œÜ =>
  ContinuousLinearMap.comp (ContinuousLinearMap.toSpanSingleton ‚Ñù u) œÜ

theorem contDiff_parametric_primitive_of_contDiff' {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï} (hF : ContDiff ‚Ñù n ‚ÜøF)
    {s : H ‚Üí ‚Ñù} (hs : ContDiff ‚Ñù n s) (a : ‚Ñù) : ContDiff ‚Ñù n fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t := by
  induction' n with n ih generalizing F
  ¬∑ rw [Nat.cast_zero, contDiff_zero] at *
    exact intervalIntegral.continuous_parametric_intervalIntegral_of_continuous hF hs
  ¬∑ have hF‚ÇÅ : ContDiff ‚Ñù 1 ‚ÜøF := hF.one_of_succ (n := n)
    have hs‚ÇÅ : ContDiff ‚Ñù 1 s := hs.one_of_succ (n := n)
    have h :
      ‚àÄ x,
        HasFDerivAt (fun x ‚Ü¶ ‚à´ t in a..s x, F x t)
          ((‚à´ t in a..s x, fderiv ‚Ñù (fun x' ‚Ü¶ F x' t) x) + F x (s x) ‚¨ù fderiv ‚Ñù s x) x :=
      fun x ‚Ü¶ (hasFDerivAt_parametric_primitive_of_contDiff' hF‚ÇÅ hs‚ÇÅ x a).2
    rw [show ((n + 1 : ‚Ñï) : WithTop ‚Ñï‚àû) = n + 1 by rfl] at hs ‚ä¢
    rw [contDiff_succ_iff_fderiv_apply]
    constructor
    ¬∑ exact fun x‚ÇÄ ‚Ü¶ ‚ü®_, h x‚ÇÄ‚ü©
    ¬∑ simp only [WithTop.natCast_ne_top, IsEmpty.forall_iff, true_and]
      intro x
      rw [fderiv_eq h]
      apply ContDiff.add
      ¬∑ simp only [ContinuousLinearMap.coe_coe]
        have hD' : ContDiff ‚Ñù n ‚Üøfun x‚ÇÄ t ‚Ü¶ fderiv ‚Ñù (fun x ‚Ü¶ F x t) x‚ÇÄ :=
          ContDiff.fderiv (hF.comp‚ÇÇ contDiff_snd contDiff_fst.snd) contDiff_fst le_rfl
        have hD : ContDiff ‚Ñù n ‚Üøfun x' a ‚Ü¶ (fderiv ‚Ñù (fun e ‚Ü¶ F e a) x') x :=
          hD'.clm_apply contDiff_const
        convert ih hD hs.of_succ with x'
        refine ContinuousLinearMap.intervalIntegral_apply ?_ x
        exact (continuous_curry x' hD'.continuous).intervalIntegrable _ _
      ¬∑ exact ((contDiff_succ_iff_fderiv.mp hs).2.2.smulRight
          (hF.of_succ.comp <| contDiff_id.prodMk hs.of_succ)).clm_apply contDiff_const

end

section

universe v u

variable {E : Type u}

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E] {H : Type v}
  [NormedAddCommGroup H] [NormedSpace ‚Ñù H] [FiniteDimensional ‚Ñù H]

-- Should we directly prove the version below?
theorem contDiff_parametric_primitive_of_contDiff {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï‚àû} (hF : ContDiff ‚Ñù n ‚ÜøF)
    {s : H ‚Üí ‚Ñù} (hs : ContDiff ‚Ñù n s) (a : ‚Ñù) : ContDiff ‚Ñù n fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t := by
  induction n using WithTop.recTopCoe
  ¬∑ rw [contDiff_infty] at *
    exact fun n ‚Ü¶ contDiff_parametric_primitive_of_contDiff' (hF n) (hs n) a
  ¬∑ exact contDiff_parametric_primitive_of_contDiff' hF hs a

theorem contDiff_parametric_primitive_of_contDiff'' {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï‚àû} (hF : ContDiff ‚Ñù n ‚ÜøF)
    (a : ‚Ñù) : ContDiff ‚Ñù n fun x : H √ó ‚Ñù ‚Ü¶ ‚à´ t in a..x.2, F x.1 t :=
  have cd : ContDiff ‚Ñù n ‚Üøfun (x : H √ó ‚Ñù) (t : ‚Ñù) ‚Ü¶ F x.1 t :=
    hF.comp (contDiff_fst.prodMap contDiff_id)
  contDiff_parametric_primitive_of_contDiff cd contDiff_snd a

theorem contDiff_parametric_integral_of_contDiff {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï‚àû} (hF : ContDiff ‚Ñù n ‚ÜøF)
    (a b : ‚Ñù) : ContDiff ‚Ñù n fun x : H ‚Ü¶ ‚à´ t in a..b, F x t :=
  contDiff_parametric_primitive_of_contDiff hF contDiff_const a

theorem ContDiff.fderiv_parametric_integral {F : H ‚Üí ‚Ñù ‚Üí E} (hF : ContDiff ‚Ñù 1 ‚ÜøF) (a b : ‚Ñù) :
    (fderiv ‚Ñù fun x : H ‚Ü¶ ‚à´ t in a..b, F x t) = fun x : H ‚Ü¶
      ‚à´ t in a..b, fderiv ‚Ñù (fun x' ‚Ü¶ F x' t) x := by
  ext x‚ÇÄ
  obtain ‚ü®int, h‚ü© := hasFDerivAt_parametric_primitive_of_contDiff' hF contDiff_const x‚ÇÄ a
  rw [h.fderiv, fderiv_fun_const]
  simp only [ContinuousLinearMap.comp_zero, add_zero, Pi.zero_apply]

end
