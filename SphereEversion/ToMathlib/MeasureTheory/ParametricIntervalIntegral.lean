import Mathlib.MeasureTheory.Integral.FundThmCalculus
import Mathlib.Analysis.Calculus.ParametricIntegral
import Mathlib.Analysis.Calculus.ContDiff.FiniteDimension
import Mathlib.Algebra.Module.ULift
import SphereEversion.ToMathlib.Analysis.Calculus

import Mathlib.Tactic.FunProp.ContDiff

open TopologicalSpace MeasureTheory Filter FirstCountableTopology Metric Set Function

open scoped Topology Filter NNReal

section -- PRed in #10004

variable {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E] {H : Type _}
  [NormedAddCommGroup H] [NormedSpace ‚Ñù H] (ŒΩ : Measure ‚Ñù)

/-- Interval version of `hasFDerivAt_integral_of_dominated_of_fderiv_le` -/
theorem hasFDerivAt_integral_of_dominated_of_fderiv_le'' {F : H ‚Üí ‚Ñù ‚Üí E} {F' : H ‚Üí ‚Ñù ‚Üí H ‚ÜíL[‚Ñù] E} {x‚ÇÄ : H}
    {a b : ‚Ñù} {bound : ‚Ñù ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
    (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, AEStronglyMeasurable (F x) <| ŒΩ.restrict (Œô a b))
    (hF_int : IntervalIntegrable (F x‚ÇÄ) ŒΩ a b)
    (hF'_meas : AEStronglyMeasurable (F' x‚ÇÄ) <| ŒΩ.restrict (Œô a b))
    (h_bound : ‚àÄ·µê t ‚àÇŒΩ.restrict (Œô a b), ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚ÄñF' x t‚Äñ ‚â§ bound t)
    (bound_integrable : IntervalIntegrable bound ŒΩ a b)
    (h_diff : ‚àÄ·µê t ‚àÇŒΩ.restrict (Œô a b), ‚àÄ x ‚àà ball x‚ÇÄ Œµ, HasFDerivAt (fun x ‚Ü¶ F x t) (F' x t) x) :
    HasFDerivAt (fun x ‚Ü¶ ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' x‚ÇÄ t ‚àÇŒΩ) x‚ÇÄ := by
  erw [ae_restrict_uIoc_iff] at h_diff h_bound
  simp_rw [AEStronglyMeasurable.aestronglyMeasurable_uIoc_iff, eventually_and] at hF_meas hF'_meas
  exact
    (hasFDerivAt_integral_of_dominated_of_fderiv_le Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1 h_bound.1
          bound_integrable.1 h_diff.1).sub
      (hasFDerivAt_integral_of_dominated_of_fderiv_le Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2 h_bound.2
        bound_integrable.2 h_diff.2)

/-- Interval version of `hasFDerivAt_integral_of_dominated_loc_of_lip` -/
theorem hasFDerivAt_integral_of_dominated_loc_of_lip_interval {F : H ‚Üí ‚Ñù ‚Üí E} {F' : ‚Ñù ‚Üí H ‚ÜíL[‚Ñù] E} {x‚ÇÄ : H}
    {a b : ‚Ñù} {bound : ‚Ñù ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
    (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, AEStronglyMeasurable (F x) <| ŒΩ.restrict (Œô a b))
    (hF_int : IntervalIntegrable (F x‚ÇÄ) ŒΩ a b)
    (hF'_meas : AEStronglyMeasurable F' <| ŒΩ.restrict (Œô a b))
    (h_lip : ‚àÄ·µê t ‚àÇŒΩ.restrict (Œô a b),
      LipschitzOnWith (Real.nnabs <| bound t) (fun x ‚Ü¶ F x t) (ball x‚ÇÄ Œµ))
    (bound_integrable : IntervalIntegrable bound ŒΩ a b)
    (h_diff : ‚àÄ·µê t ‚àÇŒΩ.restrict (Œô a b), HasFDerivAt (fun x ‚Ü¶ F x t) (F' t) x‚ÇÄ) :
    IntervalIntegrable F' ŒΩ a b ‚àß
      HasFDerivAt (fun x ‚Ü¶ ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' t ‚àÇŒΩ) x‚ÇÄ := by
  simp_rw [AEStronglyMeasurable.aestronglyMeasurable_uIoc_iff, eventually_and] at hF_meas hF'_meas
  rw [ae_restrict_uIoc_iff] at h_lip h_diff
  have H‚ÇÅ :=
    hasFDerivAt_integral_of_dominated_loc_of_lip Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1 h_lip.1
      bound_integrable.1 h_diff.1
  have H‚ÇÇ :=
    hasFDerivAt_integral_of_dominated_loc_of_lip Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2 h_lip.2
      bound_integrable.2 h_diff.2
  exact ‚ü®‚ü®H‚ÇÅ.1, H‚ÇÇ.1‚ü©, H‚ÇÅ.2.sub H‚ÇÇ.2‚ü©

end

section

open Function

theorem continuous_parametric_integral_of_continuous
    {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
    {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] [OpensMeasurableSpace Œ±]
    [SecondCountableTopologyEither Œ± E] {Œº : MeasureTheory.Measure Œ±} [IsLocallyFiniteMeasure Œº]
    {X : Type*} [TopologicalSpace X] [FirstCountableTopology X] [LocallyCompactSpace X]
    {F : X ‚Üí Œ± ‚Üí E} (hF : Continuous fun p : X √ó Œ± ‚Ü¶ F p.1 p.2) {s : Set Œ±} (hs : IsCompact s) :
    Continuous fun x ‚Ü¶ ‚à´ a in s, F x a ‚àÇŒº := by
  rw [continuous_iff_continuousAt]
  intro x‚ÇÄ
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©
  rcases(U_cpct.prod hs).bddAbove_image hF.norm.continuousOn with ‚ü®M, hM‚ü©
  apply continuousAt_of_dominated
  ¬∑ exact eventually_of_forall fun x ‚Ü¶ (hF.comp (Continuous.Prod.mk x)).aestronglyMeasurable
  ¬∑ refine Eventually.mono U_nhds fun x x_in ‚Ü¶ ?_
    rw [ae_restrict_iff]
    exact eventually_of_forall fun t t_in ‚Ü¶ hM (mem_image_of_mem _ <| mk_mem_prod x_in t_in)
    exact (isClosed_le (hF.comp <| Continuous.Prod.mk x).norm continuous_const).measurableSet
  ¬∑ exact integrableOn_const.mpr (Or.inr hs.measure_lt_top)
  ¬∑ apply ae_of_all
    intro a
    dsimp -- TODO(funprop): this shouldn't be necessary
    fun_prop

end

section

open MeasureTheory

variable {Œº : Measure ‚Ñù} {X : Type _} [TopologicalSpace X] [FirstCountableTopology X] {E : Type _}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]

theorem continuousAt_parametric_primitive_of_dominated {F : X ‚Üí ‚Ñù ‚Üí E} (bound : ‚Ñù ‚Üí ‚Ñù) (a b : ‚Ñù)
    {a‚ÇÄ b‚ÇÄ : ‚Ñù} {x‚ÇÄ : X} (hF_meas : ‚àÄ x, AEStronglyMeasurable (F x) (Œº.restrict <| Œô a b))
    (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ·µê t ‚àÇŒº.restrict <| Œô a b, ‚ÄñF x t‚Äñ ‚â§ bound t)
    (bound_integrable : IntervalIntegrable bound Œº a b)
    (h_cont : ‚àÄ·µê t ‚àÇŒº.restrict <| Œô a b, ContinuousAt (fun x ‚Ü¶ F x t) x‚ÇÄ) (ha‚ÇÄ : a‚ÇÄ ‚àà Ioo a b)
    (hb‚ÇÄ : b‚ÇÄ ‚àà Ioo a b) (hŒºb‚ÇÄ : Œº {b‚ÇÄ} = 0) :
    ContinuousAt (fun p : X √ó ‚Ñù ‚Ü¶ ‚à´ t : ‚Ñù in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº) (x‚ÇÄ, b‚ÇÄ) := by
  have hsub : ‚àÄ {a‚ÇÄ b‚ÇÄ}, a‚ÇÄ ‚àà Ioo a b ‚Üí b‚ÇÄ ‚àà Ioo a b ‚Üí Œô a‚ÇÄ b‚ÇÄ ‚äÜ Œô a b := fun ha‚ÇÄ hb‚ÇÄ ‚Ü¶
    (ordConnected_Ioo.uIoc_subset ha‚ÇÄ hb‚ÇÄ).trans (Ioo_subset_Ioc_self.trans Ioc_subset_uIoc)
  have Ioo_nhds : Ioo a b ‚àà ùìù b‚ÇÄ := Ioo_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2
  have Icc_nhds : Icc a b ‚àà ùìù b‚ÇÄ := Icc_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2
  have hx‚ÇÄ : ‚àÄ·µê t : ‚Ñù ‚àÇŒº.restrict (Œô a b), ‚ÄñF x‚ÇÄ t‚Äñ ‚â§ bound t := h_bound.self_of_nhds
  have : ‚àÄ·∂† p : X √ó ‚Ñù in ùìù (x‚ÇÄ, b‚ÇÄ),
      ‚à´ s in a‚ÇÄ..p.2, F p.1 s ‚àÇŒº =
        ‚à´ s in a‚ÇÄ..b‚ÇÄ, F p.1 s ‚àÇŒº + ‚à´ s in b‚ÇÄ..p.2, F x‚ÇÄ s ‚àÇŒº +
          ‚à´ s in b‚ÇÄ..p.2, F p.1 s - F x‚ÇÄ s ‚àÇŒº := by
    rw [nhds_prod_eq]
    refine (h_bound.prod_mk Ioo_nhds).mono ?_
    rintro ‚ü®x, t‚ü© ‚ü®hx : ‚àÄ·µê t : ‚Ñù ‚àÇŒº.restrict (Œô a b), ‚ÄñF x t‚Äñ ‚â§ bound t, ht : t ‚àà Ioo a b‚ü©
    dsimp (config := { eta := false })
    have hiF : ‚àÄ {x a‚ÇÄ b‚ÇÄ},
        (‚àÄ·µê t : ‚Ñù ‚àÇŒº.restrict (Œô a b), ‚ÄñF x t‚Äñ ‚â§ bound t) ‚Üí a‚ÇÄ ‚àà Ioo a b ‚Üí b‚ÇÄ ‚àà Ioo a b ‚Üí
          IntervalIntegrable (F x) Œº a‚ÇÄ b‚ÇÄ := fun {x a‚ÇÄ b‚ÇÄ} hx ha‚ÇÄ hb‚ÇÄ ‚Ü¶
      (bound_integrable.mono_set_ae <| eventually_of_forall <| hsub ha‚ÇÄ hb‚ÇÄ).mono_fun'
        ((hF_meas x).mono_set <| hsub ha‚ÇÄ hb‚ÇÄ)
        (ae_restrict_of_ae_restrict_of_subset (hsub ha‚ÇÄ hb‚ÇÄ) hx)
    rw [intervalIntegral.integral_sub, add_assoc, add_sub_cancel'_right,
      intervalIntegral.integral_add_adjacent_intervals]
    ¬∑ exact hiF hx ha‚ÇÄ hb‚ÇÄ
    ¬∑ exact hiF hx hb‚ÇÄ ht
    ¬∑ exact hiF hx hb‚ÇÄ ht
    ¬∑ exact hiF hx‚ÇÄ hb‚ÇÄ ht
  rw [continuousAt_congr this]; clear this
  refine (ContinuousAt.add ?_ ?_).add ?_
  ¬∑ exact (intervalIntegral.continuousAt_of_dominated_interval
        (eventually_of_forall fun x ‚Ü¶ (hF_meas x).mono_set <| hsub ha‚ÇÄ hb‚ÇÄ)
          (h_bound.mono fun x hx ‚Ü¶
            ae_imp_of_ae_restrict <| ae_restrict_of_ae_restrict_of_subset (hsub ha‚ÇÄ hb‚ÇÄ) hx)
          (bound_integrable.mono_set_ae <| eventually_of_forall <| hsub ha‚ÇÄ hb‚ÇÄ) <|
          ae_imp_of_ae_restrict <| ae_restrict_of_ae_restrict_of_subset (hsub ha‚ÇÄ hb‚ÇÄ) h_cont).fst'
  ¬∑ refine (?_ : ContinuousAt (fun t ‚Ü¶ ‚à´ s in b‚ÇÄ..t, F x‚ÇÄ s ‚àÇŒº) b‚ÇÄ).snd'
    apply ContinuousWithinAt.continuousAt _ (Icc_mem_nhds hb‚ÇÄ.1 hb‚ÇÄ.2)
    apply intervalIntegral.continuousWithinAt_primitive hŒºb‚ÇÄ
    rw [min_eq_right hb‚ÇÄ.1.le, max_eq_right hb‚ÇÄ.2.le]
    exact bound_integrable.mono_fun' (hF_meas x‚ÇÄ) hx‚ÇÄ
  ¬∑ suffices : Tendsto (fun x : X √ó ‚Ñù ‚Ü¶ ‚à´ s in b‚ÇÄ..x.2, F x.1 s - F x‚ÇÄ s ‚àÇŒº) (ùìù (x‚ÇÄ, b‚ÇÄ)) (ùìù 0)
    ¬∑ simpa [ContinuousAt]
    have : ‚àÄ·∂† p : X √ó ‚Ñù in ùìù (x‚ÇÄ, b‚ÇÄ),
        ‚Äñ‚à´ s in b‚ÇÄ..p.2, F p.1 s - F x‚ÇÄ s ‚àÇŒº‚Äñ ‚â§ |‚à´ s in b‚ÇÄ..p.2, 2 * bound s ‚àÇŒº| := by
      rw [nhds_prod_eq]
      refine (h_bound.prod_mk Ioo_nhds).mono ?_
      rintro ‚ü®x, t‚ü© ‚ü®hx : ‚àÄ·µê t ‚àÇŒº.restrict (Œô a b), ‚ÄñF x t‚Äñ ‚â§ bound t, ht : t ‚àà Ioo a b‚ü©
      have H : ‚àÄ·µê t : ‚Ñù ‚àÇŒº.restrict (Œô b‚ÇÄ t), ‚ÄñF x t - F x‚ÇÄ t‚Äñ ‚â§ 2 * bound t := by
        apply (ae_restrict_of_ae_restrict_of_subset (hsub hb‚ÇÄ ht) (hx.and hx‚ÇÄ)).mono
        rintro s ‚ü®hs‚ÇÅ, hs‚ÇÇ‚ü©
        calc
          ‚ÄñF x s - F x‚ÇÄ s‚Äñ ‚â§ ‚ÄñF x s‚Äñ + ‚ÄñF x‚ÇÄ s‚Äñ := norm_sub_le _ _
          _ ‚â§ 2 * bound s := by linarith only [hs‚ÇÅ, hs‚ÇÇ]
      exact
        intervalIntegral.norm_integral_le_of_norm_le H
          ((bound_integrable.mono_set' <| hsub hb‚ÇÄ ht).const_mul 2)
    apply squeeze_zero_norm' this
    have : Tendsto (fun t ‚Ü¶ ‚à´ s in b‚ÇÄ..t, 2 * bound s ‚àÇŒº) (ùìù b‚ÇÄ) (ùìù 0) := by
      suffices ContinuousAt (fun t ‚Ü¶ ‚à´ s in b‚ÇÄ..t, 2 * bound s ‚àÇŒº) b‚ÇÄ by
        simpa [ContinuousAt] using this
      apply ContinuousWithinAt.continuousAt _ Icc_nhds
      apply intervalIntegral.continuousWithinAt_primitive hŒºb‚ÇÄ
      apply IntervalIntegrable.const_mul
      apply bound_integrable.mono_set'
      rw [min_eq_right hb‚ÇÄ.1.le, max_eq_right hb‚ÇÄ.2.le]
    rw [nhds_prod_eq]
    exact (continuous_abs.tendsto' _ _ abs_zero).comp (this.comp tendsto_snd)

end

section

variable {Œº : Measure ‚Ñù} [IsLocallyFiniteMeasure Œº] [NoAtoms Œº] {X : Type _} [TopologicalSpace X]
  [FirstCountableTopology X] {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]

theorem continuous_parametric_primitive_of_continuous [LocallyCompactSpace X] {F : X ‚Üí ‚Ñù ‚Üí E}
    {a‚ÇÄ : ‚Ñù} (hF : Continuous fun p : X √ó ‚Ñù ‚Ü¶ F p.1 p.2) :
    Continuous fun p : X √ó ‚Ñù ‚Ü¶ ‚à´ t in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº := by
  rw [continuous_iff_continuousAt]
  rintro ‚ü®x‚ÇÄ, b‚ÇÄ‚ü©
  rcases exists_compact_mem_nhds x‚ÇÄ with ‚ü®U, U_cpct, U_nhds‚ü©
  cases' exists_lt (min a‚ÇÄ b‚ÇÄ) with a a_lt
  cases' exists_gt (max a‚ÇÄ b‚ÇÄ) with b lt_b
  rw [lt_min_iff] at a_lt
  rw [max_lt_iff] at lt_b
  have a‚ÇÄ_in : a‚ÇÄ ‚àà Ioo a b := ‚ü®a_lt.1, lt_b.1‚ü©
  have b‚ÇÄ_in : b‚ÇÄ ‚àà Ioo a b := ‚ü®a_lt.2, lt_b.2‚ü©
  obtain ‚ü®M, hM‚ü© :=
    (U_cpct.prod (isCompact_Icc (a := a) (b := b))).bddAbove_image hF.norm.continuousOn
  refine continuousAt_parametric_primitive_of_dominated (fun _ ‚Ü¶ M) a b ?_ ?_ ?_ ?_ a‚ÇÄ_in b‚ÇÄ_in
    (measure_singleton b‚ÇÄ)
  ¬∑ exact fun x ‚Ü¶ (hF.comp (Continuous.Prod.mk x)).aestronglyMeasurable
  ¬∑ refine Eventually.mono U_nhds fun x (x_in : x ‚àà U) ‚Ü¶ ?_
    simp_rw [ae_restrict_iff' measurableSet_uIoc]
    refine eventually_of_forall fun t t_in ‚Ü¶ ?_
    refine hM (mem_image_of_mem _ <| mk_mem_prod x_in ?_)
    rw [uIoc_of_le (a_lt.1.trans lt_b.1).le] at t_in
    exact mem_Icc_of_Ioc t_in
  ¬∑ apply intervalIntegrable_const
  ¬∑ apply ae_of_all
    intro a
    apply (hF.comp‚ÇÇ continuous_id continuous_const).continuousAt

theorem continuous_parametric_intervalIntegral_of_continuous [LocallyCompactSpace X] {a‚ÇÄ : ‚Ñù}
    {F : X ‚Üí ‚Ñù ‚Üí E} (hF : Continuous fun p : X √ó ‚Ñù ‚Ü¶ F p.1 p.2) {s : X ‚Üí ‚Ñù} (hs : Continuous s) :
    Continuous fun x ‚Ü¶ ‚à´ t in a‚ÇÄ..s x, F x t ‚àÇŒº :=
  show Continuous ((fun p : X √ó ‚Ñù ‚Ü¶ ‚à´ t in a‚ÇÄ..p.2, F p.1 t ‚àÇŒº) ‚àò fun x ‚Ü¶ (x, s x)) from
    (continuous_parametric_primitive_of_continuous hF).comp‚ÇÇ continuous_id hs

theorem continuous_parametric_intervalIntegral_of_continuous' [LocallyCompactSpace X]
    {F : X ‚Üí ‚Ñù ‚Üí E} (hF : Continuous fun p : X √ó ‚Ñù ‚Ü¶ F p.1 p.2) (a‚ÇÄ b‚ÇÄ : ‚Ñù) :
    Continuous fun x ‚Ü¶ ‚à´ t in a‚ÇÄ..b‚ÇÄ, F x t ‚àÇŒº :=
  continuous_parametric_intervalIntegral_of_continuous hF continuous_const

end

section

variable {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E] {H : Type _}
  [NormedAddCommGroup H] [NormedSpace ‚Ñù H]

/-!
We could weaken `FiniteDimensional ‚Ñù H` with `SecondCountable (H ‚ÜíL[‚Ñù] E)` if needed,
but that is less convenient to work with.
-/


open Real ContinuousLinearMap Asymptotics

/-- This statement is a new version using the continuity note in mathlib.
See commit `39e3f3f` for an older version
Maybe todo: let `a` depend on `x`.
-/
theorem hasFDerivAt_parametric_primitive_of_lip' (F : H ‚Üí ‚Ñù ‚Üí E) (F' : ‚Ñù ‚Üí H ‚ÜíL[‚Ñù] E) {x‚ÇÄ : H}
    {G' : H ‚ÜíL[‚Ñù] E} {bound : ‚Ñù ‚Üí ‚Ñù} {s : H ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ) {a a‚ÇÄ b‚ÇÄ : ‚Ñù}
    {s' : H ‚ÜíL[‚Ñù] ‚Ñù} (ha : a ‚àà Ioo a‚ÇÄ b‚ÇÄ) (hsx‚ÇÄ : s x‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ)
    (hF_meas : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, AEStronglyMeasurable (F x) (volume.restrict (Ioo a‚ÇÄ b‚ÇÄ)))
    (hF_int : IntegrableOn (F x‚ÇÄ) (Ioo a‚ÇÄ b‚ÇÄ)) (hF_cont : ContinuousAt (F x‚ÇÄ) (s x‚ÇÄ))
    (hF'_meas : AEStronglyMeasurable F' (volume.restrict <| Œô a (s x‚ÇÄ)))
    (h_lipsch :
      ‚àÄ·µê t ‚àÇvolume.restrict <| Ioo a‚ÇÄ b‚ÇÄ,
        LipschitzOnWith (nnabs <| bound t) (fun x ‚Ü¶ F x t) (ball x‚ÇÄ Œµ))
    (bound_integrable : IntegrableOn bound (Ioo a‚ÇÄ b‚ÇÄ)) (bound_cont : ContinuousAt bound (s x‚ÇÄ))
    (bound_nonneg : ‚àÄ t, 0 ‚â§ bound t)
    -- this is not really needed, but much more convenient
    (h_diff : ‚àÄ·µê a ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)), HasFDerivAt (fun x ‚Ü¶ F x a) (F' a) x‚ÇÄ)
    (s_diff : HasFDerivAt s s' x‚ÇÄ)
    (hG' : (‚à´ t in a..s x‚ÇÄ, F' t) + (toSpanSingleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s' = G') :
    IntervalIntegrable F' volume a (s x‚ÇÄ) ‚àß
      HasFDerivAt (fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t) G' x‚ÇÄ := by
  subst hG'
  let œÜ : H ‚Üí ‚Ñù ‚Üí E := fun x t ‚Ü¶ ‚à´ s in a..t, F x s
  have Ioo_nhds : Ioo a‚ÇÄ b‚ÇÄ ‚àà ùìù (s x‚ÇÄ) := Ioo_mem_nhds hsx‚ÇÄ.1 hsx‚ÇÄ.2
  have bound_int : ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
      IntervalIntegrable bound volume s u := fun hs hu ‚Ü¶
    (bound_integrable.mono_set <| ordConnected_Ioo.uIcc_subset hs hu).intervalIntegrable
  have mem_nhds : ball x‚ÇÄ Œµ ‚à© s ‚Åª¬π' Ioo a‚ÇÄ b‚ÇÄ ‚àà ùìù x‚ÇÄ :=
    Filter.inter_mem (ball_mem_nhds x‚ÇÄ Œµ_pos) (s_diff.continuousAt.preimage_mem_nhds Ioo_nhds)
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos
  have hF_meas_ball : ‚àÄ {x}, x ‚àà ball x‚ÇÄ Œµ ‚Üí ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
      AEStronglyMeasurable (F x) (volume.restrict <| Œô s u) := fun hx s u hs hu ‚Ü¶
    (hF_meas _ hx).mono_set (ordConnected_Ioo.uIoc_subset hs hu)
  have hF_int_ball : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚àÄ {s u}, s ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí u ‚àà Ioo a‚ÇÄ b‚ÇÄ ‚Üí
      IntervalIntegrable (F x) volume s u := fun x hx s u hs hu ‚Ü¶ by
    have : IntegrableOn (F x) (Ioo a‚ÇÄ b‚ÇÄ) := by
      apply integrable_of_norm_sub_le (hF_meas x hx) hF_int (bound_integrable.mul_const ‚Äñx - x‚ÇÄ‚Äñ)
      apply h_lipsch.mono
      intro t ht
      rw [norm_sub_rev]
      rw [lipschitzOnWith_iff_norm_sub_le] at ht
      simpa [bound_nonneg t] using ht hx x‚ÇÄ_in
    exact (this.mono_set <| ordConnected_Ioo.uIcc_subset hs hu).intervalIntegrable
  constructor
  ¬∑ apply (bound_int ha hsx‚ÇÄ).mono_fun' hF'_meas _
    replace h_lipsch :
      ‚àÄ·µê t ‚àÇvolume.restrict (Œô a (s x‚ÇÄ)),
        LipschitzOnWith (nnabs (bound t)) (fun x : H ‚Ü¶ F x t) (ball x‚ÇÄ Œµ)
    exact ae_restrict_of_ae_restrict_of_subset (ordConnected_Ioo.uIoc_subset ha hsx‚ÇÄ) h_lipsch
    filter_upwards [h_lipsch, h_diff]
    intro t ht_lip ht_diff
    rw [show bound t = nnabs (bound t) by simp [bound_nonneg t] ]
    exact ht_diff.le_of_lipschitzOn (ball_mem_nhds x‚ÇÄ Œµ_pos) ht_lip
  ¬∑ have D‚ÇÅ : HasFDerivAt (fun x ‚Ü¶ œÜ x (s x‚ÇÄ)) (‚à´ t in a..s x‚ÇÄ, F' t) x‚ÇÄ := by
      replace hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, AEStronglyMeasurable (F x) (volume.restrict (Œô a (s x‚ÇÄ)))
      exact Eventually.mono (ball_mem_nhds x‚ÇÄ Œµ_pos) fun x hx ‚Ü¶ hF_meas_ball hx ha hsx‚ÇÄ
      replace hF_int : IntervalIntegrable (F x‚ÇÄ) volume a (s x‚ÇÄ) := hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ
      exact (hasFDerivAt_integral_of_dominated_loc_of_lip_interval _ Œµ_pos hF_meas hF_int hF'_meas
        (ae_restrict_of_ae_restrict_of_subset (ordConnected_Ioo.uIoc_subset ha hsx‚ÇÄ) h_lipsch)
        (bound_int ha hsx‚ÇÄ) h_diff).2
    have D‚ÇÇ : HasFDerivAt (fun x ‚Ü¶ œÜ x‚ÇÄ (s x)) ((toSpanSingleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))).comp s') x‚ÇÄ := by
      suffices HasFDerivAt (œÜ x‚ÇÄ) (toSpanSingleton ‚Ñù (F x‚ÇÄ (s x‚ÇÄ))) (s x‚ÇÄ) from this.comp _ s_diff
      rw [hasFDerivAt_iff_hasDerivAt, toSpanSingleton_apply, one_smul]
      exact intervalIntegral.integral_hasDerivAt_right (hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ)
        ‚ü®Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, hF_meas x‚ÇÄ x‚ÇÄ_in‚ü© hF_cont
    have D‚ÇÉ : HasFDerivAt (fun x ‚Ü¶ ‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) 0 x‚ÇÄ := by
      refine IsBigO.hasFDerivAt (ùïú := ‚Ñù) ?_ one_lt_two
      have O‚ÇÅ : (fun x ‚Ü¶ ‚à´ s in s x‚ÇÄ..s x, bound s) =O[ùìù x‚ÇÄ] fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ := by
        have : (fun x ‚Ü¶ s x - s x‚ÇÄ) =O[ùìù x‚ÇÄ] fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ := s_diff.isBigO_sub.norm_right
        refine IsBigO.trans ?_ this
        show ((fun t ‚Ü¶ ‚à´ s in s x‚ÇÄ..t, bound s) ‚àò s) =O[ùìù x‚ÇÄ] ((fun t ‚Ü¶ t - s x‚ÇÄ) ‚àò s)
        refine IsBigO.comp_tendsto ?_ s_diff.continuousAt
        have M : StronglyMeasurableAtFilter bound (ùìù (s x‚ÇÄ)) volume :=
          ‚ü®Ioo a‚ÇÄ b‚ÇÄ, Ioo_nhds, bound_integrable.1‚ü©
        sorry /- TODO-BUMP refine' (intervalIntegral.integral_hasDerivAt_right (bound_int ha hsx‚ÇÄ)
          M bound_cont).hasFDerivAt.isBigO.congr' _ EventuallyEq.rfl
        apply Eventually.mono Ioo_nhds
        rintro t ht
        dsimp only
        rw [intervalIntegral.integral_interval_sub_left (bound_int ha ht) (bound_int ha hsx‚ÇÄ)] -/
      have O‚ÇÇ : (fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ) =O[ùìù x‚ÇÄ] fun x ‚Ü¶ ‚Äñx - x‚ÇÄ‚Äñ := isBigO_refl _ _
      have O‚ÇÉ : (fun x ‚Ü¶ ‚à´ t : ‚Ñù in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) =O[ùìù x‚ÇÄ] fun x ‚Ü¶
          (‚à´ t' in s x‚ÇÄ..s x, bound t') * ‚Äñx - x‚ÇÄ‚Äñ := by
        have bdd : ‚àÄ·∂† x in ùìù x‚ÇÄ,
            ‚Äñ‚à´ s in s x‚ÇÄ..s x, F x s - F x‚ÇÄ s‚Äñ ‚â§ |‚à´ s in s x‚ÇÄ..s x, bound s| * ‚Äñx - x‚ÇÄ‚Äñ := by
          apply Eventually.mono mem_nhds
          rintro x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©
          rw [‚Üê abs_of_nonneg (norm_nonneg <| x - x‚ÇÄ), ‚Üê abs_mul, ‚Üê
            intervalIntegral.integral_mul_const]
          apply intervalIntegral.norm_integral_le_of_norm_le _ ((bound_int hsx‚ÇÄ hsx).mul_const _)
          apply ae_restrict_of_ae_restrict_of_subset (ordConnected_Ioo.uIoc_subset hsx‚ÇÄ hsx)
          apply h_lipsch.mono
          intro t ht
          rw [lipschitzOnWith_iff_norm_sub_le] at ht
          simp only [coe_nnabs] at ht
          rw [‚Üê abs_of_nonneg (bound_nonneg t)]
          exact ht hx (mem_ball_self Œµ_pos)
        rw [‚Üê isBigO_norm_right]
        simp only [norm_eq_abs, abs_mul, abs_norm]
        exact bdd.isBigO
      simp_rw [pow_two]
      exact O‚ÇÉ.trans (O‚ÇÅ.mul O‚ÇÇ)
    have : ‚àÄ·∂† x in ùìù x‚ÇÄ,
        ‚à´ t in a..s x, F x t =
          (œÜ x (s x‚ÇÄ) + œÜ x‚ÇÄ (s x) + ‚à´ t in s x‚ÇÄ..s x, F x t - F x‚ÇÄ t) - œÜ x‚ÇÄ (s x‚ÇÄ) := by
      apply Eventually.mono mem_nhds
      rintro x ‚ü®hx : x ‚àà ball x‚ÇÄ Œµ, hsx : s x ‚àà Ioo a‚ÇÄ b‚ÇÄ‚ü©
      have int‚ÇÅ : IntervalIntegrable (F x‚ÇÄ) volume a (s x‚ÇÄ) := hF_int_ball x‚ÇÄ x‚ÇÄ_in ha hsx‚ÇÄ
      have int‚ÇÇ : IntervalIntegrable (F x‚ÇÄ) volume (s x‚ÇÄ) (s x) := hF_int_ball x‚ÇÄ x‚ÇÄ_in hsx‚ÇÄ hsx
      have int‚ÇÉ : IntervalIntegrable (F x) volume a (s x‚ÇÄ) := hF_int_ball x hx ha hsx‚ÇÄ
      have int‚ÇÑ : IntervalIntegrable (F x) volume (s x‚ÇÄ) (s x) := hF_int_ball x hx hsx‚ÇÄ hsx
      dsimp
      rw [intervalIntegral.integral_sub int‚ÇÑ int‚ÇÇ, add_sub, add_right_comm, sub_sub,
        intervalIntegral.integral_add_adjacent_intervals int‚ÇÉ int‚ÇÑ,
        ‚Üê intervalIntegral.integral_add_adjacent_intervals int‚ÇÅ int‚ÇÇ]
      abel
    apply HasFDerivAt.congr_of_eventuallyEq _ this
    simpa using ((D‚ÇÅ.add D‚ÇÇ).add D‚ÇÉ).sub (hasFDerivAt_const (œÜ x‚ÇÄ (s x‚ÇÄ)) x‚ÇÄ)

local notation:70 u " ‚¨ù " œÜ => ContinuousLinearMap.comp (ContinuousLinearMap.toSpanSingleton ‚Ñù u) œÜ

variable [FiniteDimensional ‚Ñù H]

/-
A version of the above lemma using Floris' style statement.
This does not reuse the above lemma, but copies the proof.
-/
set_option synthInstance.maxHeartbeats 100000
theorem hasFDerivAt_parametric_primitive_of_contDiff' {F : H ‚Üí ‚Ñù ‚Üí E} (hF : ContDiff ‚Ñù 1 ‚ÜøF)
    {s : H ‚Üí ‚Ñù} (hs : ContDiff ‚Ñù 1 s) (x‚ÇÄ : H) (a : ‚Ñù) :
    (IntervalIntegrable (fun t ‚Ü¶ fderiv ‚Ñù (fun x ‚Ü¶ F x t) x‚ÇÄ) volume a <| s x‚ÇÄ) ‚àß
      HasFDerivAt (fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t)
        ((‚à´ t in a..s x‚ÇÄ, fderiv ‚Ñù (fun x ‚Ü¶ F x t) x‚ÇÄ) + F x‚ÇÄ (s x‚ÇÄ) ‚¨ù fderiv ‚Ñù s x‚ÇÄ) x‚ÇÄ := by
  set a‚ÇÄ := min a (s x‚ÇÄ) - 1
  set b‚ÇÄ := max a (s x‚ÇÄ) + 1
  have ha : a ‚àà Ioo a‚ÇÄ b‚ÇÄ := by
    dsimp
    constructor
    linarith [min_le_left a (s x‚ÇÄ)]
    linarith [le_max_left a (s x‚ÇÄ)]
  have ht‚ÇÄ : s x‚ÇÄ ‚àà Ioo a‚ÇÄ b‚ÇÄ := by
    dsimp
    constructor
    linarith [min_le_right a (s x‚ÇÄ)]
    linarith [le_max_right a (s x‚ÇÄ)]
  have cpct : IsCompact (closedBall x‚ÇÄ 1 √óÀ¢ Icc a‚ÇÄ b‚ÇÄ) :=
    (ProperSpace.isCompact_closedBall x‚ÇÄ 1).prod isCompact_Icc
  obtain ‚ü®K, F_lip‚ü© : ‚àÉ K, ‚àÄ t ‚àà Ioo a‚ÇÄ b‚ÇÄ, LipschitzOnWith K (fun x ‚Ü¶ F x t) (ball x‚ÇÄ 1) := by
    have conv : Convex ‚Ñù (closedBall x‚ÇÄ 1 √óÀ¢ Icc a‚ÇÄ b‚ÇÄ) :=
      (convex_closedBall x‚ÇÄ 1).prod (convex_Icc a‚ÇÄ b‚ÇÄ)
    rcases hF.lipschitzOnWith le_rfl conv cpct with ‚ü®K, hK‚ü©
    use K
    intro t t_in
    rw [show (fun x : H ‚Ü¶ F x t) = uncurry F ‚àò fun x : H ‚Ü¶ (x, t) by ext; simp, ‚Üê mul_one K]
    apply hK.comp ((LipschitzWith.prod_mk_right t).lipschitzOnWith <| ball x‚ÇÄ 1)
    rw [mapsTo']
    rintro ‚ü®x, s‚ü© ‚ü®x', hx, h‚ü©; cases h
    exact ‚ü®ball_subset_closedBall hx, mem_Icc_of_Ioo t_in‚ü©
  have cont_x : ‚àÄ x, Continuous (F x) := fun x ‚Ü¶ hF.continuous.comp (Continuous.Prod.mk x)
  have int_Icc : ‚àÄ x, IntegrableOn (F x) (Icc a‚ÇÄ b‚ÇÄ) := fun x ‚Ü¶
    (cont_x x).continuousOn.integrableOn_Icc
  have int_Ioo : ‚àÄ x, IntegrableOn (F x) (Ioo a‚ÇÄ b‚ÇÄ)
  ¬∑ exact fun x ‚Ü¶ (int_Icc x).mono_set Ioo_subset_Icc_self
  save
  apply
    hasFDerivAt_parametric_primitive_of_lip' _ _ zero_lt_one ha ht‚ÇÄ
      (fun x _hx ‚Ü¶ (cont_x x).aestronglyMeasurable) (int_Ioo x‚ÇÄ) (cont_x x‚ÇÄ).continuousAt _ _ _
      (continuousAt_const : (ContinuousAt fun _ : ‚Ñù ‚Ü¶ (K : ‚Ñù)) <| s x‚ÇÄ) fun _t ‚Ü¶
      NNReal.coe_nonneg K
  ¬∑ apply ae_of_all
    intro t
    apply (ContDiff.hasStrictFDerivAt _ le_rfl).hasFDerivAt
    rw [show (fun x ‚Ü¶ F x t) = uncurry F ‚àò fun x ‚Ü¶ (x, t) by ext; simp]
    exact hF.comp ((contDiff_prod_mk_left t).of_le le_top)
  ¬∑ exact (ContDiff.hasStrictFDerivAt hs le_rfl).hasFDerivAt
  ¬∑ rfl
  ¬∑ apply Continuous.aestronglyMeasurable
    have :
      (fun t ‚Ü¶ fderiv ‚Ñù (fun x : H ‚Ü¶ F x t) x‚ÇÄ) =
        (fun œÜ : H √ó ‚Ñù ‚ÜíL[‚Ñù] E ‚Ü¶ œÜ.comp (inl ‚Ñù H ‚Ñù)) ‚àò
          (fderiv ‚Ñù <| uncurry F) ‚àò fun t ‚Ü¶ (x‚ÇÄ, t) := by
      ext t
      have : HasFDerivAt (fun e ‚Ü¶ F e t) ((fderiv ‚Ñù (uncurry F) (x‚ÇÄ, t)).comp (inl ‚Ñù H ‚Ñù)) x‚ÇÄ :=
        (hF.hasStrictFDerivAt le_rfl).hasFDerivAt.comp _ (hasFDerivAt_prod_mk_left _ _)
      rw [this.fderiv]
      rfl
    rw [this]; clear this
    exact
      (inl ‚Ñù H ‚Ñù).compRightL.continuous.comp
        ((hF.continuous_fderiv le_rfl).comp <| Continuous.Prod.mk x‚ÇÄ)
  ¬∑ simp_rw [ae_restrict_iff' measurableSet_Ioo]
    refine eventually_of_forall fun t t_in ‚Ü¶ ?_
    rw [nnabs_coe K]
    exact F_lip t t_in
  ¬∑ exact integrableOn_const.mpr (Or.inr measure_Ioo_lt_top)

end

section

variable {E : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E] {H : Type _}
  [NormedAddCommGroup H] [NormedSpace ‚Ñù H] [FiniteDimensional ‚Ñù H]

open Real ContinuousLinearMap Asymptotics

local notation:70 u " ‚¨ù " œÜ => ContinuousLinearMap.comp (ContinuousLinearMap.toSpanSingleton ‚Ñù u) œÜ

theorem contDiff_parametric_primitive_of_contDiff' {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï} (hF : ContDiff ‚Ñù n ‚ÜøF)
    {s : H ‚Üí ‚Ñù} (hs : ContDiff ‚Ñù n s) (a : ‚Ñù) : ContDiff ‚Ñù n fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t := by
  induction' n with n ih generalizing F
  ¬∑ rw [Nat.cast_zero, contDiff_zero] at *
    exact continuous_parametric_intervalIntegral_of_continuous hF hs
  ¬∑ have hF‚ÇÅ : ContDiff ‚Ñù 1 ‚ÜøF := hF.one_of_succ
    have hs‚ÇÅ : ContDiff ‚Ñù 1 s := hs.one_of_succ
    have h :
      ‚àÄ x,
        HasFDerivAt (fun x ‚Ü¶ ‚à´ t in a..s x, F x t)
          ((‚à´ t in a..s x, fderiv ‚Ñù (fun x' ‚Ü¶ F x' t) x) + F x (s x) ‚¨ù fderiv ‚Ñù s x) x :=
      fun x ‚Ü¶ (hasFDerivAt_parametric_primitive_of_contDiff' hF‚ÇÅ hs‚ÇÅ x a).2
    rw [contDiff_succ_iff_fderiv_apply]
    constructor
    ¬∑ exact fun x‚ÇÄ ‚Ü¶ ‚ü®_, h x‚ÇÄ‚ü©
    ¬∑ intro x
      rw [fderiv_eq h]
      apply ContDiff.add
      ¬∑ simp only [ContinuousLinearMap.coe_coe]
        have hD' : ContDiff ‚Ñù n ‚Üøfun x‚ÇÄ t ‚Ü¶ fderiv ‚Ñù (fun x ‚Ü¶ F x t) x‚ÇÄ :=
          ContDiff.fderiv (hF.comp‚ÇÇ contDiff_snd contDiff_fst.snd) contDiff_fst le_rfl
        have hD : ContDiff ‚Ñù n ‚Üøfun x' a ‚Ü¶ (fderiv ‚Ñù (fun e ‚Ü¶ F e a) x') x :=
          hD'.clm_apply contDiff_const
        convert ih hD hs.of_succ with x'
        refine ContinuousLinearMap.intervalIntegral_apply ?_ x
        exact (continuous_curry x' hD'.continuous).intervalIntegrable _ _
      ¬∑ exact ((contDiff_succ_iff_fderiv.mp hs).2.smulRight
          (hF.of_succ.comp <| contDiff_id.prod hs.of_succ)).clm_apply contDiff_const

end

section

universe v u

variable {E : Type u}

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E] {H : Type v}
  [NormedAddCommGroup H] [NormedSpace ‚Ñù H] [FiniteDimensional ‚Ñù H]

-- Should we directly prove the version below?
@[fun_prop]
theorem contDiff_parametric_primitive_of_contDiff {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï‚àû} (hF : ContDiff ‚Ñù n (fun (x,y) => F x y))
    {s : H ‚Üí ‚Ñù} (hs : ContDiff ‚Ñù n s) (a : ‚Ñù) : ContDiff ‚Ñù n fun x : H ‚Ü¶ ‚à´ t in a..s x, F x t := by
  induction n using WithTop.recTopCoe
  ¬∑ rw [contDiff_top] at *
    exact fun n ‚Ü¶ contDiff_parametric_primitive_of_contDiff' (hF n) (hs n) a
  ¬∑ exact contDiff_parametric_primitive_of_contDiff' hF hs a

theorem contDiff_parametric_primitive_of_contDiff'' {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï‚àû} (hF : ContDiff ‚Ñù n ‚ÜøF)
    (a : ‚Ñù) : ContDiff ‚Ñù n fun x : H √ó ‚Ñù ‚Ü¶ ‚à´ t in a..x.2, F x.1 t :=
  have cd : ContDiff ‚Ñù n ‚Üøfun (x : H √ó ‚Ñù) (t : ‚Ñù) ‚Ü¶ F x.1 t :=
    hF.comp (contDiff_fst.prod_map contDiff_id)
  contDiff_parametric_primitive_of_contDiff cd contDiff_snd a

theorem contDiff_parametric_integral_of_contDiff {F : H ‚Üí ‚Ñù ‚Üí E} {n : ‚Ñï‚àû} (hF : ContDiff ‚Ñù n ‚ÜøF)
    (a b : ‚Ñù) : ContDiff ‚Ñù n fun x : H ‚Ü¶ ‚à´ t in a..b, F x t :=
  contDiff_parametric_primitive_of_contDiff hF contDiff_const a

theorem ContDiff.fderiv_parametric_integral {F : H ‚Üí ‚Ñù ‚Üí E} (hF : ContDiff ‚Ñù 1 ‚ÜøF) (a b : ‚Ñù) :
    (fderiv ‚Ñù fun x : H ‚Ü¶ ‚à´ t in a..b, F x t) = fun x : H ‚Ü¶
      ‚à´ t in a..b, fderiv ‚Ñù (fun x' ‚Ü¶ F x' t) x := by
  ext x‚ÇÄ
  cases' hasFDerivAt_parametric_primitive_of_contDiff' hF contDiff_const x‚ÇÄ a with int h
  rw [h.fderiv, fderiv_const]
  simp only [ContinuousLinearMap.comp_zero, add_zero, Pi.zero_apply]

end
