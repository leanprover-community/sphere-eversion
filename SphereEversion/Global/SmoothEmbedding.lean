import Mathlib.Geometry.Manifold.MFDeriv.SpecificFunctions
import Mathlib.Topology.Algebra.Order.Compact
import SphereEversion.Indexing
import SphereEversion.Notations
import SphereEversion.ToMathlib.Analysis.NormedSpace.Misc
import SphereEversion.ToMathlib.Geometry.Manifold.SmoothManifoldWithCorners
import SphereEversion.ToMathlib.Topology.Misc
import SphereEversion.ToMathlib.Topology.Paracompact

noncomputable section

open Set Equiv

open scoped Manifold Topology

section General

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {H : Type*} [TopologicalSpace H] (I : ModelWithCorners ùïú E H) (M : Type*)
  [TopologicalSpace M] [ChartedSpace H M] [SmoothManifoldWithCorners I M] {E' : Type*}
  [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H' : Type*} [TopologicalSpace H']
  (I' : ModelWithCorners ùïú E' H') (M' : Type*) [TopologicalSpace M'] [ChartedSpace H' M']
  [SmoothManifoldWithCorners I' M']

structure OpenSmoothEmbedding where
  toFun : M ‚Üí M'
  invFun : M' ‚Üí M
  left_inv' : ‚àÄ {x}, invFun (toFun x) = x
  isOpen_range : IsOpen (range toFun)
  smooth_to : Smooth I I' toFun
  smooth_inv : SmoothOn I' I invFun (range toFun)

attribute [coe] OpenSmoothEmbedding.toFun

-- Note: this cannot be a `FunLike` instance since `toFun` is not injective in general.
instance : CoeFun (OpenSmoothEmbedding I M I' M') fun _ ‚Ü¶ M ‚Üí M' :=
  ‚ü®OpenSmoothEmbedding.toFun‚ü©

namespace OpenSmoothEmbedding

variable {I I' M M'}

variable (f : OpenSmoothEmbedding I M I' M')

@[simp]
theorem coe_mk (f g h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ) : ‚áë(‚ü®f, g, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ‚ü© : OpenSmoothEmbedding I M I' M') = f :=
  rfl

@[simp]
theorem left_inv (x : M) : f.invFun (f x) = x := by apply f.left_inv'

@[simp]
theorem invFun_comp_coe : f.invFun ‚àò f = id :=
  funext f.left_inv

@[simp]
theorem right_inv {y : M'} (hy : y ‚àà range f) : f (f.invFun y) = y := by
  obtain ‚ü®x, rfl‚ü© := hy;
  rw [f.left_inv]

theorem smoothAt_inv {y : M'} (hy : y ‚àà range f) : SmoothAt I' I f.invFun y :=
  (f.smooth_inv y hy).contMDiffAt <| f.isOpen_range.mem_nhds hy

theorem smoothAt_inv' {x : M} : SmoothAt I' I f.invFun (f x) :=
  f.smoothAt_inv <| mem_range_self x

theorem leftInverse : Function.LeftInverse f.invFun f :=
  left_inv f

theorem injective : Function.Injective f :=
  f.leftInverse.injective

protected theorem continuous : Continuous f :=
  f.smooth_to.continuous

theorem isOpenMap : IsOpenMap f :=
  f.leftInverse.isOpenMap f.isOpen_range f.smooth_inv.continuousOn

theorem coe_comp_invFun_eventuallyEq (x : M) : f ‚àò f.invFun =·∂†[ùìù (f x)] id :=
  Filter.eventually_of_mem (f.isOpenMap.range_mem_nhds x) fun _ hy ‚Ü¶ f.right_inv hy

/- Note that we are slightly abusing the fact that `TangentSpace I x` and
`TangentSpace I (f.invFun (f x))` are both definitionally `E` below. -/
def fderiv (x : M) : TangentSpace I x ‚âÉL[ùïú] TangentSpace I' (f x) :=
  have h‚ÇÅ : MDifferentiableAt I' I f.invFun (f x) :=
    ((f.smooth_inv (f x) (mem_range_self x)).mdifferentiableWithinAt le_top).mdifferentiableAt
      (f.isOpenMap.range_mem_nhds x)
  have h‚ÇÇ : MDifferentiableAt I I' f x := f.smooth_to.contMDiff.mdifferentiable le_top _
  ContinuousLinearEquiv.equivOfInverse (mfderiv I I' f x) (mfderiv I' I f.invFun (f x))
    (by
      intro v
      erw [‚Üê ContinuousLinearMap.comp_apply, ‚Üê mfderiv_comp x h‚ÇÅ h‚ÇÇ, f.invFun_comp_coe, mfderiv_id,
        ContinuousLinearMap.coe_id', id])
    (by
      intro v
      have hx : x = f.invFun (f x) := by rw [f.left_inv]
      have hx' : f (f.invFun (f x)) = f x := by rw [f.left_inv]
      rw [hx] at h‚ÇÇ
      erw [hx, hx', ‚Üê ContinuousLinearMap.comp_apply, ‚Üê mfderiv_comp (f x) h‚ÇÇ h‚ÇÅ,
        ((hasMFDerivAt_id I' (f x)).congr_of_eventuallyEq
            (f.coe_comp_invFun_eventuallyEq x)).mfderiv,
        ContinuousLinearMap.coe_id', id])

@[simp]
theorem fderiv_coe (x : M) :
    (f.fderiv x : TangentSpace I x ‚ÜíL[ùïú] TangentSpace I' (f x)) = mfderiv I I' f x := by ext; rfl

@[simp]
theorem fderiv_symm_coe (x : M) :
    ((f.fderiv x).symm : TangentSpace I' (f x) ‚ÜíL[ùïú] TangentSpace I x) =
      mfderiv I' I f.invFun (f x) := by ext; rfl

theorem fderiv_symm_coe' {x : M'} (hx : x ‚àà range f) :
    ((f.fderiv (f.invFun x)).symm :
        TangentSpace I' (f (f.invFun x)) ‚ÜíL[ùïú] TangentSpace I (f.invFun x)) =
      (mfderiv I' I f.invFun x : TangentSpace I' x ‚ÜíL[ùïú] TangentSpace I (f.invFun x)) :=
  by rw [fderiv_symm_coe, f.right_inv hx]

open Filter

theorem openEmbedding : OpenEmbedding f :=
  openEmbedding_of_continuous_injective_open f.continuous f.injective f.isOpenMap

theorem inducing : Inducing f :=
  f.openEmbedding.toInducing

theorem forall_near' {P : M ‚Üí Prop} {A : Set M'} (h : ‚àÄ·∂† m near f ‚Åª¬π' A, P m) :
    ‚àÄ·∂† m' near A ‚à© range f, ‚àÄ m, m' = f m ‚Üí P m := by
  rw [eventually_nhdsSet_iff_forall] at h ‚ä¢
  rintro _ ‚ü®hfm‚ÇÄ, m‚ÇÄ, rfl‚ü©
  have : ‚àÄ U ‚àà ùìù m‚ÇÄ, ‚àÄ·∂† m' in ùìù (f m‚ÇÄ), m' ‚àà f '' U := by
    intro U U_in
    exact f.isOpenMap.image_mem_nhds U_in
  apply (this _ <| h m‚ÇÄ hfm‚ÇÄ).mono
  rintro _ ‚ü®m‚ÇÄ, hm‚ÇÄ, hm‚ÇÄ'‚ü© m‚ÇÅ rfl
  rwa [‚Üê f.injective hm‚ÇÄ']

theorem eventually_nhdsSet_mono {Œ± : Type*} [TopologicalSpace Œ±] {s t : Set Œ±} {P : Œ± ‚Üí Prop}
    (h : ‚àÄ·∂† x near t, P x) (h' : s ‚äÜ t) : ‚àÄ·∂† x near s, P x :=
  h.filter_mono (nhdsSet_mono h')

-- TODO: optimize this proof which is probably more complicated than it needs to be
theorem forall_near [T2Space M'] {P : M ‚Üí Prop} {P' : M' ‚Üí Prop} {K : Set M} (hK : IsCompact K)
    {A : Set M'} (hP : ‚àÄ·∂† m near f ‚Åª¬π' A, P m) (hP' : ‚àÄ·∂† m' near A, m' ‚àâ f '' K ‚Üí P' m')
    (hPP' : ‚àÄ m, P m ‚Üí P' (f m)) : ‚àÄ·∂† m' near A, P' m' := by
  rw [show A = A ‚à© range f ‚à™ A ‚à© (range f)·∂ú by simp]
  apply Filter.Eventually.union
  ¬∑ have : ‚àÄ·∂† m' near A ‚à© range f, m' ‚àà range f :=
      f.isOpen_range.mem_nhdsSet.mpr inter_subset_right
    apply (this.and <| f.forall_near' hP).mono
    rintro _ ‚ü®‚ü®m, rfl‚ü©, hm‚ü©
    exact hPP' _ (hm _ rfl)
  ¬∑ have op : IsOpen ((f '' K)·∂ú) := by
      rw [isOpen_compl_iff]
      exact (hK.image f.continuous).isClosed
    have : A ‚à© (range f)·∂ú ‚äÜ A ‚à© (f '' K)·∂ú :=
      inter_subset_inter_right _ (compl_subset_compl.mpr (image_subset_range f K))
    apply eventually_nhdsSet_mono _ this
    rw [eventually_nhdsSet_iff_forall] at hP' ‚ä¢
    rintro x ‚ü®hx, hx'‚ü©
    have hx' : ‚àÄ·∂† y in ùìù x, y ‚àà (f '' K)·∂ú := isOpen_iff_eventually.mp op x hx'
    apply ((hP' x hx).and hx').mono
    rintro y ‚ü®hy, hy'‚ü©
    exact hy hy'

variable (I M)

-- unused
/-- The identity map is a smooth open embedding. -/
@[simps]
nonrec def id : OpenSmoothEmbedding I M I M where
  toFun := id
  invFun := id
  left_inv' := rfl
  isOpen_range := IsOpenMap.id.isOpen_range
  smooth_to := smooth_id
  smooth_inv := smoothOn_id

variable {I M}

/- -- unused
@[simps!]
def comp {E'' : Type*} [NormedAddCommGroup E''] [NormedSpace ùïú E''] {H'' : Type*}
    [TopologicalSpace H''] {I'' : ModelWithCorners ùïú E'' H''} {M'' : Type*} [TopologicalSpace M'']
    [ChartedSpace H'' M''] [SmoothManifoldWithCorners I'' M'']
    (g : OpenSmoothEmbedding I' M' I'' M'') (f : OpenSmoothEmbedding I M I' M') :
    OpenSmoothEmbedding I M I'' M'' where
  toFun := g ‚àò f
  invFun := f.invFun ‚àò g.invFun
  left_inv' x := by simp only [Function.comp_apply, left_inv]
  isOpen_range := (g.isOpenMap.comp f.isOpenMap).isOpen_range
  smooth_to := g.smooth_to.comp f.smooth_to
  smooth_inv :=
    (f.smooth_inv.comp' g.smooth_inv).mono
      (by
        change range (g ‚àò f) ‚äÜ range g ‚à© g.inv_fun ‚Åª¬π' range f
        refine subset_inter_iff.mpr ‚ü®range_comp_subset_range f g, ?_‚ü©
        rintro x' ‚ü®x, rfl‚ü©
        exact ‚ü®x, by simp only [left_inv]‚ü©) -/

end OpenSmoothEmbedding

namespace ContinuousLinearEquiv

variable (e : E ‚âÉL[ùïú] E') [CompleteSpace E] [CompleteSpace E']

-- unused
@[simps]
def toOpenSmoothEmbedding : OpenSmoothEmbedding ùìò(ùïú, E) E ùìò(ùïú, E') E' where
  toFun := e
  invFun := e.symm
  left_inv' {x} := e.symm_apply_apply x
  isOpen_range := e.isOpenMap.isOpen_range
  smooth_to := (e : E ‚ÜíL[ùïú] E').contMDiff
  smooth_inv := (e.symm : E' ‚ÜíL[ùïú] E).contMDiff.contMDiffOn

end ContinuousLinearEquiv

end General

section WithoutBoundary

open Metric hiding mem_nhds_iff

open Function

universe u

variable {F H : Type*} (M : Type u) [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [TopologicalSpace H]
  [TopologicalSpace M] [ChartedSpace H M] [T2Space M] [LocallyCompactSpace M] [SigmaCompactSpace M]
  (IF : ModelWithCorners ‚Ñù F H) [SmoothManifoldWithCorners IF M]

/- Clearly should be generalised. Maybe what we really want is a theory of local diffeomorphisms.

Note that the input `f` is morally an `OpenSmoothEmbedding` but stated in terms of `ContDiff`
instead of `ContMDiff`. This is more convenient for our purposes. -/
def openSmoothEmbOfDiffeoSubsetChartTarget (x : M) {f : PartialHomeomorph F F} (hf‚ÇÅ : f.source = univ)
    (hf‚ÇÇ : ContDiff ‚Ñù ‚àû f) (hf‚ÇÉ : ContDiffOn ‚Ñù ‚àû f.symm f.target)
    (hf‚ÇÑ : range f ‚äÜ IF '' (chartAt H x).target) : OpenSmoothEmbedding ùìò(‚Ñù, F) F IF M
    where
  toFun := (extChartAt IF x).symm ‚àò f
  invFun := f.invFun ‚àò extChartAt IF x
  left_inv' {y} := by
    obtain ‚ü®z, hz, hz'‚ü© := hf‚ÇÑ (mem_range_self y)
    have aux : f.symm (IF z) = y := by rw [hz']; exact f.left_inv (hf‚ÇÅ.symm ‚ñ∏ mem_univ _)
    simp only [‚Üê hz', (chartAt H x).right_inv hz, aux, extChartAt, PartialHomeomorph.extend,
      PartialEquiv.coe_trans, PartialHomeomorph.invFun_eq_coe, ModelWithCorners.toPartialEquiv_coe,
      PartialHomeomorph.coe_coe, PartialEquiv.coe_trans_symm, PartialHomeomorph.coe_coe_symm,
      ModelWithCorners.left_inv, ModelWithCorners.toPartialEquiv_coe_symm, Function.comp_apply, aux]
  isOpen_range :=
    IsOpenMap.isOpen_range fun u hu ‚Ü¶ by
      have aux : IsOpen (f '' u) := f.isOpen_image_of_subset_source hu (hf‚ÇÅ.symm ‚ñ∏ subset_univ u)
      convert isOpen_extChartAt_preimage' IF x aux
      rw [image_comp]
      refine
        (extChartAt IF x).symm_image_eq_source_inter_preimage ((image_subset_range f u).trans ?_)
      rw [extChartAt, PartialHomeomorph.extend_target']
      exact hf‚ÇÑ
  smooth_to := by
    refine (contMDiffOn_extChartAt_symm x).comp_contMDiff hf‚ÇÇ.contMDiff fun y ‚Ü¶ ?_
    rw [extChartAt, PartialHomeomorph.extend_target']
    exact hf‚ÇÑ (mem_range_self y)
  smooth_inv := by
    rw [‚Üê PartialHomeomorph.extend_target'] at hf‚ÇÑ
    have hf' : range ((extChartAt IF x).symm ‚àò f) ‚äÜ extChartAt IF x ‚Åª¬π' f.target := by
      rw [range_comp, ‚Üê image_subset_iff, ‚Üê f.image_source_eq_target, hf‚ÇÅ, image_univ]
      exact (PartialEquiv.image_symm_image_of_subset_target _ hf‚ÇÑ).subset
    have hf'' : range ((extChartAt IF x).symm ‚àò f) ‚äÜ (chartAt H x).source := by
      rw [‚Üê extChartAt_source IF, range_comp, ‚Üê PartialEquiv.symm_image_target_eq_source]
      exact (monotone_image hf‚ÇÑ).trans Subset.rfl
    exact hf‚ÇÉ.contMDiffOn.comp (contMDiffOn_extChartAt.mono hf'') hf'

@[simp]
theorem coe_openSmoothEmbOfDiffeoSubsetChartTarget (x : M) {f : PartialHomeomorph F F}
    (hf‚ÇÅ : f.source = univ) (hf‚ÇÇ : ContDiff ‚Ñù ‚àû f) (hf‚ÇÉ : ContDiffOn ‚Ñù ‚àû f.symm f.target)
    (hf‚ÇÑ : range f ‚äÜ IF '' (chartAt H x).target) :
    (openSmoothEmbOfDiffeoSubsetChartTarget M IF x hf‚ÇÅ hf‚ÇÇ hf‚ÇÉ hf‚ÇÑ : F ‚Üí M) =
      (extChartAt IF x).symm ‚àò f := by simp [openSmoothEmbOfDiffeoSubsetChartTarget]

theorem range_openSmoothEmbOfDiffeoSubsetChartTarget (x : M) {f : PartialHomeomorph F F}
    (hf‚ÇÅ : f.source = univ) (hf‚ÇÇ : ContDiff ‚Ñù ‚àû f) (hf‚ÇÉ : ContDiffOn ‚Ñù ‚àû f.symm f.target)
    (hf‚ÇÑ : range f ‚äÜ IF '' (chartAt H x).target) :
    range (openSmoothEmbOfDiffeoSubsetChartTarget M IF x hf‚ÇÅ hf‚ÇÇ hf‚ÇÉ hf‚ÇÑ) =
      (extChartAt IF x).symm '' range f := by
  rw [coe_openSmoothEmbOfDiffeoSubsetChartTarget, range_comp]

variable {M} (F)
variable [IF.Boundaryless] [FiniteDimensional ‚Ñù F]

theorem nice_atlas' {Œπ : Type*} {s : Œπ ‚Üí Set M} (s_op : ‚àÄ j, IsOpen <| s j)
    (cov : (‚ãÉ j, s j) = univ) (U : Set F) (hU‚ÇÅ : (0 : F) ‚àà U) (hU‚ÇÇ : IsOpen U) :
    ‚àÉ (Œπ' : Type u) (t : Set Œπ') (œÜ : t ‚Üí OpenSmoothEmbedding ùìò(‚Ñù, F) F IF M),
      t.Countable ‚àß
        (‚àÄ i, ‚àÉ j, range (œÜ i) ‚äÜ s j) ‚àß
          (LocallyFinite fun i ‚Ü¶ range (œÜ i)) ‚àß (‚ãÉ i, œÜ i '' U) = univ := by
  set W : M ‚Üí ‚Ñù ‚Üí Set M := fun x r ‚Ü¶
    (extChartAt IF x).symm ‚àò diffeomorphToNhd (extChartAt IF x x) r '' U with W_def
  let B : M ‚Üí ‚Ñù ‚Üí Set M := ChartedSpace.ball IF
  let p : M ‚Üí ‚Ñù ‚Üí Prop := fun x r ‚Ü¶
    0 < r ‚àß ball (extChartAt IF x x) r ‚äÜ (extChartAt IF x).target ‚àß ‚àÉ j, B x r ‚äÜ s j
  have hW‚ÇÄ : ‚àÄ x r, p x r ‚Üí x ‚àà W x r := fun x r h ‚Ü¶ ‚ü®0, hU‚ÇÅ, by simp [h.1]‚ü©
  have hW‚ÇÅ : ‚àÄ x r, p x r ‚Üí IsOpen (W x r) := by
    rintro x r ‚ü®h‚ÇÅ, h‚ÇÇ, -, -‚ü©
    simp only [W_def]
    rw [image_comp]
    let V := diffeomorphToNhd (extChartAt IF x x) r '' U
    change IsOpen ((extChartAt IF x).symm '' V)
    have hV‚ÇÅ : IsOpen V :=
      ((diffeomorphToNhd (extChartAt IF x x) r).isOpen_image_iff_of_subset_source (by simp)).mpr hU‚ÇÇ
    have hV‚ÇÇ : V ‚äÜ (extChartAt IF x).target :=
      Subset.trans ((image_subset_range _ _).trans (by simp [h‚ÇÅ])) h‚ÇÇ
    rw [(extChartAt IF x).symm_image_eq_source_inter_preimage hV‚ÇÇ]
    exact isOpen_extChartAt_preimage' IF x hV‚ÇÅ
  have hB : ‚àÄ x, (ùìù x).HasBasis (p x) (B x) := fun x ‚Ü¶
    ChartedSpace.nhds_hasBasis_balls_of_open_cov IF x s_op cov
  obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ, ht‚ÇÉ, ht‚ÇÑ‚ü© := exists_countable_locallyFinite_cover surjective_id hW‚ÇÄ hW‚ÇÅ hB
  let g : M √ó ‚Ñù ‚Üí PartialHomeomorph F F := fun z ‚Ü¶ diffeomorphToNhd (extChartAt IF z.1 z.1) z.2
  have hg‚ÇÅ : ‚àÄ z, (g z).source = univ := by simp [g]
  have hg‚ÇÇ : ‚àÄ z, ContDiff ‚Ñù ‚àû (g z) := by simp [g]
  have hg‚ÇÉ : ‚àÄ z, ContDiffOn ‚Ñù ‚àû (g z).symm (g z).target := by simp [g]
  refine ‚ü®M √ó ‚Ñù, t,
    fun z ‚Ü¶ openSmoothEmbOfDiffeoSubsetChartTarget M IF z.1.1 (hg‚ÇÅ z.1) (hg‚ÇÇ z.1) (hg‚ÇÉ z.1) ?_, ht‚ÇÅ,
    fun z ‚Ü¶ ?_, ?_, ?_‚ü©
  ¬∑ obtain ‚ü®‚ü®x, r‚ü©, hxr‚ü© := z
    obtain ‚ü®hr : 0 < r, hr' : ball (extChartAt IF x x) r ‚äÜ _, -‚ü© := ht‚ÇÇ _ hxr
    simp_rw [g, extChartAt]
    rw [‚Üê PartialHomeomorph.extend_target']
    exact (range_diffeomorphToNhd_subset_ball (extChartAt IF x x) hr).trans hr'
  ¬∑ obtain ‚ü®‚ü®x, r‚ü©, hxr‚ü© := z
    obtain ‚ü®hr : 0 < r, -, j, hj : B x r ‚äÜ s j‚ü© := ht‚ÇÇ _ hxr
    simp_rw [range_openSmoothEmbOfDiffeoSubsetChartTarget]
    exact ‚ü®j, (monotone_image (range_diffeomorphToNhd_subset_ball _ hr)).trans hj‚ü©
  ¬∑ simp_rw [range_openSmoothEmbOfDiffeoSubsetChartTarget]
    refine ht‚ÇÑ.subset ?_
    rintro ‚ü®‚ü®x, r‚ü©, hxr‚ü©
    obtain ‚ü®hr : 0 < r, -, -‚ü© := ht‚ÇÇ _ hxr
    exact monotone_image (range_diffeomorphToNhd_subset_ball _ hr)
  ¬∑ simpa only [iUnion_coe_set] using ht‚ÇÉ

variable [Nonempty M]

theorem nice_atlas {Œπ : Type*} {s : Œπ ‚Üí Set M} (s_op : ‚àÄ j, IsOpen <| s j)
    (cov : (‚ãÉ j, s j) = univ) :
    ‚àÉ n, ‚àÉ œÜ : IndexType n ‚Üí OpenSmoothEmbedding ùìò(‚Ñù, F) F IF M,
        (‚àÄ i, ‚àÉ j, range (œÜ i) ‚äÜ s j) ‚àß
          (LocallyFinite fun i ‚Ü¶ range (œÜ i)) ‚àß (‚ãÉ i, œÜ i '' ball 0 1) = univ := by
  obtain ‚ü®Œπ', t, œÜ, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ‚ü© := nice_atlas' F IF s_op cov (ball 0 1) (by simp) isOpen_ball
  have htne : t.Nonempty := by
    by_contra contra
    simp only [iUnion_coe_set, not_nonempty_iff_eq_empty.mp contra, mem_empty_iff_false,
      iUnion_of_empty, iUnion_empty, eq_comm (b := univ), univ_eq_empty_iff] at h‚ÇÑ
    exact not_isEmpty_of_nonempty M h‚ÇÑ
  obtain ‚ü®n, ‚ü®fn‚ü©‚ü© := (Set.countable_iff_exists_nonempty_indexType_equiv htne).mp h‚ÇÅ
  refine ‚ü®n, œÜ ‚àò fn, fun i ‚Ü¶ h‚ÇÇ (fn i), h‚ÇÉ.comp_injective fn.injective, ?_‚ü©
  erw [fn.surjective.iUnion_comp fun i ‚Ü¶ œÜ i '' ball 0 1, h‚ÇÑ]

end WithoutBoundary

namespace OpenSmoothEmbedding

section Updating

variable {ùïú EX EM EY EN EM' X M Y N M' : Type*} [NontriviallyNormedField ùïú]
  [NormedAddCommGroup EX] [NormedSpace ùïú EX] [NormedAddCommGroup EM] [NormedSpace ùïú EM]
  [NormedAddCommGroup EM'] [NormedSpace ùïú EM'] [NormedAddCommGroup EY] [NormedSpace ùïú EY]
  [NormedAddCommGroup EN] [NormedSpace ùïú EN]
  {HX : Type*} [TopologicalSpace HX] {IX : ModelWithCorners ùïú EX HX}
  {HY : Type*} [TopologicalSpace HY] {IY : ModelWithCorners ùïú EY HY}
  {HM : Type*} [TopologicalSpace HM] {IM : ModelWithCorners ùïú EM HM}
  {HM' : Type*} [TopologicalSpace HM'] {IM' : ModelWithCorners ùïú EM' HM'}
  {HN : Type*} [TopologicalSpace HN] {IN : ModelWithCorners ùïú EN HN}
  [TopologicalSpace X] [ChartedSpace HX X] [SmoothManifoldWithCorners IX X]
  [TopologicalSpace M] [ChartedSpace HM M] [SmoothManifoldWithCorners IM M]
  [TopologicalSpace M'] [ChartedSpace HM' M']

section NonMetric

variable [TopologicalSpace Y] [ChartedSpace HY Y] [SmoothManifoldWithCorners IY Y]
  [TopologicalSpace N] [ChartedSpace HN N] [SmoothManifoldWithCorners IN N]
  (œÜ : OpenSmoothEmbedding IX X IM M) (œà : OpenSmoothEmbedding IY Y IN N) (f : M ‚Üí N) (g : X ‚Üí Y)

section

attribute [local instance] Classical.dec

/-- This is definition `def:update` in the blueprint. -/
def update (m : M) : N :=
  if m ‚àà range œÜ then œà (g (œÜ.invFun m)) else f m

end

@[simp]
theorem update_of_nmem_range {m : M} (hm : m ‚àâ range œÜ) : update œÜ œà f g m = f m := if_neg hm

@[simp]
theorem update_of_mem_range {m : M} (hm : m ‚àà range œÜ) : update œÜ œà f g m = œà (g (œÜ.invFun m)) :=
  if_pos hm

theorem update_apply_embedding (x : X) : update œÜ œà f g (œÜ x) = œà (g x) := by simp

-- This small auxiliary result is used in the next two lemmas.
theorem nice_update_of_eq_outside_compact_aux {K : Set X} (g : X ‚Üí Y)
    (hg : ‚àÄ x : X, x ‚àâ K ‚Üí f (œÜ x) = œà (g x)) {m : M} (hm : m ‚àâ œÜ '' K) : œÜ.update œà f g m = f m := by
  by_cases hm' : m ‚àà range œÜ
  ¬∑ obtain ‚ü®x, rfl‚ü© := hm'
    replace hm : x ‚àâ K := by contrapose! hm; exact mem_image_of_mem œÜ hm
    simp [hg x hm]
  ¬∑ exact if_neg hm'

open Function

/-- This is lemma `lem:smooth_updating` in the blueprint. -/
theorem smooth_update (f : M' ‚Üí M ‚Üí N) (g : M' ‚Üí X ‚Üí Y) {k : M' ‚Üí M} {K : Set X}
    (hK : IsClosed (œÜ '' K)) (hf : Smooth (IM'.prod IM) IN (uncurry f))
    (hg : Smooth (IM'.prod IX) IY (uncurry g)) (hk : Smooth IM' IM k)
    (hg' : ‚àÄ y x, x ‚àâ K ‚Üí f y (œÜ x) = œà (g y x)) :
    Smooth IM' IN fun x ‚Ü¶ update œÜ œà (f x) (g x) (k x) := by
  have hK' : ‚àÄ x, k x ‚àâ œÜ '' K ‚Üí update œÜ œà (f x) (g x) (k x) = f x (k x) := fun x hx ‚Ü¶
    nice_update_of_eq_outside_compact_aux œÜ œà (f x) (g x) (hg' x) hx
  refine contMDiff_of_locally_contMDiffOn fun x ‚Ü¶ ?_
  let U := range œÜ
  let V := (œÜ '' K)·∂ú
  have h‚ÇÇ : IsOpen (k ‚Åª¬π' V) := hK.isOpen_compl.preimage hk.continuous
  have h‚ÇÉ : V ‚à™ U = univ := by
    rw [‚Üê compl_subset_iff_union, compl_compl]
    exact image_subset_range œÜ K
  have h‚ÇÑ : ‚àÄ x, k x ‚àà U ‚Üí update œÜ œà (f x) (g x) (k x) = (œà ‚àò g x ‚àò œÜ.invFun) (k x) := fun m hm ‚Ü¶ by
    intros
    exact if_pos hm
  by_cases hx : k x ‚àà U
  ¬∑ exact ‚ü®k ‚Åª¬π' U, œÜ.isOpen_range.preimage hk.continuous, hx,
      (contMDiffOn_congr h‚ÇÑ).mpr <| œà.smooth_to.comp_contMDiffOn <| hg.comp_contMDiffOn
        (smoothOn_id.prod_mk <| œÜ.smooth_inv.comp hk.smoothOn Subset.rfl)‚ü©
  ¬∑ refine
      ‚ü®k ‚Åª¬π' V, h‚ÇÇ, ?_, (contMDiffOn_congr hK').mpr (hf.comp (smooth_id.prod_mk hk)).contMDiffOn‚ü©
    exact ((Set.ext_iff.mp h‚ÇÉ (k x)).mpr trivial).resolve_right hx

end NonMetric

section Metric

variable [MetricSpace Y] [ChartedSpace HY Y] [SmoothManifoldWithCorners IY Y] [MetricSpace N]
  [ChartedSpace HN N] [SmoothManifoldWithCorners IN N] (œÜ : OpenSmoothEmbedding IX X IM M)
  (œà : OpenSmoothEmbedding IY Y IN N) (f : M ‚Üí N) (g : X ‚Üí Y)

/-- This is `lem:dist_updating` in the blueprint. -/
theorem dist_update [ProperSpace Y] {K : Set X} (hK : IsCompact K) {P : Type*} [MetricSpace P]
    {KP : Set P} (hKP : IsCompact KP) (f : P ‚Üí M ‚Üí N) (hf : Continuous ‚Üøf)
    (hf' : ‚àÄ p, f p '' range œÜ ‚äÜ range œà) {Œµ : M ‚Üí ‚Ñù} (hŒµ : ‚àÄ m, 0 < Œµ m) (hŒµ' : Continuous Œµ) :
    ‚àÉ Œ∑ > (0 : ‚Ñù), ‚àÄ g : P ‚Üí X ‚Üí Y, ‚àÄ p ‚àà KP, ‚àÄ p' ‚àà KP, ‚àÄ x ‚àà K,
      dist (g p' x) (œà.invFun (f p (œÜ x))) < Œ∑ ‚Üí
        dist (update œÜ œà (f p') (g p') <| œÜ x) (f p <| œÜ x) < Œµ (œÜ x) := by
  let F : P √ó X ‚Üí Y := fun q ‚Ü¶ (œà.invFun ‚àò f q.1 ‚àò œÜ) q.2
  let K‚ÇÅ := Metric.cthickening 1 (F '' KP.prod K)
  have hK‚ÇÅ : IsCompact K‚ÇÅ := by
    refine Metric.isCompact_of_isClosed_isBounded Metric.isClosed_cthickening
        (Bornology.IsBounded.cthickening <| IsCompact.isBounded <| ?_)
    apply (hKP.prod hK).image
    exact œà.smooth_inv.continuousOn.comp_continuous
      (hf.comp <| continuous_fst.prod_mk <| œÜ.continuous.comp continuous_snd) fun q ‚Ü¶
      hf' q.1 ‚ü®œÜ q.2, mem_range_self _, rfl‚ü©
  have h‚ÇÅ : UniformContinuousOn œà K‚ÇÅ :=
    hK‚ÇÅ.uniformContinuousOn_of_continuous œà.continuous.continuousOn
  have hŒµœÜ : ‚àÄ x ‚àà K, 0 < (Œµ ‚àò œÜ) x := fun x _hx ‚Ü¶ hŒµ _
  obtain ‚ü®Œµ‚ÇÄ, hŒµ‚ÇÄ, hŒµ‚ÇÄ'‚ü© := hK.exists_forall_le' (hŒµ'.comp œÜ.continuous).continuousOn hŒµœÜ
  obtain ‚ü®œÑ, hœÑ : 0 < œÑ, hœÑ'‚ü© := Metric.uniformContinuousOn_iff.mp h‚ÇÅ Œµ‚ÇÄ hŒµ‚ÇÄ
  refine ‚ü®min œÑ 1, by simp [hœÑ], fun g p hp p' _hp' x hx hŒ∑ ‚Ü¶ ?_‚ü©
  cases' lt_min_iff.mp hŒ∑ with H H'
  apply lt_of_lt_of_le _ (hŒµ‚ÇÄ' x hx); clear hŒµ‚ÇÄ'
  simp only [update_apply_embedding]
  have h‚ÇÅ : g p' x ‚àà K‚ÇÅ :=
    Metric.mem_cthickening_of_dist_le (g p' x) (F (p, x)) 1 _ ‚ü®(p, x), ‚ü®hp, hx‚ü©, rfl‚ü© H'.le
  have h‚ÇÇ : f p (œÜ x) ‚àà range œà := hf' p ‚ü®œÜ x, mem_range_self _, rfl‚ü©
  rw [‚Üê œà.right_inv h‚ÇÇ]
  exact hœÑ' _ h‚ÇÅ _ (Metric.self_subset_cthickening _ ‚ü®(p, x), ‚ü®hp, hx‚ü©, rfl‚ü©) H

end Metric

end Updating

end OpenSmoothEmbedding
