import SphereEversion.Global.Relation
import Mathlib.Analysis.Convex.AmpleSet

noncomputable section

open Set Function

open Filter hiding map_smul

open ChartedSpace SmoothManifoldWithCorners

open LinearMap (ker)

open scoped Topology Manifold Pointwise ContDiff

section ParameterSpace

/-! ## Fundamental definitions -/


variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {H : Type*} [TopologicalSpace H]
  {I : ModelWithCorners ‚Ñù E H} {M : Type*} [TopologicalSpace M] [ChartedSpace H M]
  [IsManifold I ‚àû M] {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ‚Ñù E']
  {H' : Type*} [TopologicalSpace H'] {I' : ModelWithCorners ‚Ñù E' H'} {M' : Type*}
  [TopologicalSpace M'] [ChartedSpace H' M'] [IsManifold I' ‚àû M'] {EP : Type*}
  [NormedAddCommGroup EP] [NormedSpace ‚Ñù EP] {HP : Type*} [TopologicalSpace HP]
  {IP : ModelWithCorners ‚Ñù EP HP} {P : Type*} [TopologicalSpace P] [ChartedSpace HP P]
  [IsManifold IP ‚àû P] {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {G : Type*} [TopologicalSpace G] {J : ModelWithCorners ‚Ñù F G} {N : Type*} [TopologicalSpace N]
  [ChartedSpace G N] [IsManifold J ‚àû N] {EX : Type*} [NormedAddCommGroup EX]
  [NormedSpace ‚Ñù EX] {HX : Type*} [TopologicalSpace HX] {IX : ModelWithCorners ‚Ñù EX HX}
  -- note: X is a metric space
  {X : Type*}
  [MetricSpace X] [ChartedSpace HX X] [IsManifold IX ‚àû X]

variable {R : RelMfld I M I' M'}

variable (IP P) in
/-- The relation `ùì° ^ P` -/
def RelMfld.relativize (R : RelMfld I M I' M') : RelMfld (IP.prod I) (P √ó M) I' M' :=
  bundleSnd ‚Åª¬π' R

omit [IsManifold I ‚àû M] [IsManifold I' ‚àû M'] [IsManifold IP ‚àû P] in
theorem RelMfld.mem_relativize (R : RelMfld I M I' M')
    (w : OneJetBundle (IP.prod I) (P √ó M) I' M') :
    w ‚àà R.relativize IP P ‚Üî
      (OneJetBundle.mk w.1.1.2 w.1.2 (w.2.comp (ContinuousLinearMap.inr ‚Ñù EP E)) :
          OneJetBundle I M I' M') ‚àà R := by
  simp_rw [RelMfld.relativize, mem_preimage, bundleSnd_eq]; rfl

theorem RelMfld.isOpen_relativize (R : RelMfld I M I' M') (h2 : IsOpen R) :
    IsOpen (R.relativize IP P) :=
  h2.preimage contMDiff_bundleSnd.continuous

/-
Porting note: the next statement has huge elaboration issue because of defEq abuse.
We force our way using hard type ascription, ie. using `id`.
The following commented out variables and check show the issue.
variable {œÉ : OneJetBundle (IP.prod I) (P √ó M) I' M'}
    {p : DualPair <| TangentSpace (IP.prod I) œÉ.1.1}(q : DualPair <| TangentSpace I œÉ.1.1.2)

#check  p.v
#check (p.v - (id ((0 : EP), (q.v : E)) : TangentSpace (IP.prod I) œÉ.proj.1))
#check (R.relativize IP P).slice œÉ p
#check (R.slice (bundleSnd œÉ) q : Set <| TangentSpace I' œÉ.proj.2) -/

omit [IsManifold I ‚àû M] [IsManifold I' ‚àû M'] [IsManifold IP ‚àû P] in
theorem relativize_slice {œÉ : OneJetBundle (IP.prod I) (P √ó M) I' M'}
    {p : DualPair <| TangentSpace (IP.prod I) œÉ.1.1} (q : DualPair <| TangentSpace I œÉ.1.1.2)
    (hpq : p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù EP E) = q.œÄ) :
    (R.relativize IP P).slice œÉ p =
      œÉ.2 (p.v - (id (0, (q.v : E)) : TangentSpace (IP.prod I) œÉ.proj.1)) +·µ•
      (id (R.slice (bundleSnd œÉ) q) : Set <| TangentSpace I' œÉ.proj.2) := by
  set z := (p.v - (id (0, (q.v : E)) : TangentSpace (IP.prod I) œÉ.proj.1))
  have h2pq : ‚àÄ x : E, p.œÄ ((0 : EP), x) = q.œÄ x := fun x ‚Ü¶
    congr_arg (fun f : E ‚ÜíL[‚Ñù] ‚Ñù ‚Ü¶ f x) hpq
  ext1 w
  have h1 :
    (p.update œÉ.2 w).comp (ContinuousLinearMap.inr ‚Ñù EP E) =
      q.update (bundleSnd œÉ).2 (-œÉ.2 z + w) := by
    ext1 x
    erw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply,
         ‚Üê ContinuousLinearMap.map_neg, neg_sub]
    obtain ‚ü®u, hu, t, rfl‚ü© := q.decomp x
    have hv : (id (0, (q.v : E)) : TangentSpace (IP.prod I) œÉ.proj.1) - p.v ‚àà ker p.œÄ := by
      simp [LinearMap.mem_ker, map_sub, p.pairing, h2pq, q.pairing, sub_self]
    have hup : ((0 : EP), u) ‚àà ker p.œÄ := (h2pq u).trans hu
    erw [q.update_apply _ hu, ‚Üê Prod.zero_mk_add_zero_mk, map_add, p.update_ker_pi _ _ hup, ‚Üê
      Prod.smul_zero_mk, map_smul]
    conv_lhs => rw [‚Üê sub_add_cancel (0, q.v) p.v]
    erw [map_add, p.update_ker_pi _ _ hv, p.update_v, bundleSnd_eq]
    rfl
  erw [‚Üê preimage_vadd_neg, mem_preimage, mem_slice, R.mem_relativize]
  congr!

omit [IsManifold I ‚àû M] [IsManifold I' ‚àû M'] [IsManifold IP ‚àû P] in
theorem relativize_slice_eq_univ {œÉ : OneJetBundle (IP.prod I) (P √ó M) I' M'}
    {p : DualPair <| TangentSpace (IP.prod I) œÉ.1.1}
    (hp : p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù EP E) = 0) :
    ((R.relativize IP P).slice œÉ p).Nonempty ‚Üî (R.relativize IP P).slice œÉ p = univ := by
  rcases œÉ with ‚ü®‚ü®‚ü®q, m‚ü©,m'‚ü©, œÜ‚ü©
  have h2p : ‚àÄ x : E, p.œÄ ((0 : EP), x) = 0 := fun x ‚Ü¶ congr_arg (fun f : E ‚ÜíL[‚Ñù] ‚Ñù ‚Ü¶ f x) hp
  have :
    ‚àÄ y : E', (p.update œÜ y).comp (ContinuousLinearMap.inr ‚Ñù EP E) = œÜ.comp (ContinuousLinearMap.inr ‚Ñù EP E) := by
    intro y
    ext1 x
    erw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply,
      p.update_ker_pi _ _ (h2p x)]
    rfl
  simp_rw [Set.Nonempty, eq_univ_iff_forall]
  -- Porting note: those conv were not needed in Lean 3.
  conv_lhs =>
    congr
    ext x
    erw [mem_slice, R.mem_relativize, this]
  conv_rhs =>
    ext
    erw [mem_slice, R.mem_relativize, this]
  dsimp only [oneJetBundle_mk_fst, oneJetBundle_mk_snd]
  simp [this, exists_const, forall_const]

variable (IP P) in
omit [IsManifold I ‚àû M] [IsManifold I' ‚àû M'] [IsManifold IP ‚àû P] in
theorem RelMfld.Ample.relativize (hR : R.Ample) : (R.relativize IP P).Ample := by
  intro œÉ p
  let p2 := p.œÄ.comp (ContinuousLinearMap.inr ‚Ñù EP E)
  rcases eq_or_ne p2 0 with (h | h)
  ¬∑ intro w hw
    rw [(relativize_slice_eq_univ h).mp ‚ü®w, hw‚ü©, connectedComponentIn_univ,
      PreconnectedSpace.connectedComponent_eq_univ, convexHull_univ]
  obtain ‚ü®u', hu'‚ü© := ContinuousLinearMap.exists_ne_zero h
  let u := (p2 u')‚Åª¬π ‚Ä¢ u'
  let q : DualPair (TangentSpace I œÉ.1.1.2) :=
    ‚ü®p2, u, by erw [p2.map_smul, smul_eq_mul, inv_mul_cancel‚ÇÄ hu']‚ü©
  rw [relativize_slice q rfl]
  exact (hR q).vadd

theorem FamilyOneJetSec.uncurry_mem_relativize (S : FamilyOneJetSec I M I' M' IP P) {s : P}
    {x : M} : S.uncurry (s, x) ‚àà R.relativize IP P ‚Üî S s x ‚àà R := by
  simp_rw [RelMfld.relativize, mem_preimage, bundleSnd_eq, OneJetSec.coe_apply, mapLeft]
  dsimp
  congr!
  -- Porting note: the next two let shouldn't be needed.
  let _this‚ÇÅ :
    Module ‚Ñù (((Prod.fst : M √ó M' ‚Üí M) *·µñ (TangentSpace I)) (x, (S s).bs x)) := by infer_instance
  let _this‚ÇÇ :
    Module ‚Ñù (((Prod.snd : M √ó M' ‚Üí M') *·µñ (TangentSpace I')) (x, (S s).bs x)) := by infer_instance
  -- Porting note: we are missing an ext lemma here.
  apply ContinuousLinearMap.ext_iff.2 (fun v ‚Ü¶ ?_)
  change ((S.uncurry.œï (s, x)).comp (ContinuousLinearMap.inr ‚Ñù EP E)) v = _
  erw [S.uncurry_œï', ContinuousLinearMap.comp_apply, ContinuousLinearMap.add_apply,
    ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply, ContinuousLinearMap.coe_fst',
    ContinuousLinearMap.comp_apply]
  simp [S.coe_œï]

def FamilyFormalSol.uncurry (S : FamilyFormalSol IP P R) : FormalSol (R.relativize IP P) := by
  refine ‚ü®S.toFamilyOneJetSec.uncurry, ?_‚ü©
  rintro ‚ü®s, x‚ü©
  exact S.toFamilyOneJetSec.uncurry_mem_relativize.mpr (S.is_sol' s x)

theorem FamilyFormalSol.uncurry_œï' (S : FamilyFormalSol IP P R) (p : P √ó M) :
    S.uncurry.œï p =
      mfderiv IP I' (fun z ‚Ü¶ S.bs z p.2) p.1 ‚àòL ContinuousLinearMap.fst ‚Ñù EP E +
        S.œï p.1 p.2 ‚àòL ContinuousLinearMap.snd ‚Ñù EP E :=
  S.toFamilyOneJetSec.uncurry_œï' p

def FamilyOneJetSec.curry (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) :
    FamilyOneJetSec I M I' M' (J.prod IP) (N √ó P)
    where
  bs p x := (S p.1).bs (p.2, x)
  œï p x := (S p.1).œï (p.2, x) ‚àòL mfderiv I (IP.prod I) (fun x ‚Ü¶ (p.2, x)) x
  smooth' := by
    rintro ‚ü®‚ü®t, s‚ü©, x‚ü©
    refine contMDiffAt_snd.oneJetBundle_mk (S.smooth_bs.comp contMDiff_prod_assoc _) ?_
    have h1 :
      ContMDiffAt ((J.prod IP).prod I) ùìò(‚Ñù, EP √ó E ‚ÜíL[‚Ñù] E') ‚àû
        (inTangentCoordinates (IP.prod I) I' (fun p : (N √ó P) √ó M ‚Ü¶ (p.1.2, p.2))
          (fun p : (N √ó P) √ó M ‚Ü¶ (S p.1.1).bs (p.1.2, p.2))
          (fun p : (N √ó P) √ó M ‚Ü¶ (S p.1.1).œï (p.1.2, p.2)) ((t, s), x))
        ((t, s), x) := by
      apply
        (contMDiffAt_oneJetBundle.mp <|
              ContMDiffAt.comp ((t, s), x) (S.smooth (t, (s, x))) (contMDiff_prod_assoc ((t, s), x))).2.2
    have h2 :
      ContMDiffAt ((J.prod IP).prod I) ùìò(‚Ñù, E ‚ÜíL[‚Ñù] EP √ó E) ‚àû
        (inTangentCoordinates I (IP.prod I) Prod.snd (fun p : (N √ó P) √ó M ‚Ü¶ (p.1.2, p.2))
          (fun p : (N √ó P) √ó M ‚Ü¶ mfderiv I (IP.prod I) (fun x : M ‚Ü¶ (p.1.2, x)) p.2) ((t, s), x))
        ((t, s), x) := by
      apply
        ContMDiffAt.mfderiv (fun (p : (N √ó P) √ó M) (x : M) ‚Ü¶ (p.1.2, x)) Prod.snd
          (contMDiffAt_fst.fst.snd.prodMk contMDiffAt_snd :
            ContMDiffAt (((J.prod IP).prod I).prod I) (IP.prod I) ‚àû _ (((t, s), x), x))
          (contMDiffAt_snd : ContMDiffAt ((J.prod IP).prod I) _ ‚àû _ _) (mod_cast le_top)
    exact h1.clm_comp_inTangentCoordinates (continuousAt_fst.snd.prodMk continuousAt_snd) h2

theorem FamilyOneJetSec.curry_bs (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) (p : N √ó P)
    (x : M) : (S.curry p).bs x = (S p.1).bs (p.2, x) :=
  rfl

theorem FamilyOneJetSec.curry_œï (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) (p : N √ó P)
    (x : M) : (S.curry p).œï x = (S p.1).œï (p.2, x) ‚àòL mfderiv I (IP.prod I) (fun x ‚Ü¶ (p.2, x)) x :=
  rfl

theorem FamilyOneJetSec.curry_œï' (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) (p : N √ó P)
    (x : M) : (S.curry p).œï x = (S p.1).œï (p.2, x) ‚àòL ContinuousLinearMap.inr ‚Ñù EP E := by
  rw [S.curry_œï]
  congr 1
  refine (mdifferentiableAt_const.mfderiv_prod (contMDiff_id.mdifferentiableAt le_top)).trans ?_
  rw [mfderiv_id, mfderiv_const]
  rfl

theorem FormalSol.eq_iff {F‚ÇÅ F‚ÇÇ : FormalSol R} {x : M} :
    F‚ÇÅ x = F‚ÇÇ x ‚Üî F‚ÇÅ.bs x = F‚ÇÇ.bs x ‚àß F‚ÇÅ.œï x = by apply F‚ÇÇ.œï x := by
  simp [Bundle.TotalSpace.ext_iff, FormalSol.fst_eq, FormalSol.snd_eq]

theorem FamilyOneJetSec.isHolonomicAt_curry (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N)
    {t : N} {s : P} {x : M} (hS : (S t).IsHolonomicAt (s, x)) : (S.curry (t, s)).IsHolonomicAt x := by
  simp_rw [OneJetSec.IsHolonomicAt, (S.curry _).snd_eq, S.curry_œï] at hS ‚ä¢
  rw [show (S.curry (t, s)).bs = fun x ‚Ü¶ (S.curry (t, s)).bs x from rfl, funext (S.curry_bs _)]
  refine (mfderiv_comp x ((S t).smooth_bs.mdifferentiableAt (mod_cast le_top))
    (mdifferentiableAt_const.prodMk (contMDiff_id.mdifferentiableAt le_top))).trans
    ?_
  rw [id, hS]
  rfl

theorem FamilyOneJetSec.curry_mem (S : FamilyOneJetSec (IP.prod I) (P √ó M) I' M' J N) {p : N √ó P}
    {x : M} (hR : S p.1 (p.2, x) ‚àà R.relativize IP P) : S.curry p x ‚àà R := by
  simp_rw [RelMfld.relativize, mem_preimage, bundleSnd_eq, OneJetSec.coe_apply, mapLeft] at hR ‚ä¢
  convert hR
  -- Porting note: we are missing an ext lemma here.
  apply ContinuousLinearMap.ext_iff.2 (fun v ‚Ü¶ ?_)
  rw [S.curry_œï']

def FamilyFormalSol.curry (S : FamilyFormalSol J N (R.relativize IP P)) :
    FamilyFormalSol (J.prod IP) (N √ó P) R :=
  ‚ü®S.toFamilyOneJetSec.curry, fun _p _x ‚Ü¶ S.toFamilyOneJetSec.curry_mem S.is_sol‚ü©

theorem FamilyFormalSol.curry_œï' (S : FamilyFormalSol J N (R.relativize IP P)) (p : N √ó P) (x : M) :
    (S.curry p).œï x = (S p.1).œï (p.2, x) ‚àòL ContinuousLinearMap.inr ‚Ñù EP E :=
  S.toFamilyOneJetSec.curry_œï' p x

theorem curry_eq_iff_eq_uncurry {ùìï : FamilyFormalSol J N (R.relativize IP P)}
    {ùìï‚ÇÄ : FamilyFormalSol IP P R} {t : N} {x : M} {s : P} (h : ùìï t (s, x) = ùìï‚ÇÄ.uncurry (s, x)) :
    (ùìï.curry (t, s)) x = ùìï‚ÇÄ s x := by
  rw [FormalSol.eq_iff] at h ‚ä¢
  refine ‚ü®h.1, ?_‚ü©
  rw [ùìï.curry_œï', h.2, ùìï‚ÇÄ.uncurry_œï']
  ext v
  erw [ContinuousLinearMap.comp_apply, ContinuousLinearMap.add_apply,
    ContinuousLinearMap.comp_apply, ContinuousLinearMap.inr_apply, ContinuousLinearMap.coe_fst',
    ContinuousLinearMap.comp_apply, ContinuousLinearMap.coe_snd', ContinuousLinearMap.map_zero,
    zero_add]

theorem RelMfld.SatisfiesHPrinciple.satisfiesHPrincipleWith (R : RelMfld I M IX X) {C : Set (P √ó M)}
    (Œµ : M ‚Üí ‚Ñù) (h : (R.relativize IP P).SatisfiesHPrinciple C fun x ‚Ü¶ Œµ x.2) :
    R.SatisfiesHPrincipleWith IP C Œµ := by
  intro ùìï‚ÇÄ hùìï‚ÇÄ
  obtain ‚ü®ùìï, h1ùìï, h2ùìï, h3ùìï, h4ùìï‚ü© :=
    h ùìï‚ÇÄ.uncurry (hùìï‚ÇÄ.mono fun p hp ‚Ü¶ ùìï‚ÇÄ.toFamilyOneJetSec.isHolonomicAt_uncurry.mpr hp)
  refine ‚ü®ùìï.curry, ?_, ?_, ?_, ?_‚ü©
  ¬∑ exact fun s x ‚Ü¶ curry_eq_iff_eq_uncurry (h1ùìï (s, x))
  ¬∑ exact fun s x ‚Ü¶ ùìï.toFamilyOneJetSec.isHolonomicAt_curry (h2ùìï (s, x))
  ¬∑ refine h3ùìï.mono ?_; rintro ‚ü®s, x‚ü© hp t; exact curry_eq_iff_eq_uncurry (hp t)
  ¬∑ exact fun t s x ‚Ü¶ h4ùìï t (s, x)

end ParameterSpace
