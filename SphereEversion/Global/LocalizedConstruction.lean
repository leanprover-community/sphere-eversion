import SphereEversion.Global.Localisation
import SphereEversion.Local.HPrinciple

noncomputable section

open Set Filter ModelWithCorners Metric

open scoped Topology Manifold ContDiff

variable {EM : Type*} [NormedAddCommGroup EM] [NormedSpace ‚Ñù EM] [FiniteDimensional ‚Ñù EM]
  {HM : Type*} [TopologicalSpace HM] {IM : ModelWithCorners ‚Ñù EM HM}
  {M : Type*} [TopologicalSpace M] [ChartedSpace HM M] [IsManifold IM ‚àû M]
  [T2Space M]
  {EX : Type*} [NormedAddCommGroup EX] [NormedSpace ‚Ñù EX] [FiniteDimensional ‚Ñù EX]
  {HX : Type*} [TopologicalSpace HX] {IX : ModelWithCorners ‚Ñù EX HX}
  {X : Type*} [MetricSpace X] [ChartedSpace HX X] [IsManifold IX ‚àû X]

theorem OpenSmoothEmbedding.improve_formalSol (œÜ : OpenSmoothEmbedding ùìò(‚Ñù, EM) EM IM M)
    (œà : OpenSmoothEmbedding ùìò(‚Ñù, EX) EX IX X) {R : RelMfld IM M IX X} (hRample : R.Ample)
    (hRopen : IsOpen R) {C : Set M} (hC : IsClosed C) {Œ¥ : M ‚Üí ‚Ñù} (hŒ¥_pos : ‚àÄ x, 0 < Œ¥ x)
    (hŒ¥_cont : Continuous Œ¥) {F : FormalSol R} (hFœÜœà : F.bs '' range œÜ ‚äÜ range œà)
    (hFC : ‚àÄ·∂† x near C, F.IsHolonomicAt x) {K‚ÇÄ K‚ÇÅ : Set EM} (hK‚ÇÄ : IsCompact K‚ÇÄ)
    (hK‚ÇÅ : IsCompact K‚ÇÅ) (hK‚ÇÄK‚ÇÅ : K‚ÇÄ ‚äÜ interior K‚ÇÅ) :
    ‚àÉ F' : HtpyFormalSol R,
      (‚àÄ·∂† t near Iic (0 : ‚Ñù), F' t = F) ‚àß
        (‚àÄ·∂† t near Ici (1 : ‚Ñù), F' t = F' 1) ‚àß
          (‚àÄ·∂† x near C, ‚àÄ t, F' t x = F x) ‚àß
            (‚àÄ t, ‚àÄ x ‚àâ œÜ '' K‚ÇÅ, F' t x = F x) ‚àß
              (‚àÄ t x, dist ((F' t).bs x) (F.bs x) < Œ¥ x) ‚àß
                ‚àÄ·∂† x near C ‚à™ œÜ '' K‚ÇÄ, (F' 1).IsHolonomicAt x := by
  let Rloc : RelLoc EM EX := (R.localize œÜ œà).relLoc
  have hRloc_op : IsOpen Rloc :=
    isOpen_of_isOpen _ (hRopen.preimage <| OneJetBundle.continuous_transfer _ _)
  have hRloc_ample : Rloc.IsAmple := ample_of_ample _ (hRample.localize _ _)
  -- TODO: try to be consistent about how to state the hFœÜœà condition
  replace hFœÜœà : range (F.bs ‚àò œÜ) ‚äÜ range œà := by
    rw [range_comp]
    exact hFœÜœà
  let p : ChartPair IM M IX X :=
    { œÜ
      œà
      K‚ÇÅ
      hK‚ÇÅ }
  rcases p.dist_update' hŒ¥_pos hŒ¥_cont hFœÜœà with ‚ü®œÑ, œÑ_pos, hœÑ‚ü©
  let ùìï := F.localize p hFœÜœà
  let L : Landscape EM :=
    { C := œÜ ‚Åª¬π' C
      K‚ÇÄ
      K‚ÇÅ
      hC := hC.preimage œÜ.continuous
      hK‚ÇÄ
      hK‚ÇÅ
      h‚ÇÄ‚ÇÅ := hK‚ÇÄK‚ÇÅ }
  have hùìïC : ‚àÄ·∂† x : EM near L.C, ùìï.IsHolonomicAt x := by
    rw [eventually_nhdsSet_iff_forall] at hFC ‚ä¢
    intro e he
    rw [œÜ.isInducing.nhds_eq_comap, eventually_comap]
    apply (hFC _ he).mono
    rintro x hx e rfl
    exact F.isHolonomicLocalize p hFœÜœà e hx
  rcases ùìï.improve_htpy' hRloc_op hRloc_ample L œÑ_pos hùìïC with
    ‚ü®ùìï', hùìï't0, hùìï't1, hùìï'relC, hùìï'relK‚ÇÅ, hùìï'dist, hùìï'hol‚ü©
  have hcompat : p.compat' F ùìï' := ‚ü®hFœÜœà, hùìï'relK‚ÇÅ‚ü©
  let F' : HtpyFormalSol R := p.mkHtpy F ùìï'
  have hF'relK‚ÇÅ : ‚àÄ t, ‚àÄ x ‚àâ œÜ '' K‚ÇÅ, F' t x = F x := by apply p.mkHtpy_eq_of_not_mem
  have hF't0 : ‚àÄ·∂† t : ‚Ñù near Iic 0, F' t = F := by
    apply hùìï't0.mono
    rintro t ht
    exact p.mkHtpy_eq_of_forall hcompat ht
  have hF't1 : ‚àÄ·∂† t : ‚Ñù near Ici 1, F' t = F' 1 := hùìï't1.mono fun t ‚Ü¶ p.mkHtpy_congr _
  refine ‚ü®F', hF't0, hF't1, ?_, hF'relK‚ÇÅ, ?_, ?_‚ü©
  ¬∑ apply œÜ.forall_near hK‚ÇÅ hùìï'relC (Eventually.of_forall fun x hx t ‚Ü¶ hF'relK‚ÇÅ t x hx)
    ¬∑ intro e he t
      rw [p.mkHtpy_eq_of_eq _ _ hcompat]
      exact he t
  ¬∑ intro t x
    rcases Classical.em (x ‚àà œÜ '' K‚ÇÅ) with (‚ü®e, he, rfl‚ü© | hx)
    ¬∑ by_cases ht : t ‚àà (Icc 0 1 : Set ‚Ñù)
      ¬∑ exact hœÑ hcompat e he t ht (hùìï'dist e t)
      ¬∑ rw [mem_Icc, not_and_or, not_le, not_le] at ht
        obtain (ht | ht) := ht
        ¬∑ erw [hF't0.self_of_nhdsSet t ht.le, dist_self]
          apply hŒ¥_pos
        ¬∑ rw [hF't1.self_of_nhdsSet t ht.le]
          exact hœÑ hcompat e he 1 (right_mem_Icc.mpr zero_le_one) (hùìï'dist e 1)
    ¬∑ change dist (F' t x).1.2 (F.bs x) < Œ¥ x
      erw [p.mkHtpy_eq_of_not_mem _ _ hx, dist_self]
      apply hŒ¥_pos
  ¬∑ have hùìï'holC : ‚àÄ·∂† x : EM near L.C, (ùìï' 1).IsHolonomicAt x := by
      apply (hùìï'relC.eventually_nhdsSet.and hùìïC).mono
      rintro x ‚ü®hx, hx'‚ü©
      exact JetSec.IsHolonomicAt.congr hx' (hx.mono fun x' hx' ‚Ü¶ (hx' 1).symm)
    have : ‚àÄ·∂† x near œÜ ‚Åª¬π' C ‚à™ K‚ÇÄ, (ùìï' 1).IsHolonomicAt x := hùìï'holC.union hùìï'hol
    rw [‚Üê preimage_image_eq K‚ÇÄ œÜ.injective, ‚Üê preimage_union] at this
    apply œÜ.forall_near hK‚ÇÅ this
    ¬∑ apply Filter.Eventually.union
      ¬∑ apply hFC.mono
        intro x hx hx'
        apply hx.congr
        symm
        have : ‚àÄ·∂† y in ùìù x, y ‚àà (œÜ '' K‚ÇÅ)·∂ú :=
          isOpen_iff_mem_nhds.mp (hK‚ÇÅ.image œÜ.continuous).isClosed.isOpen_compl x hx'
        apply this.mono
        exact hF'relK‚ÇÅ _
      ¬∑ have : ‚àÄ·∂† x near œÜ '' K‚ÇÄ, x ‚àà p.œÜ '' K‚ÇÅ := by
          suffices ‚àÄ·∂† x near œÜ '' K‚ÇÄ, x ‚àà interior (p.œÜ '' K‚ÇÅ) from this.mono interior_subset
          exact isOpen_interior.mem_nhdsSet.mpr
            ((image_subset œÜ hK‚ÇÄK‚ÇÅ).trans (œÜ.isOpenMap.image_interior_subset K‚ÇÅ))
        exact this.mono (fun a hx hx' ‚Ü¶ (hx' hx).elim)
    ¬∑ exact fun _ ‚Ü¶ (p.mkHtpy_isHolonomicAt_iff hcompat).mpr
