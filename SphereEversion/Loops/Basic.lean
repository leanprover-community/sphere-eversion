import SphereEversion.Notations
import SphereEversion.ToMathlib.Equivariant
import SphereEversion.ToMathlib.MeasureTheory.ParametricIntervalIntegral
import Mathlib.Tactic.FunProp.ContDiff

/-!
# Basic definitions and properties of loops
-/

open Set Function FiniteDimensional Int TopologicalSpace

open scoped Topology unitInterval

noncomputable section

variable {K X X' Y Z : Type*}

-- variable [TopologicalSpace X'] [TopologicalSpace Y] [TopologicalSpace Z]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] {F : Type*} [NormedAddCommGroup F]
  [NormedSpace ‚Ñù F] {F' : Type*} [NormedAddCommGroup F'] [NormedSpace ‚Ñù F']

/-! ## Definition and periodicity lemmas -/


variable (X)

/-- A loop is a function with domain `‚Ñù` and is periodic with period 1. -/
structure Loop where
  toFun : ‚Ñù ‚Üí X
  per' : ‚àÄ t, toFun (t + 1) = toFun t

attribute [coe] Loop.toFun

instance : CoeFun (Loop X) fun _ ‚Ü¶ ‚Ñù ‚Üí X :=
  ‚ü®fun Œ≥ ‚Ü¶ Œ≥.toFun‚ü©

initialize_simps_projections Loop (toFun ‚Üí apply)

/-- Any function `œÜ : Œ± ‚Üí loop X` can be seen as a function `Œ± √ó ‚Ñù ‚Üí X`. -/
instance hasUncurryLoop {Œ± : Type*} : HasUncurry (Œ± ‚Üí Loop X) (Œ± √ó ‚Ñù) X :=
  ‚ü®fun œÜ p ‚Ü¶ œÜ p.1 p.2‚ü©

variable {X}

namespace Loop

@[simp]
protected theorem coe_mk {Œ≥ : ‚Ñù ‚Üí X} (h : ‚àÄ t, Œ≥ (t + 1) = Œ≥ t) : ‚áë(‚ü®Œ≥, h‚ü© : Loop X) = Œ≥ :=
  rfl

@[ext]
protected theorem ext : ‚àÄ {Œ≥‚ÇÅ Œ≥‚ÇÇ : Loop X}, (Œ≥‚ÇÅ : ‚Ñù ‚Üí X) = Œ≥‚ÇÇ ‚Üí Œ≥‚ÇÅ = Œ≥‚ÇÇ
  | ‚ü®_x, _h1‚ü©, ‚ü®.(_x), _h2‚ü©, rfl => rfl

/-- The constant loop. -/
@[simps]
def const (f : X) : Loop X :=
  ‚ü®fun _ ‚Ü¶ f, fun _ ‚Ü¶ rfl‚ü©

instance Zero [Zero X] : Zero (Loop X) :=
  ‚ü®const 0‚ü©

@[simp]
theorem zero_fun [_root_.Zero X] : ((0 : Loop X) : ‚Ñù ‚Üí X) = (0 : ‚Ñù ‚Üí X) :=
  rfl

-- unused
@[simp]
theorem const_zero [_root_.Zero X] : const (0 : X) = (0 : Loop X) :=
  rfl

instance [Inhabited X] : Inhabited (Loop X) :=
  ‚ü®Loop.const default‚ü©

/-- Periodicity of loops restated in terms of the function coercion. -/
theorem per (Œ≥ : Loop X) : ‚àÄ t, Œ≥ (t + 1) = Œ≥ t :=
  Loop.per' Œ≥

theorem periodic (Œ≥ : Loop X) : Function.Periodic Œ≥ 1 :=
  Loop.per' Œ≥

protected theorem one (Œ≥ : Loop X) : Œ≥ 1 = Œ≥ 0 := by convert Œ≥.per 0; rw [zero_add]

-- unused
theorem add_nat_eq (Œ≥ : Loop X) (t : ‚Ñù) : ‚àÄ n : ‚Ñï, Œ≥ (t + n) = Œ≥ t
  | 0 => by rw [Nat.cast_zero, add_zero]
  | Nat.succ n => by rw [‚Üê Œ≥.add_nat_eq t n, Nat.cast_succ, ‚Üê add_assoc, Œ≥.per]

theorem add_int_eq (Œ≥ : Loop X) (t : ‚Ñù) (n : ‚Ñ§) : Œ≥ (t + n) = Œ≥ t := by
  induction' n using Int.induction_on with n hn n hn
  ¬∑ norm_cast; rw [add_zero]
  ¬∑ rw [‚Üê hn, Int.cast_add, ‚Üê add_assoc, Int.cast_one, Œ≥.per]
  ¬∑ rw [‚Üê hn, Int.cast_sub, add_sub, Int.cast_one, ‚Üê Œ≥.per, sub_add_cancel]

theorem fract_eq (Œ≥ : Loop X) : ‚àÄ t, Œ≥ (fract t) = Œ≥ t := by
  intro t
  unfold fract
  rw [sub_eq_add_neg, ‚Üê Int.cast_neg]
  exact Œ≥.add_int_eq ..

theorem range_eq_image (Œ≥ : Loop X) : range Œ≥ = Œ≥ '' I := by
  apply eq_of_subset_of_subset
  ¬∑ rw [range_subset_iff]
    exact fun y ‚Ü¶ ‚ü®fract y, unitInterval.fract_mem y, Œ≥.fract_eq _‚ü©
  ¬∑ rintro y ‚ü®x, -, hxy‚ü©
    exact ‚ü®x, hxy‚ü©

/-- Transforming a loop by applying function `f`. -/
@[simps]
def transform (Œ≥ : Loop X) (f : X ‚Üí X') : Loop X' :=
  ‚ü®fun t ‚Ü¶ f (Œ≥ t), fun t ‚Ü¶ by dsimp only; rw [Œ≥.per]‚ü©

/-- Adding two loops pointwise. -/
@[simps]
instance Add [Add X] : Add (Loop X) :=
  ‚ü®fun Œ≥‚ÇÅ Œ≥‚ÇÇ ‚Ü¶ ‚ü®fun t ‚Ü¶ Œ≥‚ÇÅ t + Œ≥‚ÇÇ t, fun t ‚Ü¶ by simp_rw [Loop.per]‚ü©‚ü©

@[simps]
instance Neg [Neg X] : Neg (Loop X) :=
  ‚ü®fun Œ≥ ‚Ü¶ ‚ü®fun t ‚Ü¶ -Œ≥ t, fun t ‚Ü¶ by simp_rw [Loop.per]‚ü©‚ü©

instance [AddCommGroup X] : AddCommGroup (Loop X) :=
  { Loop.Add, Loop.Zero, Loop.Neg with
    add_assoc := fun Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ ‚Ü¶ by ext t; apply add_assoc
    add_comm := fun Œ≥‚ÇÅ Œ≥‚ÇÇ ‚Ü¶ by ext t; apply add_comm
    zero_add := fun Œ≥ ‚Ü¶ by ext t; apply zero_add
    add_zero := fun Œ≥ ‚Ü¶ by ext t; apply add_zero
    neg_add_cancel := fun Œ≥ ‚Ü¶ by ext t; apply neg_add_cancel
    nsmul := nsmulRec
    zsmul := zsmulRec }

/-- Shifting a loop, or equivalently, adding a constant value to a loop. -/
instance [_root_.Add X] : VAdd X (Loop X) :=
  ‚ü®fun x Œ≥ ‚Ü¶ Œ≥.transform fun y ‚Ü¶ x + y‚ü©

@[simp]
theorem vadd_apply [_root_.Add X] {x : X} {Œ≥ : Loop X} {t : ‚Ñù} : (x +·µ• Œ≥) t = x + Œ≥ t :=
  rfl

/-- Multiplying a loop by a scalar value. -/
instance [SMul K X] : SMul K (Loop X) :=
  ‚ü®fun k Œ≥ ‚Ü¶ Œ≥.transform fun y ‚Ü¶ k ‚Ä¢ y‚ü©

instance [Semiring K] [AddCommGroup X] [Module K X] : Module K (Loop X) where
  one_smul Œ≥ := by ext t; apply one_smul
  mul_smul k‚ÇÅ k‚ÇÇ Œ≥ := by ext t; apply mul_smul
  smul_zero k := by ext; apply smul_zero
  smul_add k Œ≥‚ÇÅ Œ≥‚ÇÇ := by ext t; apply smul_add
  add_smul k‚ÇÅ k‚ÇÇ Œ≥ := by ext t; apply add_smul
  zero_smul Œ≥ := by ext t; apply zero_smul

@[simp]
theorem smul_apply [SMul K X] {k : K} {Œ≥ : Loop X} {t : ‚Ñù} : (k ‚Ä¢ Œ≥) t = k ‚Ä¢ Œ≥ t :=
  rfl

/-- Reparametrizing loop `Œ≥` using an equivariant map `œÜ`. -/
@[simps (config := { simpRhs := true })]
def reparam {F : Type*} (Œ≥ : Loop F) (œÜ : EquivariantMap) : Loop F where
  toFun := Œ≥ ‚àò œÜ
  per' t := by rw [comp_apply, œÜ.eqv, Œ≥.per]; rfl

/-! ## Support of a loop family -/


/-- A loop is constant if it takes the same value at every time.
See also `Loop.isConst_iff_forall_avg` and `Loop.isConst_iff_const_avg` for characterizations in
terms of average values. -/
def IsConst (Œ≥ : Loop X) :=
  ‚àÄ t s, Œ≥ t = Œ≥ s

theorem isConst_of_eq {Œ≥ : Loop X} {f : X} (H : ‚àÄ t, Œ≥ t = f) : Œ≥.IsConst := fun t t' ‚Ü¶ by
  rw [H, H]

variable [TopologicalSpace X] [TopologicalSpace X'] [TopologicalSpace Y] [TopologicalSpace Z]

/-- The support of a loop family is the closure of the set of parameters where
the loop is not constant. -/
def support (Œ≥ : X ‚Üí Loop X') : Set X :=
  closure {x | ¬¨(Œ≥ x).IsConst}

omit [TopologicalSpace X'] in
theorem not_mem_support {Œ≥ : X ‚Üí Loop X'} {x : X} (h : ‚àÄ·∂† y in ùìù x, (Œ≥ y).IsConst) :
    x ‚àâ Loop.support Œ≥ := by
  intro hx
  rw [support, mem_closure_iff_nhds] at hx
  rcases hx _ h with ‚ü®z, hz, hz'‚ü©
  exact hz' hz

/-! ## From paths to loops -/


/-- Turn a path into a loop. -/
@[simps]
noncomputable def ofPath {x : X} (Œ≥ : Path x x) : Loop X where
  toFun t := Œ≥.extend (fract t)
  per' t := by rw [fract_add_one]

@[simp]
theorem range_ofPath {x : X} (Œ≥ : Path x x) : range (ofPath Œ≥) = range Œ≥ := by
  rw [Loop.range_eq_image, ofPath, image_eq_range]
  apply congrArg
  ext t
  by_cases ht1 : t.val = 1
  ¬∑ have : t = ‚ü®1, right_mem_Icc.mpr zero_le_one‚ü© := Subtype.ext_val ht1
    rw [this]
    norm_cast
    simp only [fract, floor_one, Path.extend_zero, Int.cast_one, sub_self, Subtype.coe_mk]
    exact Œ≥.target.symm
  ¬∑ change (t : ‚Ñù) ‚â† 1 at ht1
    have : fract ‚Üët = t.val := by
      rw [fract_eq_iff]
      refine ‚ü®t.2.1, t.2.2.lt_of_ne ht1, ‚ü®0, ?_‚ü©‚ü©
      rw [Int.cast_zero, sub_self]
    simp only [this, Œ≥.extend_extends t.2]

/-- `Loop.ofPath` is continuous, general version. -/
@[fun_prop]
theorem _root_.Continuous.ofPath (x : X ‚Üí Y) (t : X ‚Üí ‚Ñù) (Œ≥ : ‚àÄ i, Path (x i) (x i)) (hŒ≥ : Continuous ‚ÜøŒ≥)
    (ht : Continuous t) : Continuous fun i ‚Ü¶ ofPath (Œ≥ i) (t i) := by
  change Continuous fun i ‚Ü¶ (fun s ‚Ü¶ (Œ≥ s).extend) i (fract (t i))
  refine ContinuousOn.comp_fract ?_ ht ?_
  ¬∑ have : Continuous (fun x : X √ó ‚Ñù ‚Ü¶ (x.1, projIcc 0 1 zero_le_one x.2)) :=
      continuous_id.prodMap continuous_projIcc
    exact (hŒ≥.comp this).continuousOn
  ¬∑ simp only [Icc.mk_zero, zero_le_one, Path.target, Path.extend_extends, imp_true_iff,
      eq_self_iff_true, Path.source, right_mem_Icc, left_mem_Icc, Icc.mk_one]

/-- `Loop.ofPath` is continuous, where the endpoints of `Œ≥` are fixed. TODO: remove -/
@[fun_prop]
theorem ofPath_continuous_family {x : Y} (Œ≥ : X ‚Üí Path x x) (h : Continuous ‚ÜøŒ≥) :
    Continuous ‚Üøfun s ‚Ü¶ ofPath <| Œ≥ s :=
  Continuous.ofPath _ _ (fun i : X √ó ‚Ñù ‚Ü¶ Œ≥ i.1) (h.comp <| continuous_fst.prodMap continuous_id)
    continuous_snd

/-! ## Round trips -/


/-- The round-trip defined by `Œ≥` is `Œ≥` followed by `Œ≥‚Åª¬π`. -/
def roundTrip {x y : X} (Œ≥ : Path x y) : Loop X :=
  ofPath (Œ≥.trans Œ≥.symm)

theorem roundTrip_range {x y : X} {Œ≥ : Path x y} : range (roundTrip Œ≥) = range Œ≥ := by
  simp [roundTrip, range_ofPath, Path.trans_range, Path.symm_range]

theorem roundTrip_based_at {x y : X} {Œ≥ : Path x y} : roundTrip Œ≥ 0 = x := by
  simp [roundTrip, ofPath, fract_zero]

theorem roundTrip_eq {x y x' y' : X} {Œ≥ : Path x y} {Œ≥' : Path x' y'} (h : ‚àÄ s, Œ≥ s = Œ≥' s) :
    roundTrip Œ≥ = roundTrip Œ≥' := by
  obtain rfl : x = x' := Œ≥.source.symm.trans ((h 0).trans Œ≥'.source)
  obtain rfl : y = y' := Œ≥.target.symm.trans ((h 1).trans Œ≥'.target)
  obtain rfl : Œ≥ = Œ≥' := by ext; apply h
  rfl

/-- The round trip loop family associated to a path `Œ≥`. For each parameter `t`,
the loop `roundTripFamily Œ≥ t` backtracks at `Œ≥ t`. -/
noncomputable def roundTripFamily {x y : X} (Œ≥ : Path x y) : ‚Ñù ‚Üí Loop X :=
  have key : ‚àÄ {t}, x = Œ≥.extend (min 0 t) := (Œ≥.extend_of_le_zero <| min_le_left _ _).symm
  fun t ‚Ü¶ roundTrip ((Œ≥.truncate 0 t).cast key rfl)

attribute [fun_prop] Path.trans_continuous_family Path.symm_continuous_family Path.truncate_const_continuous_family
@[fun_prop]
theorem roundTripFamily_continuous {x y : X} {Œ≥ : Path x y} : Continuous ‚Üø(roundTripFamily Œ≥) :=
  ofPath_continuous_family _
    (Path.trans_continuous_family _ (Œ≥.truncate_const_continuous_family 0) _ <|
      Path.symm_continuous_family _ <| (by fun_prop))

theorem roundTripFamily_based_at {x y : X} {Œ≥ : Path x y} : ‚àÄ t, (roundTripFamily Œ≥) t 0 = x :=
  fun _ ‚Ü¶ roundTrip_based_at

theorem roundTripFamily_zero {x y : X} {Œ≥ : Path x y} :
    (roundTripFamily Œ≥) 0 = ofPath (Path.refl x) := by
  simp only [roundTripFamily, roundTrip, Path.truncate_zero_zero, ofPath]
  congr with t
  simp [Path.refl_symm]
  rfl

theorem roundTripFamily_one {x y : X} {Œ≥ : Path x y} : (roundTripFamily Œ≥) 1 = roundTrip Œ≥ := by
  simp only [roundTripFamily, roundTrip, Path.truncate_zero_one, ofPath]
  rfl

/-! ## Average value of a loop -/
section Average

/-- The average value of a loop. -/
noncomputable def average (Œ≥ : Loop F) : F :=
  ‚à´ x in (0 : ‚Ñù)..1, Œ≥ x

-- unused
@[simp]
theorem zero_average : average (0 : Loop F) = 0 :=
  intervalIntegral.integral_zero

theorem isConst_iff_forall_avg [CompleteSpace F] {Œ≥ : Loop F} : Œ≥.IsConst ‚Üî ‚àÄ t, Œ≥ t = Œ≥.average := by
  constructor <;> intro h
  ¬∑ intro t
    have : Œ≥ = Loop.const (Œ≥ t) := by
      ext s
      exact h s t
    rw [this]
    simp [average, const_apply, intervalIntegral.integral_const, one_smul, sub_zero]
  ¬∑ exact isConst_of_eq h

@[simp]
theorem average_const [CompleteSpace F] {f : F} : (const f).average = f := by simp [Loop.average]

open MeasureTheory

@[simp]
theorem average_add {Œ≥‚ÇÅ Œ≥‚ÇÇ : Loop F} (hŒ≥‚ÇÅ : IntervalIntegrable Œ≥‚ÇÅ volume 0 1)
    (hŒ≥‚ÇÇ : IntervalIntegrable Œ≥‚ÇÇ volume 0 1) : (Œ≥‚ÇÅ + Œ≥‚ÇÇ).average = Œ≥‚ÇÅ.average + Œ≥‚ÇÇ.average := by
  simp [Loop.average, intervalIntegral.integral_add hŒ≥‚ÇÅ hŒ≥‚ÇÇ]

@[simp]
theorem average_smul {Œ≥ : Loop F} {c : ‚Ñù} : (c ‚Ä¢ Œ≥).average = c ‚Ä¢ Œ≥.average := by
  simp [Loop.average, intervalIntegral.integral_smul]

theorem isConst_iff_const_avg [CompleteSpace F] {Œ≥ : Loop F} : Œ≥.IsConst ‚Üî Œ≥ = const Œ≥.average := by
  rw [Loop.isConst_iff_forall_avg, Loop.ext_iff, funext_iff]; rfl

omit [NormedAddCommGroup F] [NormedSpace ‚Ñù F] in
theorem isConst_of_not_mem_support {Œ≥ : X ‚Üí Loop F} {x : X} (hx : x ‚àâ support Œ≥) : (Œ≥ x).IsConst := by
  by_contra H
  exact hx (subset_closure H)

@[fun_prop]
theorem continuous_average {E : Type*} [TopologicalSpace E] [FirstCountableTopology E]
    [LocallyCompactSpace E] {Œ≥ : E ‚Üí Loop F} (hŒ≥_cont : Continuous ‚ÜøŒ≥) :
    Continuous fun x ‚Ü¶ (Œ≥ x).average :=
  intervalIntegral.continuous_parametric_intervalIntegral_of_continuous' (by apply hŒ≥_cont) _ _

/-- The normalization of a loop `Œ≥` is the loop `Œ≥ - Œ≥.average`. -/
def normalize (Œ≥ : Loop F) : Loop F where
  toFun t := Œ≥ t - Œ≥.average
  per' t := by simp [Œ≥.per]

@[simp]
theorem normalize_apply (Œ≥ : Loop F) (t : ‚Ñù) : Loop.normalize Œ≥ t = Œ≥ t - Œ≥.average :=
  rfl

@[simp]
theorem normalize_of_isConst [CompleteSpace F] {Œ≥ : Loop F} (h : Œ≥.IsConst) : Œ≥.normalize = 0 := by
  ext t
  simp [isConst_iff_forall_avg.mp h]

end Average

end Loop

section C1

/-! ## Differentiation of loop families -/


@[inherit_doc] local notation "‚àÇ‚ÇÅ" => partialFDerivFst ‚Ñù

variable (œÄ : E ‚Üí ‚Ñù) (N : ‚Ñù) (Œ≥ : E ‚Üí Loop F) (hŒ≥ : IsCompact (Loop.support Œ≥))

/-- Differential of a loop family with respect to the parameter. -/
def Loop.diff (Œ≥ : E ‚Üí Loop F) (e : E) : Loop (E ‚ÜíL[‚Ñù] F) where
  toFun t := ‚àÇ‚ÇÅ (fun e t ‚Ü¶ Œ≥ e t) e t
  per' t := by simp only [partialFDerivFst, Loop.per]

@[simp]
theorem Loop.diff_apply (Œ≥ : E ‚Üí Loop F) (e : E) (t : ‚Ñù) :
    Loop.diff Œ≥ e t = ‚àÇ‚ÇÅ (fun e t ‚Ü¶ Œ≥ e t) e t :=
  rfl

@[fun_prop]
theorem Loop.continuous_diff {Œ≥ : E ‚Üí Loop F} (h : ùíû 1 ‚ÜøŒ≥) : Continuous ‚Üø(Loop.diff Œ≥) :=
  ContDiff.continuous_partial_fst (h : _)

theorem ContDiff.partial_loop {Œ≥ : E ‚Üí Loop F} {n : ‚Ñï‚àû} (hŒ≥_diff : ùíû n ‚ÜøŒ≥) :
    ‚àÄ t, ùíû n fun e ‚Ü¶ Œ≥ e t := by
  fun_prop

variable [FiniteDimensional ‚Ñù F]

theorem Loop.support_diff {Œ≥ : E ‚Üí Loop F} : Loop.support (Loop.diff Œ≥) ‚äÜ Loop.support Œ≥ := by
  unfold Loop.support
  erw [closure_compl, closure_compl]
  rw [compl_subset_compl]
  intro x hx
  rw [mem_interior_iff_mem_nhds] at *
  rcases mem_nhds_iff.mp hx with ‚ü®U, hU, U_op, hxU‚ü©
  apply Filter.mem_of_superset (U_op.mem_nhds hxU) fun y hy ‚Ü¶ ?_
  have Hy : ‚àÄ t, (fun z ‚Ü¶ Œ≥ z t) =·∂†[ùìù y] fun z ‚Ü¶ (Œ≥ z).average :=
    fun t ‚Ü¶ Filter.mem_of_superset (U_op.mem_nhds hy)
      (fun z hz ‚Ü¶ Loop.isConst_iff_forall_avg.mp (hU hz) t)
  have : ‚àÄ t : ‚Ñù, Loop.diff Œ≥ y t = D (fun z : E ‚Ü¶ (Œ≥ z).average) y := fun t ‚Ü¶ (Hy t).fderiv_eq
  intro t s
  simp only [this]


variable [FiniteDimensional ‚Ñù E]

theorem Loop.average_diff {Œ≥ : E ‚Üí Loop F} (hŒ≥_diff : ùíû 1 ‚ÜøŒ≥) (e : E) :
    (Loop.diff Œ≥ e).average = D (fun e ‚Ü¶ (Œ≥ e).average) e := by
  change ùíû 1 ‚Üøfun (e : E) (t : ‚Ñù) ‚Ü¶ Œ≥ e t at hŒ≥_diff
  simp only [Loop.average, hŒ≥_diff.fderiv_parametric_integral]
  rfl

attribute [fun_prop] contDiff_parametric_integral_of_contDiff
theorem ContDiff.loop_average {Œ≥ : E ‚Üí Loop F} {n : ‚Ñï‚àû} (hŒ≥_diff : ùíû n ‚ÜøŒ≥) :
    ùíû n fun e ‚Ü¶ (Œ≥ e).average := by
  unfold Loop.average; fun_prop

theorem Loop.diff_normalize {Œ≥ : E ‚Üí Loop F} (hŒ≥_diff : ùíû 1 ‚ÜøŒ≥) (e : E) :
    (Loop.diff Œ≥ e).normalize = Loop.diff (fun e ‚Ü¶ (Œ≥ e).normalize) e := by
  ext t x
  simp only [Loop.diff_apply, Loop.normalize_apply, partialFDerivFst]
  rw [fderiv_sub ((hŒ≥_diff.partial_loop t).differentiable le_rfl).differentiableAt,
    Loop.average_diff hŒ≥_diff]
  exact (hŒ≥_diff.loop_average.differentiable le_rfl).differentiableAt

variable {Œ≥}

theorem contDiff_average {n : ‚Ñï‚àû} (hŒ≥_diff : ùíû n ‚ÜøŒ≥) : ùíû n fun x ‚Ü¶ (Œ≥ x).average := by
  unfold Loop.average; fun_prop

theorem contDiff_sub_average {n : ‚Ñï‚àû} (hŒ≥_diff : ùíû n ‚ÜøŒ≥) :
    ùíû n ‚Üøfun (x : E) (t : ‚Ñù) ‚Ü¶ (Œ≥ x) t - (Œ≥ x).average := by
  unfold Loop.average; fun_prop

end C1
